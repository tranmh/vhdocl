#!/usr/bin/env perl

#    This is VHDocL, a VHDL documentation utility.
#    Copyright (c) 2007-2019 Volker Schatz (vhdocl at volkerschatz dot com).
#
#    VHDocL is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 3 of the License, or
#    (at your option) any later version.
#
#    VHDocL is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with VHDocL; if not, see <http://www.gnu.org/licenses/>.


# Code section "hyperlinks" (search for word on the right):
#
# Auxiliary Functions               sectionaux
# Command line parsing functions    sectioncmdline
# VHDL parsing functions            sectionvhdl
# Data handling functions           sectiondata
# Output functions                  sectionoutput
# TeX output functions              sectiontex
# Main program                      sectionmain


use strict;
use warnings;
use File::Spec;
use File::Path;
use File::Glob;
use File::Find;
use File::Copy;
use Text::Tabs;
use Digest::MD5;
use Cwd 'abs_path';
use Socket;
use Storable;
# use Data::Dumper;

# Obtaining the modules:
# Cwd and File::Spec from http://search.cpan.org/~smueller/PathTools/
# File::Path from http://search.cpan.org/~dland/File-Path/
# Digest::MD5 from http://search.cpan.org/~gaas/Digest-MD5/
# Socket from http://search.cpan.org/~pevans/Socket/
# File::Copy and Text::Tabs from Perl distribution
# Time::HiRes (for --benchmark) from http://search.cpan.org/~zefram/Time-HiRes/

my $version= "? (use install script to install properly)";

my %config= ( outputdir => "doc", prefix => "", libname => "work",
  compat => 0, cwd => "", psl => 1, parsedebug => 0, quiet => 0, 
  texout => 0, stylesheet => "", leftlogo => "", rightlogo => "",
  homehtml => "", title => "", footer => "", topmodules => [],
  sourcelinks => 1, tabsize => 0, packagesummary => "never",
  eyecandy =>  0 );

my %requisites= ( treestyle => "treeview.css", treejava => "treeview.js",
    sourcejava => "sourceview.js", nodeimg => "node.png",
    subtrimg => "subtree.png", leafimg => "leaf.png", basestyle => "vhdocl.css" );

my @vhdlfiles;

#sectionaux###################################################################
##############################################################################
####                    Auxiliary functions
##############################################################################
##############################################################################

# Return the first element of a list which matches a criterion.
# -> Anonymous test subroutine operating on $_ and returning a true value for
#    matches
#    List to search
# <- The first matching element, or undef
sub elem(&@)
{
  my $test= shift @_;
  for (@_) {
    return $_ if &$test;
  }
  return undef;
}


# Reverse a hash to a hash of arrays.  The values of the result hash are
# references to arrays containing all keys of the original hash having the same
# value (which becomes the corresponding key in the new hash).
# -> Original hash
# <- Resulting hash of arrays
sub revhash(\%)
{
  my ($orighash)= @_;
  my %result;

  for my $key (keys %$orighash) {
      push @{$result{$$orighash{$key}}}, $key;
  }
  return ( %result );
}


# Remove duplicates from a sorted array (or successive duplicates from any
# array).  The != operator is used for comparisons, suitable for numbers and
# references.
# -> List of values or references
# <- List of unique values or references
sub uniq
{
    return @_ if @_ < 2;
    my $prev= shift;
    my @uniques= ( $prev );
    for (@_) {
        next unless $_ != $prev;
        push @uniques, $_;
        $prev= $_;
    }
    return @uniques;
}


# An auxiliary function for obtaining the canonical form of a file name.
# Required to work around Cwd::abs_path()'s intolerance towards non-existing
# files and directories.
# -> File name including path
# <- File name made canonical with Cwd::abs_path() if possible, with
#    File::Spec->canonpath() otherwise.  The latter does not consult the file
#    system and therefore cannot resolve symbolic links.
sub mycanonpath
{
  my ($file)= @_;
  my $canonfile= eval { Cwd::abs_path($file) };
  return $canonfile unless $@ || !defined($canonfile);
  return File::Spec->canonpath($file);
}


# Transforms a file name which is relative to a different directory to one
# which is relative to the current working directory.  Absolute file names and
# URLs are left unchanged.
# -> File name
#    Directory path
# <- Transformed file name
sub fixpath
{
  my ($file, $dir)= @_;

  if( $file =~ /^\w+:\/\//i || File::Spec->file_name_is_absolute($file) ) {
    return $file;
  }
  else {
    $file= File::Spec->rel2abs($file, $dir);
    $file= mycanonpath($file);          # get rid of interior /../ if possible
    $file= File::Spec->abs2rel($file, $config{cwd});
    $file ||= ".";              # some versions of abs2rel return "" for "."
    return $file;
  }
}


my $pathsep;

BEGIN {
  $pathsep= File::Spec->catdir("","") || "/";
}


# Return a hyperlink to a source file from a top-level HTML file.
# -> File name (absolute or relative to current directory)
# <- Hyperlink to file relative to output directory
sub sourcelink
{
  my ($filename)= @_;

  # We convert non-"/" path separators to slashes.  This will work for Windoze,
  # for other systems we would probably have to use URI::file.
  if( File::Spec->file_name_is_absolute($filename) ) {
    $filename =~ s!\Q$pathsep\E!/!g unless $pathsep eq "/";
    return "file://$filename";
  }
  else {
    $filename= File::Spec->abs2rel($filename, $config{absoutputdir});
    $filename =~ s!\Q$pathsep\E!/!g unless $pathsep eq "/";
    return $filename;
  }
}


# Return the file extension of a file name (i.e. the portion after the last
# ".").
# -> File name
# <- Extension (without the ".")
sub fileext
{
  my ($fname)= @_;

  (undef, undef, $fname)= File::Spec->splitpath($fname);
  $fname =~ /\.([^\.]*)$/;
  return $1 || "";
}


# Find common prefix of several file names.  The prefix is a partial path, i.e.
# always ends with a path separator.
# -> List of file names
# <- Path prefix
sub commonprepath
{
  my $pre= shift;

  for (@_) {
    my $cmp= $pre ^ substr($_, 0, length($pre));
    $cmp =~ /^(\x00*)/;
    $pre= substr($pre, 0, length($1));
  }
  $pre =~ s/[^\Q$pathsep\E]+$//;
  return $pre;
}


# Create a tree of hashes with path fragments as keys and arbitrary strings
# as leaves.
# -> Reference to hash mapping full paths to strings
# <- Reference to hash tree
sub pathtree
{
  my $flatlist= shift;

  my @paths= sort { $a cmp $b } keys %$flatlist;
  my @splitpaths;
  for (@paths) {
    my @split= File::Spec->splitpath($_);
    # replace directory part by list of directories
    splice @split, 1, 1, File::Spec->splitdir($split[1]);
    # remove empty directory component at the end arising from trailing slash
    splice @split, -2, 1 unless length($split[-2]);
    # remove volume if not present (assuming volume is always there or always
    # not there)
    shift @split unless length $split[0];
    push @splitpaths, [ @split, $$flatlist{$_} ];
  }
  return pathary2tree(@splitpaths);
}


# Convert an array of arrays (the last element of which is an arbitrary string
# and all other elements of which are path components) into a hash tree with
# the arbitrary strings as leaves.  Unique path components are concatenated
# with those of the previous level.  Complete paths must be unique.
# -> List of references to arrays in the format above
# <- Reference to root of hash tree with path fragments as keys
sub pathary2tree
{
  my $prefix= $_[0][0];
  my %subtrees= ( $prefix => [ [ @{$_[0]}[1..$#{$_[0]}] ] ] );
  shift;
  while( 13 ) {
    while( @_ && $_[0][0] eq $prefix ) {
      my $sibling= shift;
      push @{$subtrees{$prefix}}, [ @$sibling[1..$#$sibling] ];
    }
    last unless @_;
    $prefix= $_[0][0];
    $subtrees{$prefix}= [ [ @{$_[0]}[1..$#{$_[0]}] ] ];
    shift;
  }
  my %concatsubs;
  for my $pre (keys %subtrees) {
    my $sub= $subtrees{$pre};
    if( @{$$sub[0]} == 1 ) { # $pre is file name, $$sub[0][0] is payload string
      $subtrees{$pre}= $$sub[0][0];
    }
    else {
      my $newsub= pathary2tree(@$sub);
      if( keys(%$newsub) == 1 ) {
        my ($thekey)= keys %$newsub;
        $concatsubs{File::Spec->catdir($pre, $thekey)}= $$newsub{$thekey};
            # assumes path concatenation is the same for directories and
            # directory + file
        delete $subtrees{$pre};
      }
      else {
        $subtrees{$pre}= $newsub;
      }
    }
  }
  @subtrees{keys %concatsubs} = values %concatsubs;
  return \%subtrees;
}


# Quote glob characters in a string by prepending '\x01'.
# -> String
# <- Quoted string
sub quoteglob
{
  my ($str)= @_;

  $str =~ s/([\[\]\?\*\{\}\~])/\x01$1/g;
  return $str;
}


# Split a string containing file names at white space, allowing quoting by
# single and double quotes.  Single quotes quote glob characters *?[]{} and ~;
# double quotes do not.
# -> String
#    Optional reference to scalar that will be set to the unmatched quote
#    character if one is encountered, undef otherwise
# <- List of substrings

my $QUOTWORD= qr/[^'"\s]*(?:(?:"[^"]*"|'[^']*')[^'"\s]*)*/;

sub splitfilenames
{
  my ($str, $unmatched)= @_;

  $str =~ s/^\s+//;
  my @words= ( $str =~ /\G($QUOTWORD)(?:\s+|$)/ogc );
  ($$unmatched)= $str =~ /\G.*?(["'])/ if $unmatched;
  pop @words unless length $words[-1];
  map { s/"([^"]*)"|'([^']*)'/defined($1)? $1 : quoteglob($2)/eg; } @words;
  return @words;
}


# Convert a glob pattern given with --exclude to a regex fragment for use on
# file paths.
# -> Glob pattern frmo --exclude
# <- Regex fragment for testing file paths
sub glob2re
{
  my $gl= shift;
  $gl =~ s/^(?:\Q$pathsep\E)+//;
  $gl =~ s/(?<!\\)(?=[]\*\?\[\{\}])/\x01/g;
  $gl= quotemeta($gl);
  $gl =~ s/(?:\\\x01\\\*)+/[^\Q$pathsep\E]*/go;
  $gl =~ s/\\\x01\\\?/[^\Q$pathsep\E]/go;
  $gl =~ s/\\\x01\\([][])/$1/g;
  1 while $gl =~ s/(\\\x01\\\{[^{},])\\,/$1|/g;
  $gl =~ s/\\\x01\\\{/(/g;
  $gl =~ s/\\\x01\\\}/)/g;
  return "$gl";
}


# Compare two code snippets.  White space is compressed to one space character
# between words and completely removed elsewhere.  The contents of strings are
# not treated specially, so if two snippets differ only by the amount of white
# space in strings, they will erroneously compare as equal.
# -> Strings to compare
# <- 0 if equivalent
sub codecmp
{
  my ($a, $b)= @_;

  return 0 if $a eq $b;
  $a =~ s/\s+/ /g;
  $a =~ s/^ //;
  $a =~ s/ $//;
  $a =~ s/ (?=\W)//g;
  $a =~ s/(?<=\W) //g;
  $b =~ s/\s+/ /g;
  $b =~ s/^ //;
  $b =~ s/ $//;
  $b =~ s/ (?=\W)//g;
  $b =~ s/(?<=\W) //g;
  return $a cmp $b;
}


# Copy a file.  Uses File::Copy->copy() but prevents croaking.
# -> Source file name
#    Destination file name or target directory
# <- 1 if successful, 0 on error
sub copyfile
{
  my ($from, $to)= @_;
  my $status;

  $status= eval { File::Copy::copy($from, $to); };
  return !$status || $@? 0 : 1;
}


# Read an HTML file and cut out the HTML within <body> tags.
# -> File name
# <- HTML text
sub gethtml
{
  my ($fname)= @_;
  my $content;

  return "" unless $fname;
  if( !open(IN, "<$fname") ) {
    print STDERR "Error: Could not open `$fname' for reading.  Ignoring --homehtml and generating empty home page.\n";
    return "";
  }
  {
    local $/;
    $content= <IN>;
  }
  close IN;
  $content =~ s/^.*<\s*body\b[^>]*>//is;
  $content =~ s/<\/\s*body\b[^>]*>.*$//is;
  return $content;
}


# Print file error messages at most three times, and print a note when
# suppressing further error messages.
# -> Error message
#    Reference to scalar for counting errors (incremented up to 4)
sub limitfileerr
{
  my ($msg, $errcount)= @_;
  my $limit= $config{quiet}? 1 : 3;

  return if $$errcount > $limit;
  if( $$errcount < $limit ) {
    print STDERR "$msg - $!\n";
  }
  else {
    print STDERR "(additional errors suppressed)\n";
  }
  ++$$errcount;
}


# Concatenate a word list, separated by a comma and a space, but with the last
# two words separated by a given string instead.
# -> String between last two words, including surrounding spaces if applicable
#    List of words
sub cswordlist
{
  my ($conj, @words)= @_;

  if( @words > 1 ) {
    return join(", ", @words[0..$#words-1]) . $conj . $words[-1];
  }
  elsif( @words ) {
    return $words[0];
  }
}


# Another auxiliary function which exits the program with return value 1 after
# optionally printing a message to STDERR.  Akin to die but without the silly
# line number output which users don't have any use for.
# -> Error message
sub croak
{
  my ($msg)= @_;

  print STDERR "$msg\n" if defined($msg) && length($msg);
  exit 1;
}


my %digitbits= ( "1" => 1, "2" => 1, "3" => 2, "4" => 1, "5" => 2, "6" => 2,
        "7" => 3, "8" => 1, "9" => 2, "a" => 2, "b" => 3, "c" => 2, "d" => 3,
        "e" => 3, "f" => 4 );

# Count the 1 bits in an integer represented as a hexadecimal string.
# -> Hex string
# <- Bit count
sub counthexbits
{
  my $str= shift;
  my $count= 0;

  for (split "", lc($str)) {
    $count += $digitbits{$_} || 0;
  }
  return $count;
}


# Send data structure over a socket after serialising it using Storable.  Large
# data are split into multiple transmissions to be suitable for datagram
# sockets.
# -> Socket handle reference
#    Hash or array references (no non-ref scalars, since Storable does not
#    work on those)
# <- 1 OK, 0 error
sub senddata
{
  return senddata_retry(@_) if $^O =~ /^(darwin|.*bsd)$/;

  my ($sock, @refs)= @_;
  my $msg;
  my $sent;

  for my $dataref (@refs) {
    $msg= Storable::freeze($dataref);
    while( length($msg) >= $config{maxmsgsize} ) {
      $sent= send($sock, substr($msg, 0, $config{maxmsgsize}), 0);
      return 0 unless defined($sent) && $sent == $config{maxmsgsize};
      substr($msg, 0, $config{maxmsgsize})= "";
    }
    $sent= send($sock, $msg, 0);
    return 0 unless defined($sent) && $sent == length($msg);
  }
  return 1;
}


# Implementation of senddata() for the BSDs and Max OS X.  These systems seem
# to return with an error when an internal queue is full rather than blocking.
# So we implement retries explicitly.
# -> Socket handle reference
#    Hash or array references (no non-ref scalars, since Storable does not
#    work on those)
# <- 1 OK, 0 error
my ($senddata_retrydelay, $senddata_retries) = (0.001, 100);
sub senddata_retry
{
  my ($sock, @refs)= @_;
  my $msg;
  my $sent;

  for my $dataref (@refs) {
    $msg= Storable::freeze($dataref);
    while( length($msg) >= $config{maxmsgsize} ) {
      $sent= send($sock, substr($msg, 0, $config{maxmsgsize}), 0);
      my $tries= $senddata_retries;
      while( !defined($sent) && $tries ) {
        select(undef, undef, undef, $senddata_retrydelay);
        $sent= send($sock, substr($msg, 0, $config{maxmsgsize}), 0);
        --$tries;
      }
      return 0 unless defined($sent) && $sent == $config{maxmsgsize};
      substr($msg, 0, $config{maxmsgsize})= "";
    }
    $sent= send($sock, $msg, 0);
    my $tries= $senddata_retries;
    while( !defined($sent) && $tries ) {
      select(undef, undef, undef, $senddata_retrydelay);
      $sent= send($sock, $msg, 0);
      --$tries;
    }
    return 0 unless defined($sent) && $sent == length($msg);
  }
  return 1;
}


# Receive data from a (datagram) socket, reassemble large data split by
# senddata and deserialise it using Storable::thaw().
# -> Socket handle reference
# <- Reference to deserialised data structure or undef if an error occurred or
#    if the socket has been set to non-blocking operation and no data was
#    available
sub recvdata
{
  my ($sock)= @_;
  my ($data, $newdata, $status);

  $status= recv($sock, $newdata, $config{maxmsgsize}, 0);
  return undef unless defined($status);
  $data= $newdata;
  while( length($newdata) == $config{maxmsgsize} ) {
    $status= recv($sock, $newdata, $config{maxmsgsize}, 0);
    return undef unless defined($status);
    $data .= $newdata;
  }
  return Storable::thaw($data);
}


{
my $starttime;

sub benchmark
{
  my ($msg, $lines)= @_;

  if( !$msg ) {
    $starttime= [ Time::HiRes::gettimeofday() ];
  }
  else {
    my $secs= Time::HiRes::tv_interval($starttime);
    my $perline= "";
    $perline= ", " . sprintf("%g", $secs / $lines) . " s per line"
        if $lines;
    $secs= sprintf "%g", $secs;
    print "Took $secs s $msg$perline.\n";
  }
}

}


#sectioncmdline###############################################################
##############################################################################
####                    Command line parsing functions
##############################################################################
##############################################################################

# Format of option table: Each option array contains the short option letter,
# the long option name, the option type and the %config hash key (or a
# subroutine reference for some).  The option types are: "*" string, "#"
# decimal integer, "w" word (=~ /^\w*$/), "/" pathname, "?" boolean, "<" config
# file name, "@" array of strings, "&" call subroutine.
my @options= (
[ "h", "help", "&", \&printhelp ],
[ "", "version", "&", \&printversion ],
[ "o", "outputdir", "/", "outputdir" ],
[ "f", "configfile", "<", 0 ],
[ "p", "prefix", "w", "prefix" ],
[ "l", "library", "w", "libname" ],
[ "", "tabsize", "#", "tabsize" ],
[ "r", "recursive", "?", "recursive" ],
[ "", "exclude", "*", "exclude" ],
[ "t", "topmodule", "@", "topmodules" ],
[ "", "psl", "?", "psl" ],
[ "", "parsedebug", "?", "parsedebug" ],
[ "", "benchmark", "?", "benchmark" ],
[ "q", "quiet", "?", "quiet" ],
[ "c", "cellpadding", "#", "cellpadding" ],
[ "i", "indentation", "#", "indentation" ],
[ "j", "jobs", "#", "jobs" ],
[ "m", "compatibility", "?", "compat" ],
[ "", "stylesheet", "/", "stylesheet" ],
[ "", "leftlogo", "/", "leftlogo" ],
[ "", "rightlogo", "/", "rightlogo" ],
[ "", "title", "*", "title" ],
[ "", "footer", "*", "footer" ],
[ "", "toplink", "|", "toplink" ],
[ "", "homehtml", "/", "homehtml" ],
[ "", "custom", "|", "custom" ],
[ "", "javasyntax", "?", "javasyntax" ],
[ "", "sourcelinks", "?", "sourcelinks" ],
[ "", "packagesummary", [ qw(always never auto section) ], "packagesummary" ],
[ "", "latex", "?", "texout" ],
[ "", "eyecandy", "?", "eyecandy" ],
);

# Options that apply only to files following them and may be present multiple
# times:
my @fileopts= qw(libname tabsize);


# Parse command line argument arrray.
# -> Reference to array of command-line arguments.
# <- Reference to array of source files.  Options values are written to %config.
sub parseargv
{
  my ($argv)= @_;
  my $files= [];
  my $status;

  # Don't use File::Spec->curdir(), it takes 1 second (!)
  $config{cwd}= Cwd->cwd();
  while( @$argv ) {
    $status= parseopt($argv, $files);
    next if $status;
    if( $$argv[0] eq "-" ) {
      shift @$argv;
      while( <STDIN> ) {
        my @inargs= split;
        while( @inargs && parseopt(\@inargs, $files) ) {}
      }
    }
    else {
      print STDERR "The option $$argv[0] requires an argument.  Aborting.\n";
      croak;
    }
  }
  if( $config{missingfiles} && $config{quiet} ) {
    print STDERR "Warning: Some input files were not found, or glob patterns yielded no files.  Run without --quiet for more details.\n";
  }
  elsif( $#$files == 0 && $files->[0]{name} =~ /\.vhdocl$/i ) {
    my $cfile= $files->[0]{name};
    $files= [];
    parsecfgfile($cfile, $files);
  }
  parsetopmods();
  return $files;
}


# Parse one option or input file from an array.  The parsed option (and
# possibly its argument) is removed from the array.  A parsed option is entered
# into %config, an input file name generates a new entry in the file list.
# Hashes representing files have the entries "type" (= "file"), "name" (the
# file name) and "libname" (the library name).
# -> Reference to array containing options, their arguments and input files
#    Reference to array containing references to hashes representing input
#    files
# <- 1 if something could be parsed, 0 if an argument is missing or the option
#    was "-" (read from stdin).
sub parseopt
{
  my ($arglist, $filelist)= @_;
  my $nextarg= shift @$arglist;
  my $opt;
  my $value;

  if( $nextarg =~ /^--/ ) {
    $nextarg =~ /^--([^=]*)(?:=(.*))?$/;
    my $optname= lc($1);
    my $onoff= 1;
    $value= $2;
    croak "Unknown long option $nextarg.  Aborting."
        unless $optname =~ /^\w+$/;
    my @opts= grep($_->[1] =~ /^\Q$optname\E/i, @options);
    if( !@opts && $optname =~ s/^no(.)/$1/i ) {
      @opts= grep($_->[2] eq "?" && $_->[1] =~ /^\Q$optname\E/i, @options);
      $onoff= 0;
    }
    croak "Unknown long option $nextarg.  Aborting."
        unless @opts;
    if( @opts > 1 ) {
      print STDERR "Ambiguous long option $nextarg.  (Could be ",
                cswordlist(" or ", map("--$_->[1]", @opts)), ".)  Aborting.\n";
      croak;
    }
    if( !ref($opts[0][2]) && $opts[0][2] eq "?" ) {
      $config{$opts[0][3]}= $onoff;
      return 1;
    }
    elsif( !ref($opts[0][2]) && $opts[0][2] eq "&" ) {
      &{$opts[0][3]}();
      return 1;
    }
    $opt= $opts[0];
  }
  elsif( $nextarg =~ /^[+-]\S/ ) {
    $nextarg =~ /^([+-])(\S)(.*)$/;
    my $onoff= $1 eq "-";
    my $firstchar= $2;
    my $remainder= $3;
    my ($thisopt)= grep($_->[0] eq $firstchar, @options);
    croak "Unknown short option -$firstchar.  Aborting."
      unless $thisopt;
    if( $thisopt->[2] eq "?" || $thisopt->[2] eq "&" ) {
      if( $thisopt->[2] eq "?" ) {
        $config{$thisopt->[3]}= $onoff;
      }
      elsif( $thisopt->[2] eq "&" ) {
        &{$thisopt->[3]}();
      }
      my @optchars= split(//, $remainder);
      for my $optchar (@optchars) {
        ($thisopt)= grep($_->[0] eq $optchar, @options);
        croak "Unknown short option -$optchar.  Aborting."
          unless $thisopt;
        if( !ref($thisopt->[2]) && $thisopt->[2] eq "?" ) {
          $config{$thisopt->[3]}= $onoff;
        }
        elsif( !ref($thisopt->[2]) && $thisopt->[2] eq "&" ) {
          &{$thisopt->[3]}();
        }
        else {
          print STDERR "Cannot bundle short options with arguments (-",
                       $thisopt->[0], ").  Aborting.\n";
          croak;
        }
      }
      return 1;
    }
    elsif( $remainder =~ /^=/ ) {
      $value= substr($remainder, 1);
    }
    elsif( length($remainder) ) {
      print STDERR "Cannot bundle short options with arguments (-",
                   $thisopt->[0], ").  Aborting.\n";
      croak;
    }
    else {
      $value= undef;
    }
    # $value= $remainder if $remainder; # value without space
    $opt= $thisopt;
  }
  elsif( $nextarg eq "-" ) {
    unshift @$arglist, $nextarg;
    return 0;
  }
  elsif( -d $nextarg ) {
    my @vhdl= searchdirectory($nextarg);
    my @newfiles= map +{ "type", "file", "name", $_ }, @vhdl;
    map { @$_{@fileopts}= @config{@fileopts}; } @newfiles;
    push @$filelist, @newfiles;
    return 1;
  }
  elsif( -e $nextarg ) {
    return 1 unless defined filterfiles($nextarg);
    push @$filelist, { "type", "file", "name", $nextarg };
    @{$$filelist[-1]}{@fileopts}= @config{@fileopts};
    return 1;
  }
  else {
    my @newfiles;
    if( $nextarg !~ /\.vhdl?$/i ) {     # try file name with .vhd[l] appended
      my $globarg= quoteglob($nextarg);
      $globarg =~ tr/\x01/\\/;      # escape glob characters
      @newfiles= grep -f, File::Glob::bsd_glob("$globarg.[vV][hH][dD]{,[lL]}");
    }
    if( @newfiles != 1 ) {
      print STDERR "Warning: File argument \`$nextarg' does not exist.\n"
          unless $config{quiet};
      $config{missingfiles}= 1;
      return 1;
    }
    return 1 unless defined filterfiles($newfiles[0]);
    push @$filelist, { "type", "file", "name", $newfiles[0] };
    @{$$filelist[-1]}{@fileopts}= @config{@fileopts};
    return 1;
  }
  # Now take care of options with arguments.  Their value may already have been
  # assigned to $value if it was in the same command line argument as the
  # option.
  unless( defined($value) ) {
    $value= shift @$arglist;
    unless( defined($value) ) {
      unshift @$arglist, $nextarg;
      return 0;
    }
  }
  if( ref $opt->[2] ) {
    my @vals= grep /^\Q$value\E/i, @{$opt->[2]};
    if( !@vals ) {
      print STDERR "Unrecognised value `$value' for option ",
                  ($opt->[0]? " -$opt->[0] /": ""), " --$opt->[1]",
                  ".  Legal values are ", cswordlist(" and ", @{$opt->[2]}),
                  ".  Aborting.\n";
      croak;
    }
    elsif( @vals > 1 ) {
      print STDERR "Ambiguous value `$value' for option ",
                  ($opt->[0]? " -$opt->[0] /": ""), " --$opt->[1]",
                  ".  (Could be ", cswordlist(" or ", @vals), ".)  Aborting.\n";
      croak;
    }
    $config{$opt->[3]}= $vals[0];
  }
  elsif( $opt->[2] eq "|" ) {
    push @{$config{$opt->[1]}}, [ split(/\s*\|\s*/, $value, 2) ];
    unshift @{$config{$opt->[1]}[-1]}, undef
        unless @{$config{$opt->[1]}[-1]} == 2;
  }
  elsif( $opt->[2] eq "<" ) {
    parsecfgfile($value, $filelist);
  }
  elsif( $opt->[2] eq "@" ) {
    push @{$config{$opt->[3]}}, split /\s+/, $value;
  }
  else {
    if( $opt->[2] eq "w" ) {
      unless( $value =~ /^\w*$/ ) {
        print STDERR "The argument of", ($opt->[0]? " -$opt->[0] /": ""),
                     " --$opt->[1] may only contain letters, digits and ",
                     "the underscore.  Aborting.\n";
        croak;
      }
    }
    elsif( $opt->[2] eq "#" ) {
      unless( $value =~ /^\d+$/ ) {
        print STDERR "The argument of", ($opt->[0]? " -$opt->[0] /": ""),
                     " --$opt->[1] must be numerical.  Aborting.\n";
        croak;
      }
    }
    $config{$opt->[3]}= $value;
  }
  return 1;
}


# Parse options and input files from a config file
# <- Configuration file name
#    Reference to array containing references to hashes representing input
#    files
#    (optional) Reference to array of config file names from which this one was
#    included, to avoid include loops
sub parsecfgfile
{
  my ($fname, $filelist, $track)= @_;
  my ($vol, $dir)= File::Spec->splitpath($fname);
  my $basedir= File::Spec->catpath($vol, $dir, "") || ".";
  $basedir= mycanonpath($basedir);
  my $line;

  $track ||= [];
  open(CFG, "<$fname") or croak "Could not open config file $fname - $!";
  while( <CFG> )
  {
    s/\s*(?:#[^#]*)?$//;
    next unless $_;
    $line .= " " . $_;
    next if $line =~ s/\s*\\$//;
    $line =~ /^\s*([^\s=]+)\s*=?\s*([^=]*?)\s*$/
        or croak "Cannot understand line $. in $fname: $line";
    my $optname= $1;
    my $value= $2;
    my $onoff= 1;
    croak "Unknown option $optname in $fname, line $..  Aborting."
        unless $optname =~ /^\w+$/;
    $line= "";
    $value =~ s/^\s+//;
    $value =~ s/\s+$//;
    if( lc($optname) eq "input" ) {
      my $unmatched;
      my @fileargs= splitfilenames $value, \$unmatched;
      croak "Unmatched " . ($unmatched eq '"'? "double" : "single") .
            " quote in $fname, line $..  (Verbatim quote characters have to be quoted now, see the manual.)  Aborting."
          if $unmatched;
      for my $farg (@fileargs) {
        $farg= fixpath($farg, $basedir);
        my $globarg= $farg;
        $globarg =~ s/\\/\\\\/g;  # escape backslashes (windoze)
        $globarg =~ tr/\x01/\\/;  # escape glob characters (see quoteglob())
        my @files;
        if( $farg =~ /(?<!\x01)(?:\?|\*|\[|\]|\{|\}|\~)/ ) {
          @files= grep -f, File::Glob::bsd_glob($globarg);
          if( ! @files ) {
            print STDERR "Warning: No matches for glob pattern `$globarg', in $fname on or before line $..\n"
                unless $config{quiet};
            $config{missingfiles}= 1;
          }
          @files= map fixpath($_), @files;
        }
        else {
          $farg =~ tr/\x01//d;      # remove glob char escape markers
          if( -e $farg ) {
            @files= ( $farg );
          }
          else {      # glob for .vhd(l) files if verbatim file name not found
            @files= grep -f, File::Glob::bsd_glob("$globarg.[vV][hH][dD]{,[lL]}")
                unless $farg =~ /\.vhdl?$/i;
            if( !@files ) {
              print STDERR "Warning: Input file \`$farg' does not exist, in $fname on or before line $..\n"
                  unless $config{quiet};
              $config{missingfiles}= 1;
            }
          }
        }
        for my $file (@files) {
          if( -d $file ) {
            my @dirfiles= searchdirectory($file);
            my @newfiles= map +{ "type", "file", "name", $_ }, @dirfiles;
            map { @$_{@fileopts}= @config{@fileopts}; } @newfiles;
            push @$filelist, @newfiles;
          }
          elsif( defined filterfiles($file) ) {
            push @$filelist, { "type", "file", "name", $file };
            @{$$filelist[-1]}{@fileopts}= @config{@fileopts};
          }
        }
      }
      next;
    }
    my @opts= grep($_->[1] =~ /^\Q$optname\E/i, @options);
    if( !@opts && $optname =~ s/^no(.)/$1/i ) {
      @opts= grep($_->[2] eq "?" && $_->[1] =~ /^\Q$optname\E/i, @options);
      $onoff= 0;
    }
    croak "Unknown option $optname in $fname, line $..  Aborting."
        unless @opts;
    if( @opts > 1 ) {
      print STDERR "Ambiguous option $optname in $fname, line $..  (Could be ",
                   cswordlist(" or ", map($_->[1], @opts)), ".)  Aborting.\n";
      croak;
    }
    if( ref $opts[0][2] ) {
      my @vals= grep /^\Q$value\E/i, @{$opts[0][2]};
      if( !@vals ) {
        print STDERR "Unrecognised value `$value' for option $optname in ",
                    "$fname, line $..  Legal values are ",
                    cswordlist(" and ", @{$opts[0][2]}), ".  Aborting.\n";
        croak;
      }
      elsif( @vals > 1 ) {
        print STDERR "Ambiguous value `$value' for option $optname in ",
                    "$fname, line $..  (Could be ",
                    cswordlist(" or ", @vals), ".)  Aborting.\n";
        croak;
      }
      $config{$opts[0][3]}= $vals[0];
    }
    elsif( $opts[0][2] eq "&" ) {
      print STDERR "Ignoring option $optname in $fname.\n";
    }
    elsif( $opts[0][2] eq "<" ) {     # configfile option
      push @$track, $fname;
      $value= fixpath($value, $basedir);
      if( grep($_ eq $value, @$track) ) {
        print STDERR "Ignoring recursive include in $fname, line $..\n";
      }
      else {
        parsecfgfile($value, $filelist, $track);
      }
      pop @$track;
    }
    elsif( $opts[0][2] eq "?" ) {
      if( $value ) {
        if( !$onoff ) {
          croak "Cannot give value for negated option $optname in $fname, line $..  Aborting.";
        }
        elsif( $value =~ /^(?:1|yes|on|true)$/i ) {
          $config{$opts[0][3]}= 1;
        }
        elsif( $value =~ /^(?:0|no|off|false)$/i ) {
          $config{$opts[0][3]}= 0;
        }
        else {
          croak "Illegal value for boolean option $optname in $fname, line $..  Aborting.";
        }
      }
      else {
        $config{$opts[0][3]}= $onoff;
      }
    }
    elsif( $opts[0][2] eq "|" ) {
      push @{$config{$opts[0][1]}}, [ split(/\s*\|\s*/, $value, 2) ];
      unshift @{$config{$opts[0][1]}[-1]}, undef
          unless @{$config{$opts[0][1]}[-1]} == 2;
      $config{$opts[0][1]}[-1][1]= fixpath($config{$opts[0][1]}[-1][1], $basedir);
    }
    elsif( $opts[0][2] eq "@" ) {
      push @{$config{$opts[0][3]}}, split /\s+/, $value;
    }
    else {
      if( $opts[0][2] eq "w" ) {
        unless( $value =~ /^\w*$/ ) {
          print STDERR "The argument of option $optname may only contain ",
                       "letters, digits and the underscore in $fname, line ",
                       "$..  Aborting.\n";
          croak;
        }
      }
      elsif( $opts[0][2] eq "#" ) {
        unless( $value =~ /^\d+$/ ) {
          print STDERR "The argument of option $optname must be numerical ",
                       "in $fname, line $..  Aborting.\n";
          croak;
        }
      }
      elsif( $opts[0][2] eq "/" ) {
        $value= fixpath($value, $basedir);
      }
      $config{$opts[0][3]}= $value;
    }
  }
  close CFG;
}


# Filter a list of file paths according to the --exclude option currently in
# effect.  A regex is created out of the option value on demand and a reference
# to it stored in place of the option value.  If called in scalar context and
# the single argument is filtered out, a warning message is output.
# -> List of file paths
# <- List of filtered file paths
sub filterfiles
{
  my $excludes= $config{exclude};
  return @_ if !@_ || !defined($excludes) || !length($excludes);
  if( !ref($excludes) ) {
    my $exclre= "(?i:(?:^|\Q$pathsep\E)(?:" . join("|", map glob2re($_), split /[,\s]+/, $excludes) . ")\$)";
    eval { "foo" =~ /$exclre/; };
    if( $@ ) {
      croak "Error trying regex derived from --exclude glob pattern \`$excludes':\n$@\n";
    }
    $excludes= $config{exclude}= \$exclre;
  }
  if( ! wantarray ) {
    return $_[0] unless $_[0] =~ /$$excludes/;
    print STDERR "Warning: Explicit file name $_[0] filtered by --exclude.\n"
        unless $config{quiet};
    return;
  }
  return ( grep ! /$$excludes/, @_ );
}


# Search a directory for VHDL files.  The search is recursive if the recursive
# option is on (but symlinks are not followed).
# -> Path to directory
# <- List of VHDL files
sub searchdirectory
{
  my ($dir)= @_;
  my @files;

  if( $config{recursive} ) {
    File::Find::find( sub { push @files, $File::Find::name
                                if -f && /\.vhdl?$/i; },    $dir);
  }
  else {
    $dir= quoteglob($dir);
    $dir =~ tr/\x01/\\/;
    my $pattern= File::Spec->catfile($dir, "*.[vV][hH][dD]{,[lL]}");
    @files= grep -f, File::Glob::bsd_glob($pattern);
  }
  return filterfiles(@files);
}


# Print version
sub printversion
{
  print "This is VHDocL version $version.\n";
  exit;
}


# Print brief usage message
sub printhelp
{
  print <<EOF;
VHDocL is a VHDL documentation and structure examination utility.
Usage:
    vhdocl [options] input files... [ [-l <library>] input files...]
VHDocL generates HTML documentation for hardware designs written in VHDL.  It
outputs an HTML page for each entity, architecture, configuration and package
and a list of entities and of packages and the design's instantiation
hierarchy.
The most important command-line options are:
    -o, --outputdir     Output directory (default: "doc")
    -l, --library       Library to which the following source files belong
    -r, --recursive     Process following source directories recursively
    -q, --quiet         Reduce verbosity of progress reporting
    --stylesheet=stylefile.css  CSS style file to reference
Long options may be abbreviated.

VHDocL's manual is contained in the file vhdocl.pod in its distribution package
in POD format and can be extracted using pod2man, pod2html and similar programs
which come with Perl.  For instance, a manual page can be generated and viewed
as follows:
  pod2man vhdocl.pod > vhdocl.1
  man ./vhdocl.1
It can also be read online at http://www.volkerschatz.com/hardware/vhdocl.html.

In order to install VHDocL on your system, obtain the distribution package from
http://www.volkerschatz.com/hardware/vhdocl.html and execute the perl script
install-vhdocl.pl.  Run it with the option -h first to view available options.
You will need administrator privileges to install vhdocl for all users.  On
non-UNIX systems, a target directory has to be provided.
EOF
  exit;
}


#sectionvhdl##################################################################
##############################################################################
####                    VHDL parsing functions
##############################################################################
##############################################################################

my $VID;    # <var> tag belonging to VHDL code and identifier CSS classes;
            # initialised in the output section (sectionoutput)

# Parse documentation (--*) comment.  Escape HTML's reserved characters but
# leave some tags untouched which are allowed in descriptions.
# -> String containing documentation with --* already removed
#    Error file handle (IO reference for error messages)
# <- Reference to hash containing extracted documentation items
sub parsedoccom
{
  my %doc;
  my ($dcom, $err)= @_;
  my $tags= qr/b|i|tt|u|big|small|sub|sup|em|strong|ul|ol|li|br|center|
                pre|table|tr|td|th|(?:code|var|a|span|img)(?:\s+[^>]+)?/ix;
  my @tags;
  my $svnkeys= qr/(?:LastChanged)?(?:Date|Revision)|Rev|Id|Author|(?:Head)?URL/;
  my $insidepretag;

  $dcom= doxconvert($dcom) if $dcom =~ /\x03/;
  $dcom =~ s/(<\/?$tags>)/push(@tags, $1), "\x01"/goe;
  $dcom =~ s/&(?!\w+;|#\d+;|#x[\da-f]+;)/&amp;/gi;
  $dcom =~ s/</&lt;/g;
  $dcom =~ s/>/&gt;/g;
  $dcom =~ s/"/&quot;/g;
  $dcom =~ s/\x01/shift @tags/ge;
  my @doclines= split /\s+(?=\@)|\n[ \t\r]*\n/, $dcom;
  chomp(@doclines);
  # Remove supported Subversion keywords:
  map { $_ =~ s/\$$svnkeys:\s*(.*?)\s*\$/$1/go; } @doclines;
  for my $line ( @doclines )
  {
    next if $line =~ /^$/;
    if( $line =~ /^\@/ ) {
      if( $line =~ /^\@(brief|date|version|id|return)\b\s*(.*)$/is ) {
        $doc{$1}= $2 if length($2);
      }
      elsif( $line =~ /^\@(frominstance|fromwrapper)\s*(\w(?:.*\w)?)?\s*$/is ) {
        $doc{$1}= lc($2 || "");
        print $err "\@$1 can have only a single module as an argument on or before line $..\n"
            if $doc{$1} =~ s/\s.*$//;
      }
      elsif( $line =~ /^\@short\b\s*(.*)$/is ) {
        $doc{brief}= $1 if length($1);
      }
      elsif( $line =~ /^\@(param|author)\b\s*(.*)$/is ) {
        push @{$doc{$1}}, $2 if length($2);
      }
      elsif( $line =~ /^\@example\b\s*(.*\S)\s*$/is ) {
        push @{$doc{example}}, map examplefilehtml($_, $err), split(/\s*,\s*/, $1);
      }
      elsif( $line =~ /^\@see\b\s*(.*\S)\s*$/is ) {
        push @{$doc{see}}, map( [ $_ ], split(/\s*,\s*/, $1));
      }
      elsif( $line =~ /^\@(deprecated|internal|simulation|synthesis|testbench)\b/is ) {
        $doc{$1}= 1;
      }
      elsif( $line =~ /^\@li\b/is ) {
        # This used to be for vhdldoc compatibility only, but doxygen also uses
        # it, so we omit the qualification with $config{compat} now.
        push @{$doc{description}}, $line;
      }
      elsif( $config{compat} && $line =~ /^\@(generic|port)\b(?:\s+(\S+)\s+(.*))?$/is ) {
        $doc{$1}{$2}= $3 if $2 && length($3);
      }
      elsif( !$config{quiet} && $line =~ /^(\@\w+)\b/ ) {
        print $err "Unknown markup code $1 on or before line $..\n";
      }
    }
    else {
      markcodetag($line);
      $line =~ s/<var>/$VID/ig;
      if( $insidepretag ) {
        $doc{description}[-1] .= "\n\n" . $line;
      }
      else {
        push @{$doc{description}}, $line;
      }
      $insidepretag= $doc{description}[-1] =~ /^.*<(\/?)pre>/is && ! $1;
    }
  }
  $doc{author}= join(", ", @{$doc{author}}) if $doc{author};
  if( exists($doc{frominstance}) && exists($doc{fromwrapper}) ) {
    print $err "\@frominstance and \@fromwrapper cannot be used for the same port/generic, on or before line $..\n";
    delete $doc{frominstance};
    delete $doc{fromwrapper};
  }
  return \%doc;
}


my %doxwordstyles= ( c => "tt", p => "tt", e => "em", em => "em", b => "b" );
my $doxwordstylere= "(?i:" . join("|", keys %doxwordstyles) . ")";
my $doxunsuppre= qr/\@(?!(?:$doxwordstylere|param|return|brief|short|author
                  |example|date|version|li|deprecated|internal|see)\b)\w+/iox;

# Preprocess documentation comment text that may contain both VHDocL and
# doxygen markup.  Doxygen comments are expected to be framed by "\x03" and
# "\x04" from preprocessline().  Backslashes indicating markup are converted to
# "@" characters.  The most common doxygen markup codes are converted to their
# VHDocL equivalent (where not identical) or to HTML (for font style markup).
# -> Documentation comment string
# <- Converted documentation comment string
sub doxconvert
{
  my ($dcom)= @_;

  $dcom =~ s/\x04\x03//g;
  my @blocks= split /(?=\x03)|(?<=\x04)/, $dcom;
  for (@blocks) {
    next unless s/^\x03//;
    s/\x04$//;
    my @vblocks;
    while( s/[\\\@]verbatim\b(.*?)[\\\@]endverbatim\b/\x05/i ) {
      my $verb= $1;
      $verb =~ s/(^|\s)\@/$1&#x40;/g;    # prevent interpretation by parsedoccom()
      push @vblocks, "<pre>$verb</pre>";
    }
    s/\\\b/\@/g;
    s/[@\\]\@/&#x40;/g;
    s/[@\\]([\\&\$#<>%".:\|])/$1/g;
    s/(\@(?:return|author))s\b/$1/ig;
    s/\@result\b/\@return/ig;
    s/\@code\b/<code>/ig;
    s/\@endcode\b/<\/code>/ig;
    s/\@n\b/<br>/ig;
    s/\@($doxwordstylere)\b\s+([-+.=!:^~'`$\/\w]+)/"<$doxwordstyles{lc $1}>$2<\/$doxwordstyles{lc $1}>"/gieo;
    s/\@private\b/\@internal/ig;
    s/\@arg\b/\@li/ig;
    s/\@sa\b/\@see/ig;
    s/$doxunsuppre//go;     # Discard unsupported doxygen codes
    s/\x05/shift @vblocks/eg;
  }
  return join("", @blocks);
}


{
my %filerefcache;

# Return HTML text of an @example file reference, if possible with hyperlink to
# the source file.
# -> File name from @example markup code
# <- HTML text of file reference with hyperlink
sub examplefilehtml
{
  my ($fileref, $err)= @_;
  my $link;

  $fileref =~ s/^\s+//;
  $fileref =~ s/\s+$//;
  if( exists $filerefcache{$fileref} ) {
    $link= $filerefcache{$fileref};
  }
  else {
    my @files= grep $_->{name} =~ /(?:^|\Q$pathsep\E)\Q$fileref\E$/, @vhdlfiles;
    if( @files != 1 && ! $config{quiet} ) {
      if( ! @files ) {
        print $err "Example file \`$fileref' on or before line $. not found.\n";
      }
      else {
        print $err "Ambiguous example file \`$fileref' on or before line $.:  Could be ",
                    cswordlist(" or ", map $_->{name}, @files), ".\n";
      }
    }
    $link= @files ? "../sources/$files[0]{docfilename}" : undef;
    $filerefcache{$fileref}= $link;
    $fileref =~ s!^.*/!! if $link;
  }
  $fileref= html_esc($fileref);
  return $link ? "<a href=\"$link\">$fileref</a>" : $fileref;
}

}


{
my @gitfiles;

# Add a file to the list @gitfiles if the doc comment hash of one of the
# top-level design units has a version, date, id or author entry containing
# only "$git$".  References to the places to insert the git data are collected.
# -> Reference to file hash
# (<-) Updated @gitfiles array if applicable
sub markgit
{
  my ($file)= @_;
  my %places;     # ...where git metadata is wanted

  for my $unit (@{$file->{children}}) {
    next unless $unit->{doc};
    for my $key (qw(version date id author)) {
      push @{$places{$key}}, \$unit->{doc}{$key}
        if defined($unit->{doc}{$key}) && $unit->{doc}{$key} =~ /^\s*\$git\$\s*$/;
    }
  }
  return unless keys %places;
  push @gitfiles, { fname => $file->{name}, places => \%places };
}


# Efficiently find git revision, author and date of files that contain the
# markup code $git$.  Git repositories containing all files are identified by
# searching for the .git directory.  Then "git log --name-only" is run
# once for each repository and the revision of last change is determined for
# each file that belongs to it.  One "git describe" command per repository is
# used to obtain the revision.
# (->) List of files with $git$ placeholder in the documentation, generated by
#      markgit()
# (<-) Git version, date, id or author information inserted into doc hashes of
#      top-level design units where requested
sub getgitmeta
{
  return unless @gitfiles;
  my @repos;
  my $nocasefiles= File::Spec->case_tolerant();

repofilename:
  for my $file (@gitfiles) {
    my $fname= File::Spec->rel2abs($file->{fname});
    $fname= mycanonpath($fname);
    $fname= lc($fname) if $nocasefiles;
    for my $repo (@repos) {
      if( substr($fname, 0, length($repo->{dir})) eq $repo->{dir} ) {
        push @{$repo->{files}}, [ File::Spec->abs2rel($fname, $repo->{dir}), $file ];
        $file->{haverepo}= 1;
        next repofilename;
      }
    }
    my ($vol, $alldirs)= File::Spec->splitpath($fname);
    my @dirs= File::Spec->splitdir($alldirs);
    while( 13 ) {
      my $basedir= File::Spec->catfile(@dirs);
      $basedir= "" unless defined $basedir;
      my $trydir= File::Spec->catpath($vol, $basedir, ".git");
      if( -d $trydir ) {
        push @repos, { dir => File::Spec->catfile(@dirs, ""),
            files => [ [ File::Spec->abs2rel($fname, $basedir), $file ] ] };
        $file->{haverepo}= 1;
        last;
      }
      # assumes git repos are never at the top level of a drive on
      # windoze, or in the root directory on UNIX:
      last unless @dirs;
      pop @dirs;
    }
  }
  my $devnull= "";
  $devnull= " 2> /dev/null"
        unless $config{parsedebug} || $^O eq "MSWin32" || $^O eq "MacOS";
  for my $repo (@repos) {
    my $history= `git -C "$repo->{dir}" log --name-only --pretty=format:'%H [%an <%ae>] %ad'$devnull`;
    my @commits= split /\r?\n\r?\n/, $history;
    my %needdescribe;
    for my $commit (@commits) {
      my $comrev;
      for my $repofile (@{$repo->{files}}) {
        next if $repofile->[2];
        next unless ($nocasefiles ? $commit =~ /^\Q$repofile->[0]\E$/mi : $commit =~ /^\Q$repofile->[0]\E$/m);
        $repofile->[2]= $comrev, next if $comrev;
        my ($hash, $author, $date) = $commit =~ /^([\da-fA-F]{40})\s+\[(.*)\]\s+(.*)$/m;
        $repofile->[2]= $comrev= { hash => $hash, author => html_esc($author),
                                   date => html_esc($date) };
        $needdescribe{$hash}= 1
            if $repofile->[1]{places}{version};
      }
    }
    # discard and flag files not found in any commit:
    my @inrepo;
    for my $repofile (@{$repo->{files}}) {
      if( $repofile->[2] ) {
        push @inrepo, $repofile;
      }
      else {
        $repofile->[1]{haverepo}= 0;
      }
    }
    @{$repo->{files}}= @inrepo;
    if( %needdescribe ) {
      my $desccmd= "git -C \"$repo->{dir}\" describe --tags --always " . join(" ", keys %needdescribe);
      my $descriptions= `$desccmd`;
      @needdescribe{keys %needdescribe}= split /\s+/, $descriptions;
    }
    for my $repofile (@{$repo->{files}}) {
      my $places= $repofile->[1]{places};
      my $frev= $repofile->[2];
      map { $$_= $frev->{author} || "??"; } @{$places->{author}}
          if $places->{author};
      map { $$_= $frev->{date} || "??"; } @{$places->{date}}
          if $places->{date};
      map { $$_= $needdescribe{$frev->{hash}} || "??"; } @{$places->{version}}
          if $places->{version};
    }
  }
  for my $nogitf (@gitfiles) {
    next if $nogitf->{haverepo};
    map { $$_= "?? (not in git repo)"; }
        ( @{$nogitf->{places}{author} || []},
          @{$nogitf->{places}{date} || []},
          @{$nogitf->{places}{id} || []},
          @{$nogitf->{places}{version} || []} );
  }
  my @needid= grep $_->{haverepo} && $_->{places}{id}, @gitfiles;
  my $cmd= "git hash-object " . join(" ", map $_->{fname}, @needid) . $devnull;
  my @ids= split /\s+/, `$cmd`;
  for my $file (@needid) {
    map { $$_= $ids[0]; } @{$file->{places}{id}};
    shift @ids;
  }
  @gitfiles= ();
}

}


# VHDL identifier:
my $ID= qr/\b[a-zA-Z](?:\w*[a-zA-Z0-9])?\b/;
# List of identifiers for variable, signal and other declarations:
my $IDLIST= qr/$ID(?:\s*,\s*$ID)*/o;
# Operator name for overloading etc.:
my $OP= qr!"(?:\W|\?[<>=?]|\??[/<>]=|[a-zA-Z]+)"!;
# Selected name for use clause and others:
my $SID= qr/(?:$ID\s*\.\s*)*(?:$ID|$OP|'.')/o;
# Selected name list:
my $SIDLIST= qr/$SID(?:\s*,\s*$SID)*/o;
# Item in an attribute specification:
my $AI= qr/(?:$ID|$OP|'.')(?:\s*\[[^]]*\])?/o;
# List of attribute spec items:
my $AILIST= qr/$AI(?:\s*,\s*$AI)*/o;

# Quoted strings and chars (or bit vectors and bits) have to be treated
# separately:
my $QUOT= qr/"[^"\n]*"|'[^'\n]'/;
# Quoted strings or chars or single apostrophe:
my $QUOTA= qr/"[^"\n]*"|'[^'\n]'|'/;
# A non-empty expression without a semicolon:
my $STUFF= qr/(?:$QUOT|[^;"])[^;"']*(?:$QUOTA[^;"']*)*/o;
# Same, but not greedy:
my $MSTUFF= qr/(?:$QUOT|[^;"])[^;"']*?(?:$QUOTA[^;"']*?)*?/o;
# Possibly empty expression containing anything at all, with matched quotes (if
# any):
my $ANY= qr/[^"']*(?:$QUOTA[^"']*)*/o;
# Same, but not greedy:
my $MANY= qr/[^"']*?(?:$QUOTA[^"']*?)*?/o;
# Possibly nested parenthetical expression:
my $PAREN;
# This needs Perl 5.10:
eval { $PAREN= qr/(\([^()"']*(?:(?:(?-1)|$QUOTA)[^()"']*)*\))/o; };
if( $@ ) {      # fallback for older Perls
  use re 'eval';
  $PAREN= qr/\([^()"']*(?:(?:(??{$PAREN})|$QUOTA)[^()"']*)*\)/o;
  print "" if "foo" =~ /$PAREN/;
};
# Code containing no parentheses outside quotes: (currently unused)
# my $NOPAREN= qr/[^()"']*(?:$QUOTA[^()"']*)*/o;
# Entry in a comma-separated list, accounting for quotes and parentheses:
my $COMMAENTRY= qr/[^,()"']*(?:(?:$PAREN|$QUOTA)[^,()"']*)*/o;
# Same for semicolon-separated list:
my $SEMIENTRY= qr/[^;()"']*(?:(?:$PAREN|$QUOTA)[^;()"']*)*/o;

# Regexes for reading PSL statements:
# Possibly nested brace expression:
my $PSLBRACE;
# This needs Perl 5.10:
eval { $PSLBRACE= qr/(\{[^{}"']*(?:(?:(?-1)|$QUOTA)[^{}"']*)*})/o; };
if( $@ ) {      # fallback for older Perls
  use re 'eval';
  $PSLBRACE= qr/\{[^{}"']*(?:(?:(??{$PSLBRACE})|$QUOTA)[^{}"']*)*}/o;
  print "" if "foo" =~ /$PSLBRACE/;
};
# PSL statement:
my $PSL= qr/[^;{}"']*(?:(?:$PSLBRACE|$QUOTA)[^;{}"']*)*/o;


{   # Start of scope of parsing variables

my $vhandle;
my $vline;
my ($doccomment, $aheaddoccom, $keepdoccom, $keepaheaddoc);


# Read and preprocess next line from VHDL file.
# -> Flag indicating readahead
# <- 0 on end of file, otherwise 1
sub getnextline
{
  my ($ahead)= @_;

  my $new= <$vhandle>;
  return 0 unless defined($new);
  preprocessline($new, $ahead);
  return 1;
}


# Preprocess next line from VHDL file.
# -> New (single) line of VHDL code
#    Flag indicating readahead
sub preprocessline
{
  my ($new, $ahead)= @_;

  $new =~ s/^\s*//;
  $new =~ s/^($MANY)--(.*)$/$1/o;
  if( $2 && $2 =~ /^([+*!])([^+*].*|)$/ ) {
    ($ahead ? $keepaheaddoc : $keepdoccom) = $1 eq "+" unless $config{compat};
    my $doc= $1 eq "!" ? "\x03$2\n\x04" : "$2\n";
    ($ahead ? $aheaddoccom : $doccomment) .= $doc;
  }
  chomp $new;
  $vline .= " " . $new;
  # Simplifications to facilitate parsing
  $vline =~ s/\bpackage\s+body\b/packagebody/ig;
  $vline =~ s/\bprotected\s+body\b/protectedbody/ig;
  $vline =~ s/\bpostponed\s+process\b/postponedprocess/ig;
}


# Skip until first semicolon outside string literals and comments.
# (<->) $vline: Remainder of current code line
# <- 0 on end of file, otherwise 1
sub skipstatement
{
  my $comment;

  while( defined($vline) ) {
    if( $vline =~ /;/ ) {
      chomp $vline;
      $vline =~ s/^($MANY)(--.*)$/$1/o;
      $comment= $2;
      if( $vline =~ s/^(?:|$STUFF);//o ) {
        $vline .= $comment if $vline !~ /^\s*$/ && defined($comment);
        return 1;
      }
    }
    $vline= <$vhandle>;
  }
  $vline= "";
  return 0;
}


# Skip part of a statement until a given regex matches outside quotes.  If no
# match is found, the whole statement until `;' is skipped unless EOF is
# encountered.
# -> Regex indicating when to stop skipping
# <- 1 if match was found before `;' ending the statement or EOF, 0 otherwise
# (<-) $vline contains the read text
sub skipuntil
{
  my ($until)= @_;

  while( 13 ) {
    $vline =~ s/^$MSTUFF(?:$until|(;))// and return !defined($1);
    getnextline(0) or return 0;
  }
}


# Read part of a statement until a given regex matches outside quotes.
# -> Regex indicating when to stop reading
# <- 1 if match was found before `;' ending the statement, 0 otherwise, undef
#    on EOF
# (<-) $vline contains the read text
sub readuntil
{
  my ($until)= @_;

  while( 13 ) {
    $vline =~ /^(?:$MSTUFF)?(?:$until|(;))/ and return !defined($1);
    getnextline(0) or return undef;
  }
}


# Read part of a statement until a given regex matches a prefix.  Return the
# matching prefix and remove it from $vline.  Potentially dangerous: reads
# whole file increasingly slowly if regex never matches.
# -> Regex indicating when to stop reading (leading ^ need not be included)
# <- Prefix string matching the regex if match was found, undef on EOF
sub readcomplete
{
  my ($re)= @_;

  while( 13 ) {
    $vline =~ s/^($re)// and return $1;
    getnextline(0) or return undef;
  }
}


# Read generic, port or record element declaration list.  Nested parentheses
# are tracked.  Documentation comments are assigned to individual ports or
# generics.  Before returning, the doc comment variables are cleared to avoid
# reuse at the end of the main loop in parsefile().
# -> String to write to the "type" entry of the resulting hashes:  "port",
#    "generic" or "recordelement"
#    Error file handle (IO reference for error messages)
#    Reference to hash of parent declaration (used only for ports and generics
#    when @fromwrapper or @frominstance is used)
# <- List of hashes representing ports or generics
sub readportlist
{
  my ($type, $err, $parent)= @_;
  my ($entry, @list);
  my ($port, $generic, $recelem);   # flags for $type
  my $lastdoccom;

  $port= $type eq "port";
  $generic= $type eq "generic";
  $recelem= $type eq "recordelement";
  while( 13 ) {
    $entry= "";
    while( 13 ) {
      $vline =~ s/^($SEMIENTRY)//o;
      $entry .= $1;
      last if $vline =~ /^[;)]/;
      my $new= <$vhandle>;
      return unless defined($new);
      $new =~ s/^\s*//;
      $new =~ s/^($MANY)--(.*)$/$1/o;
      if( $2 && $2 =~ /^([+*])([^+*].*|)$/ ) {
        $keepdoccom= $1 eq "+" unless $config{compat};
        $doccomment .= $2 . "\n";
      }
      chomp $new;
      $vline .= " " . $new;
    }
    $vline =~ s/^([;)])//;
    my $delimiter= $1;
    if( $recelem && $entry =~ /^\s*end\b/i ) {
      $vline= $entry . $delimiter . $vline;
      last;
    }
    my @newentries;
    if( $generic && $entry =~ s/^\s*(type|function|procedure|package)\b//i ) {
      my $t= lc($1);
      if( $t eq "type" && $entry =~ /^\s*($IDLIST)/i ) {
        @newentries= map +{ "type", "generic", "subtype", "type", "name", $_ },
                          split(/\s*,\s*/, $1);
      }
      elsif( $t eq "package" && $entry =~ /^\s*($ID)\s+is\s+new\s+($SID)\s+generic\s+map\s*\(\s*($STUFF)\s*\)\s*$/io ) {
        @newentries= ( { "type", "generic", "subtype", "package", "name", $1,
                         "subname", $2, "genmapstr", $3 } );
      }
      elsif( $entry =~ s/^\s*($ID)\s*//io ) {
        my ($n, $p, $i, $r)= ($1, "", "", "");
        $p =~ s/\s+$//;
        $i= $1 if $entry =~ s/\s*\bis\s+($SID|new\s+$STUFF)\s*$//io;
        $r= $1 if $entry =~ s/\s*return\s+($MSTUFF)\s*$//io;
        $p= $1 if $entry =~ /^\s*\(\s*($ANY)\s*\)\s*$/;
        @newentries= ( { "type", "generic", "subtype", $t, "name", $n,
                         "parlist", $p, "return", $r, "value", $i } );
      }
    }
    elsif( $entry =~ /^\s*(?:(?:constant|signal)\s+)?($IDLIST)\s*:\s*
           (?:(in|out|inout|buffer|linkage)\b)?\s*($MSTUFF)(?:\s*:=\s*($STUFF))?\s*$/iox ) {
      @newentries= map +{ "type", $type, "name", $_,
                          "direction", $port ? lc($2 || "in") : "",
                          "subtype", $3, "value", $4 }, split(/\s*,\s*/, $1);
    }
    if( @newentries ) {
      $doccomment ||= $lastdoccom if $keepdoccom;
      my $doc= $doccomment? parsedoccom($doccomment, $err) : undef;
      if( $doc && $parent && (exists($doc->{frominstance}) || exists($doc->{fromwrapper})) ) {
        $parent->{exists($doc->{frominstance}) ? "docfrominst":"docfromwrapper"}= 1;
      }
      $_->{doc}= $doc for @newentries;
      push @list, @newentries;
      if( @newentries && $config{parsedebug} ) {
        print "$.: found $type";
        print "s" if $#newentries;
        print " ", join(", ", map($_->{name}, @newentries)), "\n";
      }
    }
    last if $delimiter eq ")";
    $lastdoccom= $doccomment if $keepdoccom;
    $doccomment= "";
  }
  $doccomment= "";
  $keepdoccom= 0;
  return @list;
}


# Read function or procedure declaration argument list.  Nested parentheses are
# tracked.
# -> optional: Reference to array for hashes representing arguments
# <- String containing complete argument list
sub readarglist
{
  my ($list)= @_;
  my ($arg, $allargs);

  $allargs= "";
  while( 13 ) {
    $arg= "";
    while( 13 ) {
      $vline =~ s/^($SEMIENTRY)//o;
      $arg .= $1;
      last if $vline =~ /^[;)]/;
      my $new= <$vhandle>;
      return undef unless defined($new);
      chomp $new;
      $new =~ s/^($MANY)--.*$/$1/;
      $vline .= " " . $new;
    }
    $allargs .= $arg;
    $vline =~ s/^([;)])//;
    my $delimiter= $1;
    if( $list ) {
      $arg =~ /^\s*(?:(constant|signal|variable|file)\s+)?($IDLIST)\s*:\s*
                  (?:(in|out|inout|buffer|linkage)\s+)?($MSTUFF)
                  (?:\s*:=\s*(\S.*?\S))?\s*$/iox
      and
      push @$list, (map +{ "name", $_, "type", $4, "subtype", lc($1 || ""), 
            "direction", lc($3 || ""), "value", $5 }, split(/\s*,\s*/, $2));
    }
    last if $delimiter eq ")";
    $allargs .= ";";
  }
  return $allargs;
}


# Read a comma-separated list such as a process sensitivity list or a generic
# map.  Nested parentheses are tracked.
# -> optional: Reference to array for two-element arrays representing generic
#    associations.  The first element is the generic name, the second the value.
# <- Complete comma-separated list
sub readcommalist
{
  my ($map)= @_;
  my ($entry, $allentries);

  $allentries= "";
  while( 13 ) {
    $entry= "";
    while( 13 ) {
      $vline =~ s/^($COMMAENTRY)//o;
      $entry .= $1;
      last if $vline =~ /^[,)]/;
      my $new= <$vhandle>;
      return undef unless defined($new);
      chomp $new;
      $new =~ s/^($MANY)--.*$/$1/;
      $vline .= " " . $new;
    }
    $allentries .= $entry;
    $vline =~ s/^([,)])//;
    my $delimiter= $1;
    if( $map && $entry =~ /^\s*($ID)\s*=>(.*)$/io ) {
      my ($key, $val)= ($1, $2);
      $val =~ s/^\s+//;
      $val =~ s/\s+$//;
      push @$map, [ $key, $val ];
    }
    last if $delimiter eq ")";
    $allentries .= ",";
  }
  return $allentries;
}


# Parse the sub-unit statements of a unit declaration.  The occurring sub-units
# are arranged in one or several chains of equations in their order of
# dependency.  Definitions of sub-units occurring in several chanins are not
# repeated.
# -> Reference to hash of units declaration
# (<-) The "chains" entry is assigned an array ref containing the equation
# chains.
sub readunitlist
{
  my ($unitsdecl)= @_;
  my %subunits;
  my @order;
  my %nothead;

  while( 13 ) {
    last unless readuntil( qr/;/ );
    last if $vline =~ /^\s*\bend\b/;
    last unless $vline =~ s/^\s*($ID)\s*=\s*(?:(\d(?:[^;]*[^;\s])?)\s+)?($ID)\s*;//o;
    $subunits{$1}= [ defined($2)? $2 : "", $3 ];
    push @order, $1;
    $nothead{$3}= 1;
  }
  @{$unitsdecl->{chains}}= map [ $_ ], grep !$nothead{$_}, @order;
  for my $chain (@{$unitsdecl->{chains}}) {
    my $u= $chain;
    while( $subunits{$$u[0]} ) {
      push @$u, $subunits{$$u[0]}[0], [ $subunits{$$u[0]}[1] ];
      undef $subunits{$$u[0]};
      $u= $$u[2];
    }
  }
}


# Parse VHDL file (to some extent).
# -> Reference to hash representing file.  It has to have a "type" entry and a 
#    "name" entry giving the file name.
#    Optional IO reference to use instead of STDERR (used to prevent
#    interleaving of messages from different files when parallel parsing)
# (<-) All top-level declarative items found in the file are entered into the
#    file object's "children" entry which is an array reference.  All children
#    receive entries "file" and "filename" which contain a reference to the
#    file hash and the file name, respectively.
#
# Format of the data structure representing declarative items:
# Each VHDL declarative item is represented by a hash.  These hashes all have a
# "type" entry representing the declaration, such as "entity", "architecture",
# "if" for an if clause, "generate" for a generate statement and so on.  Those
# declarations which have identifiers or labels give rise to a "name" entry.
# Sub-declarations such as an entity's ports and generics, nested if clauses,
# loops or generate statements are stored in an array the reference to which is
# the "children" entry in the hash of the parent object.  Other common entries
# are "subtype" (the definition part of a type declaration, a function's return
# type, the type of loop or generate, or type of a variable or constant),
# "objname" (entity or component of an architecture or instantiation) and
# "architecture" (of an instance).  If documentation comments (--*) relating to
# a declarative item are found, they are parsed with parsedoccom(), and the
# resulting array reference is stored in the item's "doc" entry.
sub parsefile
{
  my ($file, $err)= @_;

  my $fname= $file->{name};
  my $errflag= 0;
  my $parsdbg= $config{parsedebug};
  my @parsestack;
  my @topuses;
  my $parent= $file;
  my $inconfiguration= 0;
  my $label= "";
  my ($prevlevel, $lastdoccom, $keepdoctype);

  $err ||= *STDERR{IO};
  ($vline, $doccomment, $aheaddoccom, $lastdoccom, $keepdoctype)= ("") x 5;
  ($keepdoccom, $keepaheaddoc)= (0, 0);
  if( !open($vhandle, $fname) ) {
    $file->{fatal}= "Could not open $fname!  Aborting.";
    return;
  }
  benchmark() if $config{benchmark};
vhdlline:
  while( 13 )
  {
    my $newchild;
    my @newentries;

    while( 13 ) {
      $vline =~ s/^\s+//;
      if( $vline =~ s/^($ID)\s*:\s*// ) {
        $label= $1;
      }
      unless( $vline ) {
        getnextline(0) or last vhdlline;
        next;
      }
      if( $vline =~ /\b(?:protected|postponed|package)\s*$/i ) {
        getnextline(0) and next;
      }
      last;
    }
#    print "investigating $vline\n";
    if( $vline =~ /^(?:end|library|constant|attribute)\b/i ) {
      readuntil( qr/;/ ) or last vhdlline;
      if( $vline =~ s/^end(?:\s+($ID)\??)?(?:\s+($ID|$OP))?\s*;//io ) {
        my ($endtype, $endname, $enditem);
        if( $1 && $2 ) {
          $endtype= lc($1);
          $endname= lc($2);
          $enditem= "$endtype $endname";
        }
        else {
          $enditem= lc($1 || $2 || "");
        }
        if( !@parsestack ) {
          $errflag= 1;
          unless( $config{quiet} ) {
            print $err "Spurious \"end";
            print $err " $enditem" if $enditem;
            print $err "\" on or before line $..\n";
          }
        }
        else {
          my $lastlevel= pop(@parsestack);
          if( $enditem && $lastlevel->{type} eq "begin" ) {
            # Begin blocks are only created when inside "if/case..generate" and
            # only may have a matching "end;" without $enditem; otherwise this
            # is the end of a VHDL 93 "if..generate" statement with declarative
            # part, and the begin has to be closed without corresponding end.
            $parent= $lastlevel->{backtrack};
            $prevlevel= $lastlevel;
            $lastlevel= pop(@parsestack);
          }
          if( $enditem && ($endtype ?  $endtype ne $lastlevel->{type} || 
                            $endname ne lc($lastlevel->{name} || "") :
                            $enditem ne $lastlevel->{type} &&
                            $enditem ne lc($lastlevel->{name} || "") ) ) {
            $errflag= 1;
            unless( $config{quiet} ) {
              print $err "\"end $enditem\" does not match beginning of block \"",
                            $lastlevel->{type};
              print $err " ", $lastlevel->{name} if $lastlevel->{name}; 
              print $err "\" on or before line $. in $fname.";
            }
            # Try to find declaration matching current end statement in parsing
            # stack and previous (deeper) level.  Resynchronise the stack if
            # the result is unique.
            my @matchinds= grep $parsestack[$_]{type} eq $enditem || lc($parsestack[$_]{name} || "") eq $enditem, (0..$#parsestack);
            if( !@matchinds && $prevlevel &&
                ($prevlevel->{type} eq $enditem || lc($prevlevel->{name} || "") eq $enditem) ) {
              push @parsestack, $lastlevel;
              $lastlevel= $prevlevel;
              print $err "  Resynchronising to previous \"end $enditem\".\n"
                unless $config{quiet};
            }
            elsif( @matchinds == 1 ) {
              ($lastlevel)= splice(@parsestack, $matchinds[0]);
              print $err "  Resynchronising to outer $$lastlevel{type} block.\n"
                unless $config{quiet};
            }
            else {
              print $err "\n" unless $config{quiet};
            }
          }
          $inconfiguration= 0 if $parent->{type} eq "configuration";
          $parent= $lastlevel->{backtrack};
          $prevlevel= $lastlevel;
          if( $parsdbg ) {
            print "$.: backtracking to ", $parent->{type};
            print " ", $parent->{name} if $parent->{name};
            print "\n";
          }
        }
      }
      elsif( $vline =~ s/^library\s+($IDLIST)\s*;//io ) {
        @newentries= map +{ "type", "library", "name", $_ },
                            split(/\s*,\s*/, $1);
      }
      elsif( $vline =~ s/^attribute\s+($ID)\s+of\s+($AILIST)\s*:\s*
                        ($ID)\s+is\s+($STUFF)\s*;//iox ) {
        my $template= { "type", "attrspec", "name", $1,
                        "objtype", lc($3), "value", $4 };
        my $ailist= $2;
        while( $ailist =~ s/^($AI)(?:\s*,\s*)?//o ) {
          $template->{objname}= $1;
          push @newentries, { %$template };
        }
      }
      elsif( $vline =~ s/^(constant|attribute)\s+($IDLIST)\s*:($MSTUFF)
                        (?::=($STUFF))?;//iox ) {
        my ($type, $ids, $subtype, $val)= (lc($1), $2, $3, $4 || "");
        $subtype =~ s/^\s+//;   $subtype =~ s/\s+$//;
        $val =~ s/^\s+//;   $val =~ s/\s+$//;
        @newentries= map +{ "type", $type, "name", $_, 
                "subtype", $subtype, "value", $val }, split(/\s*,\s*/, $ids);
      }
      else {
        $vline =~ s/^$STUFF;//o;
      }
    }
    elsif( !$label && $vline =~ s/^context\s+//i ) {
      last vhdlline unless defined(readuntil( qr/\sis\b/i ));
      if( $vline =~ s/($ID)\s+is\b//io ) {
        $newchild= { "type", "context", "name", $1, "subtype", "declaration" };
      }
      elsif( $vline =~ s/($SIDLIST)\s*;//io ) {
        @newentries= map +{ "type", "context", "name", $_, "subtype", "reference" },
                        split(/\s*,\s*/, $1);
        map { $_->{name} =~ s/\s+//g; } @newentries;
      }
    }
    elsif( !$label && $vline =~ s/^(entity|component|package|packagebody)\b//i ) {
      my $type= lc($1);
      while( $vline !~ /\S/ ) {
        getnextline(0) or last vhdlline;
      }
      if( $type eq "package" ) {
        $vline =~ s/^\s*($ID)//o or goto skipnext;
        my $newpack= { "type", $type, "name", $1 };
        # Need to read ahead to potential "is new" to identify generic package
        # instances
        while( 13 ) {
          if( $vline =~ s/^\s*is\s+new\b/new/i ) {
            $doccomment .= $aheaddoccom;
            $keepdoccom ||= $keepaheaddoc;
            $aheaddoccom= "";
            $keepaheaddoc= 0;
            readuntil( qr/;/ );
            @newentries= ( $newpack );
            last;
          }
          elsif( $vline =~ s/^\s*is\b\s+(\S)/$1/i || $vline =~ /^\s*(\S+)/ && $1 ne "is" ) {
            $newchild= $newpack;
            last;
          }
          getnextline(1) or last vhdlline;
        }
      }
      elsif( $vline =~ s/\s+($ID)(?:\s+is\b)?//io  ) {
        $newchild= { "type", $type, "name", $1 };
      }
      else {
        goto skipnext;
      }
    }
    elsif( $vline =~ s/^new\s+($SID)//io ) {
      if( $parent->{children} && @{$parent->{children}} ) {
        $parent->{children}[-1]{instanceofname}= $1;
      }
    }
    elsif( $vline =~ /^case\b/i || (!$label && $vline =~ /^(?:architecture|configuration)\b/i) ) {
      last vhdlline unless defined(readuntil( qr/\s(?:is|generate)\b/i ));
      if( $vline =~ s/^(architecture|configuration)\s+($ID)\s+
                                of\s+($SID)\s+is\b//iox  ) {
        $newchild= { "type", lc($1), "name", $2, "objname", $3 };
        $newchild->{objname} =~ s/\s+//g;
      }
      elsif( $vline =~ s/^case\b\??\s*($MSTUFF)\s*\b(is|generate)\b//io ) {
        my ($stuff, $keyword)= ($1, lc($2));
        if( $keyword eq "is" ) {
          $newchild= { "type", "case", "name", $label };
        }
        else {
          $newchild= { "type", "generate", "subtype", "case", "name", $label,
                       "parameters", $stuff };
        }
      }
      else {
        goto skipnext;
      }
    }
    elsif( $vline =~ s/^(?:(procedure|function)|((?:im)?pure))\b//i ) {
      my ($type, $pure)= (lc($1 || ""), lc($2 || "pure"));
      my ($isdef, $return, $parlist, $params)= ("", "", "", []);
      my @generics;
      if( ! $type ) {   # if this started with "pure" or "impure"
        while( $vline !~ /\S/ ) {
          getnextline(0) or last vhdlline;
        }
        goto skipnext unless $vline =~ s/^\s*function\b//i;
        $type= "function";
      }
      last vhdlline unless defined(readuntil( qr/\(|\b(?:is)\b/i ));
      goto skipnext unless $vline =~ s/^\s*($ID|$OP)\s*//o;
      my $name= $1;
      while( 13 ) {
        goto skipnext unless $vline =~ s/^\s*((?:parameter\s*)?\(|is\b|return\b|generic\s*\(|;)//i;
        if( substr($1, -1) eq "(" && !$parlist ) {
          $parlist= readarglist($params);
          last vhdlline unless defined(readuntil( qr/\bis\b/i ));
        }
        elsif( lc(substr($1,0,7)) eq "generic" ) {
          @generics= readportlist("generic", $err);
        }
        elsif( lc($1) eq "return" ) {
          goto skipnext if $type eq "procedure";
          $vline =~ s/^($MSTUFF)(?:\b(is)\b|;)//io;
          ($return, $isdef)= ($1, $2);
          $return =~ s/^\s+//;
          $return =~ s/\s+$//;
          last;
        }
        elsif( lc($1) eq "is" ) {
          $isdef= 1;
          if( $type eq "function" && ! $return ) {
            last vhdlline unless defined readuntil( qr/\bnew\b/i );
            goto skipnext unless $vline =~ /^\s*new\b/i;
            # Ignore function definition without return type, but allow
            # instance of generic function.
            $isdef= 0;
          }
          last;
        }
        elsif( $1 eq ";" ) {
          next vhdlline if $type eq "function";
          # Ignore function declaration without return type.  Do not use "goto
          # skipnext" because the ";" has already been removed.
          last;
        }
      }
      $newchild= { "type", $type, "name", $name, "parlist", $parlist,
                    "parameters", $params };
      @$newchild{qw(subtype pure)}= ($return, $pure) if $type eq "function";
      $newchild->{childtype}{generic}= \@generics if @generics;
      if( !$isdef ) {
        @newentries= ( $newchild );
        $newchild= undef;
      }
      if( @parsestack == 1 ) {
        push @{$parent->{childtype}{funcproc}}, @newentries;
        push @{$parent->{childtype}{funcproc}}, $newchild if $newchild;
      }
    }
    elsif( $vline =~ s/^((?:postponed)?process|block)\b//i &&
            ($label || lc($1) ne "block") ) {
      my ($name, $type, $post)= ($label, lc($1) eq "block"? "block":"process",
                                    lc($1) eq "postponedprocess");
      my $list= "";
      while( 13 ) {
        if( $vline =~ s/^\s*(\S)// ) {
          if( $1 eq "(" ) {
            $doccomment .= $aheaddoccom;
            $keepdoccom ||= $keepaheaddoc;
            $aheaddoccom= "";
            $keepaheaddoc= 0;
            $list= readcommalist();
          }
          else {
            $vline= $1 . $vline;
          }
          last;
        }
        getnextline(1) or last vhdlline;
      }
      $newchild= { "type", $type, "name", $name };
      if( $type eq "block" ) {
        $newchild->{guard}= $list;
      }
      else {
        @$newchild{qw(postponed sensitivity)}= ($post, $list);
        $newchild->{trace}= [ grep $_->{type} =~ /^(?:generate|block)$/,
                                map($_->{backtrack}, @parsestack), $parent ];
        if( @parsestack && $newchild->{type} eq "process" ) {
          # List all processes to avoid recursive searches later
          my $top= @parsestack > 1? $parsestack[1]{backtrack} : $parent;
          push @{$top->{allprocesses}}, $newchild;
        }
      }
    }
    elsif( $vline =~ s/^if\b//i ) {
      last vhdlline unless defined(readuntil( qr/\b(?:generate|then)\b/i ));
      if( $vline =~ s/^($MSTUFF)(\b(?:generate|then)\b|;)//io )  {
        my ($stuff, $keyword)= ($1, lc($2));
        if( $keyword eq "then" ) {
          $newchild= { "type", "if", "name", $label };
        }
        elsif( $label ) {
          my $label2= $1 if $stuff =~ s/^\s*($ID)\s*://;
          $stuff =~ s/^\s+//;
          $stuff =~ s/\s+$//;
          $newchild= { "type", "generate", "subtype", "if", "name", $label,
                       "subname", $label2, "parameters", $stuff };
        }
      }
    }
    elsif( $vline =~ s/^(while|loop)\b//i ) {
      $newchild= { "type", "loop", "name", $label, "subtype", lc($1) };
      if( $newchild->{subtype} ne "loop" ) {
        skipuntil( qr/\bloop\b/i );
      }
    }
    elsif( $vline =~ s/^((?:sub)?type)\b//i ) {
      my $sub= lc($1);
      last vhdlline unless
       defined(readuntil( qr/\b(?:record|protected|protectedbody)\b/i ));
      if( $vline =~ s/^\s*($ID)\s+is\b\s*
            (?:\b(record|protected|protectedbody)\b|($MSTUFF);)//iox ) {
        my ($name, $sub2, $typedef)= ($1, $2, $3);
        $newchild= { "type", "type", "subtype", lc($sub2 || $sub),
                     "name", $name };
        if( $sub2 ) {
          $newchild->{type}= lc($sub2);
          # This "type" serves only for recognising "end", will be undone later
          if( $newchild->{subtype} eq "record" ) {
            $newchild->{doc}= parsedoccom($doccomment, $err) if $doccomment;
            $doccomment= "";
            @newentries= readportlist("recordelement", $err);
          }
        }
        else {
          $typedef =~ s/^\s+//;
          $typedef =~ s/\s+$//;
          $newchild->{definition}= $typedef;
          if( $newchild->{definition} =~ s/\s*\bunits\s+($ID)$//i ) {
            $newchild->{type}= $newchild->{subtype}= "units";
            $newchild->{baseunit}= $1;
            $newchild->{doc}= parsedoccom($doccomment, $err) if $doccomment;
            readuntil( qr/;/ ) && $vline =~ s/^\s*;//;
            readunitlist($newchild);
            $doccomment= "";
          }
          else {
            @newentries= ( $newchild );
            $newchild= undef;
          }
        }
      }
      else {
        goto skipnext;
      }
    }
    elsif( $vline =~ s/^for\b//i ) {
      while( 13 ) {
        if( $inconfiguration && $vline =~ s/^\s*($ID)\s*(?:\(\s*($ID)\s*\)\s*)?(for)/$3/io ) {
          $newchild= { "type", "for", "subtype", "architecture", "objname", $1, "subname", $2 };
          # leave $aheaddoccom as it is
          last;
        }
        elsif( $vline =~ s/^$MSTUFF\bloop\b//io ) {
          $newchild= { "type", "loop", "name", $label, "subtype", "for" };
        }
        elsif( $label && $vline =~ s/^\s*($MSTUFF)\s*\bgenerate\b//io ) {
          $newchild= { "type", "generate", "subtype", "for", "name", $label,
                      "parameters", $1 };
        }
        elsif( $vline =~ s/^\s*($IDLIST)\s*:\s*($ID)//io ) {
          $newchild= { "type", "for", "subtype", "instance", "objtype", $2,
                                         "objnames", [split(/\s*,\s*/, $1)] };
          unless( $inconfiguration ) {
            @newentries= ( $newchild );
            undef $newchild;
          }
        }
        elsif( $vline =~ s/^$STUFF;//o ) {
          last;
        }
        else {
          getnextline(1) or last vhdlline;
          next;
        }
        $doccomment .= $aheaddoccom;
        $keepdoccom ||= $keepaheaddoc;
        $aheaddoccom= "";
        $keepaheaddoc= 0;
        last;
      }
    }
    elsif( $vline =~ s/^use\b//i ) {
      last vhdlline unless defined(readuntil( qr/\b(?:generic|port)\b/i ));
      if( $vline =~ s/^\s*(?:(entity)\s+($SID)(?:\s*\(\s*($ID)\s*\))?|
                        (configuration)\s+($SID)|(open)\b)//iox ) {
        @newentries= ( { "type", "use", "subtype", lc($1 || $4 || $6), 
                            "name", $2 || $5, "archname", $3 } );
        $newentries[0]{name} =~ s/\s+//g unless $6;
        $newentries[0]{for}= $parent->{children}[-1]
              if $parent->{children} && @{$parent->{children}}
                && $parent->{children}[-1]{type} eq "for"
                && $parent->{children}[-1]{subtype} eq "instance";
      }
      elsif( $vline =~ s/^\s*($SIDLIST)\s*;//o ) {
        @newentries= map +{ "type", "use", "subtype", "package", "name", $_ },
                                                  split(/\s*,\s*/, $1);
        map { $_->{name} =~ s/\s+//g; } @newentries;
      }
      else {
        goto skipnext;
      }
    }
    elsif( $vline =~ s/^(generic|port)\b//i ) {
      my $type= lc($1);
      last vhdlline unless defined(readuntil( qr/\(/ ));
      if( $vline =~ s/^\s*\(//i ) {
        @newentries= readportlist($type, $err, $parent);
      }
      elsif( $type eq "generic" && $vline =~ s/^\s*map\s*\(//i ) {
        my $genmap= [];
        readcommalist($genmap);
        skipstatement() or last vhdlline;
        if( $parent->{children} && @{$parent->{children}} ) {
          $parent->{children}[-1]{genericmap}= $genmap;
        }
        else {
          $parent->{genericmap}= $genmap;
        }
      }
      else {
        goto skipnext;
      }
    }
    elsif( $config{psl} && $vline =~ s/^(property|sequence|endpoint)\b//i ) {
      @newentries= ( { "type", "psl", "subtype", lc($1) } );
      defined(readuntil( qr/\(/ )) or last vhdlline;
      $vline =~ s/^\s*($ID)\s*//o or next vhdlline;
      $newentries[0]{name}= $1;
      if( $vline =~ /^\(/ ) {
        while( 13 ) {
          if( $vline =~ s/^($PAREN)//o ) {
              $newentries[0]{parlist}= $1;
              $newentries[0]{parlist} =~ s/^\(\s*//;
              $newentries[0]{parlist} =~ s/\s*\)$//;
              last;
          }
          getnextline(0) or last vhdlline;
        }
      }
      my $psl;
      while( 13 ) {
        if( $vline =~ s/^($PSL);//o ) {
          $newentries[0]{value}= $1;
          $newentries[0]{value} =~ s/^\s*is\b\s*//i;
          $newentries[0]{value} =~ s/\s*$//;
          last;
        }
        getnextline(0) or last vhdlline;
      }
      $newentries[0]{trace}= [ grep $_->{type} =~ /^(?:generate|block)$/,
                                 map($_->{backtrack}, @parsestack), $parent ];
      if( @parsestack ) {
        # List all PSL definitions to avoid recursive searches
        my $top= @parsestack > 1? $parsestack[1]{backtrack} : $parent;
        push @{$top->{allpsldefs}}, @newentries;
      }
    }
    elsif( $config{psl} && $vline =~ s/^default\b//i ) {
      defined(readuntil(qr/;/)) or last vhdlline;
      $vline =~ s/^\s*clock\s+is\b\s*($MSTUFF)\s*;//i or next vhdlline;
      @newentries= ( { "type", "psl", "subtype", "default clock", "value", $1 } );
    }
    elsif( $config{psl} && $vline =~ s/^(assert|assume|assume_guarantee|
                                  restrict|restrict_guarantee|cover)\b//ix ) {
      my $subtype= lc($1);
      my $psl;
      while( 13 ) {
        if( $vline =~ s/^($PSL);//o ) {
          $psl= $1;
          last;
        }
        getnextline(0) or last vhdlline;
      }
      @newentries= ( { "type", "psl", "subtype", $subtype, "name", $label } );
      if( $subtype =~ /^(?:assert|assume_guarantee|restrict_guarantee|cover)$/
          && $psl =~ s/\breport\s+($MSTUFF)\s*$//io ) {
        $newentries[0]{report}= $1;
      }
      $psl =~ s/^\s+//;
      $psl =~ s/\s+$//;
      if( $subtype =~ /^(?:assert|assume|assume_guarantee)$/ ) {
        $newentries[0]{property}= $psl;
      }
      else #  elsif( $subtype =~ /^(?:restrict|restrict_guarantee|cover)$/ )
      {
        $newentries[0]{sequence}= $psl;
      }
    }
    # Instantiations
    elsif( $label && $vline =~ /^$SID/o ) {
      last vhdlline unless defined(readuntil( qr/\bmap\s*\(/i ));
      goto skipnext unless
          $vline =~ s/^(?>(?:(component|configuration|entity)\s+)?)
            ($SID)(?:\s*\(\s*($ID)\s*\))?\s*(generic|port)\s+map\s*\(//iox;
      my $genmap= [];
      my $firstmap= lc($4);
      @newentries= ( { "type", "instance", "name", $label, "objname", $2,
                          "subtype", lc($1 || "component"), "archname", $3,
                          "genericmap", $genmap, "uses",
                      [ @parsestack ? @{$parsestack[-1]{uses}} : () ] } );
      $newentries[0]{objname} =~ s/\s+//g;
      readcommalist($genmap) if $firstmap eq "generic";
      $newentries[0]{trace}= [ grep $_->{type} =~ /^(?:generate|block)$/,
                                 map($_->{backtrack}, @parsestack), $parent ];
      if( @parsestack ) {
        # List all instances to avoid recursive searches later
        my $top= @parsestack > 1? $parsestack[1]{backtrack} : $parent;
        push @{$top->{allinstances}}, @newentries;
      }
    }
    elsif( $vline =~ s/^(elsif|else)\b//i ) {
      my $subtype= lc($1);
      my $havegen= readuntil(qr/\bgenerate\b/i);
      last vhdlline unless defined $havegen;
      if( $havegen && @parsestack && $parent->{type} eq "generate" &&
              $parent->{subtype} =~ /^(?:els)?if$/ &&
              $vline =~ s/^\s*(?:($ID)\s*:\s*)?($MANY)\bgenerate\b//io ) {
        my ($label2, $cond)= ($1, $2);
        $cond =~ s/^\s+//;
        $cond =~ s/\s+$//;
        $newchild= { "type", "generate", "subtype", $subtype, "subname", $label2,
                     "parent", $parent->{parent} || $parent,
                     "name", $parent->{name}, "parameters", $cond };
        if( $parsdbg ) {
          print "$.: $subtype branch of generate $parent->{name}\n";
        }
        $prevlevel= pop @parsestack;
        $parent= $prevlevel->{backtrack};
      }
      elsif( ! $havegen && $subtype eq "elsif" ) {
        skipuntil(qr/\bthen\b/i);
      }
    }
    elsif( $vline =~ s/^begin\b//i ) {
      $newchild= { type => "begin" }
          if @parsestack && $parent->{type} eq "generate";
    }
    elsif( $vline =~ s/^(?:is\b|;)//i ) {}
    elsif( $vline =~ s/^when\b//i ) {
      if( @parsestack && $parent->{type} eq "generate" && $parent->{subtype} =~ /^(?:case|when)$/ ) {
        last vhdlline unless defined readuntil(qr/=>/i);
        if( $vline =~ s/^\s*(?:($ID)\s*:\s*)?($MSTUFF)\s*=>\s*//io ) {
          $newchild= { "type", "generate", "subtype", "when", "subname", $1,
                       "parameters", $2, "name", $parent->{name},
                       "parent", $parent->{parent} || $parent };
          if( $parsdbg ) {
            print "$.: new alternative ", ($1 || ""), " of generate $parent->{name}\n";
          }
          $prevlevel= pop @parsestack;
          $parent= $prevlevel->{backtrack};
        }
      }
      else {
        skipuntil(qr/=>/i);
      }
    }
    else {
skipnext:
      skipstatement() or last vhdlline;
      $keepdoccom= 0;
      next vhdlline;
    }
    if( $newchild ) {
      $keepdoccom= 0;
      $newchild->{doc}= parsedoccom($doccomment, $err) if $doccomment;
      push @{$parent->{children}}, $newchild;
      if( @parsestack == 0 ) {
        $newchild->{uses}= [ @topuses ];
        push @{$parent->{childtype}{$newchild->{type}}}, $newchild;
      }
      elsif( @parsestack == 1 ) {
        # List children by type for top-level constructs
        push @{$parent->{childtype}{$newchild->{type}}}, $newchild;
      }
      push @parsestack, { "backtrack", $parent, 
              "type", $newchild->{type}, "name", $newchild->{name},
              "uses", [ @parsestack ? @{$parsestack[-1]{uses}} : () ] };
      $prevlevel= undef;
      $inconfiguration= 1 if $newchild->{type} eq "configuration";
      $parent= $newchild;
      if( $parsdbg ) {
        print "$.: descending into ", $newchild->{type};
        print " ", $newchild->{name} if $newchild->{name};
        print "\n";
      }
    }
    if( @newentries ) {
      if( !$doccomment && $keepdoccom ) {
        $keepdoccom= 0 unless $newentries[0]{type} eq $keepdoctype;
        $doccomment= $lastdoccom if $keepdoccom;
      }
      if( $doccomment && !($config{compat} && !@parsestack) ) {
        if( $keepdoccom ) {
          $lastdoccom= $doccomment;
          $keepdoctype= $newentries[0]{type};
        }
        $doccomment= parsedoccom($doccomment, $err);
        foreach (@newentries) { $_->{doc}= $doccomment; }
        # non-empty $aheaddoccom occurs only for $newchild blocks
        $doccomment= "";
      }
      push @{$parent->{children}}, @newentries;
      if( @parsestack == 1 ) {
        # List children by type for top-level constructs.  This relies on all
        # new entries having the same type.
        push @{$parent->{childtype}{$newentries[0]{type}}}, @newentries;
      }
      if( $newentries[0]{type} eq "use" ||
          ($newentries[0]{type} eq "context" && $newentries[0]{subtype} eq "reference") ) {
        # List all use clauses to avoid recursive searches later
        if( @parsestack ) {
          my $top= @parsestack > 1? $parsestack[1]{backtrack} : $parent;
          push @{$top->{alluses}}, @newentries;
          push @{$parsestack[-1]{uses}}, @newentries;
        }
        else {
          push @topuses, @newentries;
        }
      }
      if( $parsdbg && $newentries[0]{type} !~ /^(?:port|generic)$/ ) {
        # "found..." message already output in readportlist() for ports/gens
        print "$.: found ", $newentries[0]{type};
        print "s" if $#newentries;
        print " ", join(", ", map($_->{name}, @newentries))
              if $newentries[0]{name};
        print "\n";
      }
    }
  }
  continue {
    $doccomment= "" unless $config{compat} && !@parsestack;
    $doccomment .= $aheaddoccom;
    $keepdoccom ||= $keepaheaddoc;
    $aheaddoccom= "";
    $keepaheaddoc= 0;
    $label= "";
  }
done:
  benchmark("to parse", $.) if $config{benchmark};
  close $vhandle;
  if( @parsestack ) {
    print $err "Not all blocks were closed - missing one or more \"end\"s.\n";
    $errflag= 1;
  }
  $file->{uses}= \@topuses;
  # Remove the declarative blocks we are not interested in, which we parsed
  # only to keep track of nesting:
  prune_all($file, "type", "loop");
  prune_all($file, "type", "if");
  prune_all($file, "type", "case");
  map { $_->{filename}= $fname; $_->{file}= $file; } @{$file->{children} ||= []};
  print $err "There were errors parsing $fname.  Continuing regardless.\n"
        if $errflag;
}

}   # End of scope of parsing variables


# Compare the hash representations of two functions or procedures for finding
# equivalent declarations in a package and its package body.  The types of the
# two declarations (function or procedure) are not compared and are assumed to
# be equal.
# -> Two references to hashes representing declarative items
# <- 1 if equal, 0 otherwise
sub packsubeq
{
  my ($a, $b)= @_;

  return 0 if lc($a->{name}) ne lc($b->{name});
  if( $a->{type} eq "function" ) {
    return 0 if $a->{pure} ne $b->{pure} ||
                codecmp($a->{subtype}, $b->{subtype});
  }
  return 0 if @{$a->{parameters}} != @{$b->{parameters}};
  for my $ind (0..$#{$a->{parameters}}) {
    my $pa= $a->{parameters}[$ind];
    my $pb= $b->{parameters}[$ind];
    return 0 if lc($pa->{name}) ne lc($pb->{name}) ||
                $pa->{subtype} ne $pb->{subtype} ||
                $pa->{direction} ne $pb->{direction} ||
                codecmp($pa->{type}, $pb->{type}) ||
                defined($pa->{value}) != defined($pb->{value}) ||
          (defined($pa->{value}) && codecmp($pa->{value}, $pb->{value}));
  }
  return 1;
}


# Set maximum message size and default number of tasks for parallel parsing.
# Returns immediately if parallel parsing is disabled.
sub prepareparallel
{
  my $msg="x" x 256;
  my $sent;

  return if defined($config{jobs}) && !$config{jobs};

  # Find maximum message size for socketpair by trial and error:
  if( ! eval { socketpair(SEND, RECV, AF_UNIX, SOCK_DGRAM, PF_UNSPEC) } ) {
    print STDERR "Cannot use multiple parsing tasks because the socketpair function is not available.  Parsing sequentially.\n"
      if $config{jobs} && !$config{quiet};
    $config{jobs}= 0;
    return;
  }
  while( length($msg) < 0x1000000 && 
      defined($sent= send(SEND, $msg, 0)) && $sent == length($msg) ) {
    recv(RECV, $_, length($msg), 0);
    $msg .= $msg;
  }
  my $eighth= length($msg) / 8;
  substr($msg, -$eighth)= "";
  for (1, 2, 3)  {
    $sent= send(SEND, $msg, 0);
    if( defined($sent) && $sent == length($msg) ) {
      recv(RECV, my $dummy, length($msg), 0);
      last;
    }
    substr($msg, -$eighth)= "";
  }
  $config{maxmsgsize}= length($msg);

  if( !defined($config{jobs}) ) {
    if( $^O eq "linux" ) {
      local $SIG{__WARN__}= sub {};   # silence warnings about failed `...`
      $config{jobs}= `nproc`;
      if( $? != 0 ) {
        my $tsbits= `taskset -p $$`;
        $tsbits =~ s/^.*:\s+// if $? == 0;
        $config{jobs}= $? == 0 ? counthexbits($tsbits) : 3;
      }
      $config{jobs}= 0 if $config{jobs} <= 1;
    }
    elsif( $^O eq "darwin" || $^O =~ /bsd/i ) {    # OS X and BSDs
      local $SIG{__WARN__}= sub {};   # silence warnings about failed `...`
      $config{jobs}= `sysctl -n hw.ncpu` + 0;
      $config{jobs}= 3 unless $? == 0;
    }
    else {
      $config{jobs}= 3;
    }
  }
}


# Worker task used when parallelising parsing.  Receives serialised file hashes
# containing the file name, calls parsefile() and serialises the completed file
# hashes and transmits them back.
# -> Task index (unused, possibly usable for error messages)
#    Socket connected to main task (controller)
sub parsetask
{
  my ($taskind, $sock)= @_;
  my @myfiles;

  $config{maintask}= 0;
  while( 13 ) {
    my ($errhandle, $errmsg);
    my $file= recvdata($sock);
    return if $file->{die} && $file->{die} eq "yes, really";
    last if $file->{"parsing done"};
    push @myfiles, { map { $_ => $file->{$_}; } qw(name docfilename link tabsize) };
    open $errhandle, ">", \$errmsg;
    parsefile($file, $errhandle);
    close $errhandle;
    $file->{errmsg}= $errmsg;
    senddata($sock, $file) or croak "Fatal error in inter-process communication.  Try running with \`-j 0' if this persists.\n";
  }
  for my $file (@myfiles) {
    if( $config{javasyntax} ) {
      sourcehtml_js($file);
    }
    else {
      sourcehtml($file);
    }
  }
  while( 13 ) {
    my $file= recvdata($sock);
    return if $file->{die} && $file->{die} eq "yes, really";
  }
}


{
my @parsetasks;
my $recvsockmask;

# Fork parsing tasks.  Hash references containing the process ID and
# communication socket are added to @parsetasks.
sub createtasks
{
  $config{maintask}= 1;
  $recvsockmask= "";
  for my $ind (0..$config{jobs}-1)
  {
    my ($workersock, $controlsock);
    if( !eval { socketpair($workersock, $controlsock, AF_UNIX, SOCK_DGRAM, PF_UNSPEC) } ) {
      print STDERR "Could not create socketpair for communication with parsing task $ind.  Terminating.\n";
      endtasks();
      exit 1;
    }
    my $pid= fork();
    if( !defined($pid) ) {
      print STDERR "Could not fork parsing task $ind.  Terminating.\n";
      endtasks();
      exit 1;
    }
    if( !$pid ) {       # forked slave process
      close $controlsock;
      @parsetasks= ();
      parsetask($ind, $workersock);
      exit(0);
    }
    close $workersock;
    push @parsetasks,
      { socket => $controlsock, fileno => fileno($controlsock), pid => $pid };
    vec($recvsockmask, $parsetasks[-1]{fileno}, 1)= 1;
  }
}


# Send a value to all worker tasks to tell them to terminate and waits until
# they do.
sub endtasks
{
  for my $ind (0..$#parsetasks) {
    senddata($parsetasks[$ind]{socket}, { die => "yes, really" });
  }
  for my $ind (0..$#parsetasks) {
    waitpid($parsetasks[$ind]{pid}, 0);
  }
  @parsetasks= ();
}


END {
  endtasks() if $config{maintask};
}


# Test whether any of the parsing tasks has finished its current file by
# checking if the socket file descriptors are readable.
# <- Index of the first task that has completed parsing its file, or undef
sub parsedone
{
  my $donemask= $recvsockmask;

  return undef unless select($donemask, undef, undef, undef);
  for my $ind (0..$#parsetasks) {
    return $ind if vec($donemask, $parsetasks[$ind]{fileno}, 1);
  }
  return undef;
}


my $parsefileind;

# Parse a list of VHDL files and return them one at a time.
sub parsenext
{
  my ($files)= @_;

  if( $config{jobs} == 0 ) {
    $parsefileind= 0 unless defined $parsefileind;
    return undef if $parsefileind > $#$files;
    print "Parsing $$files[$parsefileind]{name}...\n" unless $config{quiet};
    parsefile($$files[$parsefileind]);
    croak $$files[$parsefileind]{fatal} if $$files[$parsefileind]{fatal};
    markgit($$files[$parsefileind]);
    ++$parsefileind;
    return $parsefileind - 1;
  }
  else {
    if( !defined($parsefileind) ) {
      createtasks();
      $parsefileind= 0;
    }
    my $inprogress= 0;
    for my $task (@parsetasks) {
      if( !defined($task->{fileind}) && $parsefileind < @$files ) {
        senddata($task->{socket}, $$files[$parsefileind])
             or croak "Fatal error in inter-process communication.  Try running with \`-j 0' if this persists.\n";
        $task->{fileind}= $parsefileind;
        ++$parsefileind;
      }
      ++$inprogress if defined $task->{fileind};
    }
    unless( $inprogress ) {
      for my $task (@parsetasks) {
        senddata($task->{socket}, { "parsing done" => 1 } )
             or croak "Fatal error in inter-process communication.  Try running with \`-j 0' if this persists.\n";
      }
      return undef;
    }
    my $donetaskind;
    do { $donetaskind= parsedone(); } while( ! defined $donetaskind );
    my $donefileind= $parsetasks[$donetaskind]{fileind};
    $$files[$donefileind]= recvdata($parsetasks[$donetaskind]{socket});
    my $file= $$files[$donefileind];
    croak $file->{fatal} if $file->{fatal};
    if( $file->{errmsg} ) {
      print STDERR "Parsed $file->{name}:\n$file->{errmsg}";
    }
    else {
      print "Parsed $file->{name}.\n" unless $config{quiet};
    }
    delete $file->{errmsg};
    markgit($file);
    $parsetasks[$donetaskind]{fileind}= undef;
    return $donefileind;
  }
}

}


#sectiondata##################################################################
##############################################################################
####                    Data handling functions
##############################################################################
##############################################################################


# Make list of source file unique.  A warning message is output if duplicates
# are found, and all but one of them are removed from the file list.
# -> Reference to array of references to hashes representing files
# <- 1 if duplicates were found and removed.
sub uniq_files
{
  my ($files)= @_;
  my $removed= 0;
  # Don't use File::Spec->curdir(), it takes 1 second (!)
  my $cwd= $config{cwd};

  for my $elem (@$files) {
    my $absname= mycanonpath(File::Spec->rel2abs($elem->{name}, $cwd));
    for my $elem2 (@$files) {
      next unless defined($elem2);
      last if $elem2 == $elem;
      if( $absname eq
                mycanonpath(File::Spec->rel2abs($elem2->{name}, $cwd)) ) {
        unless( $config{quiet} ) {
          print STDERR "Duplicate source file ", $elem2->{name};
          if( $elem->{libname} ne $elem2->{libname} ) {
            print STDERR ", in libraries $elem2->{libname} and ",
                      "$elem->{libname}.  Discarding the one in library ",
                      "$elem->{libname}.\n";
          }
          else {
            print STDERR " in library $elem->{libname}.\n";
          }
        }
        $elem= undef;
        $removed= 1;
        last;
      }
    }
  }
  @$files= grep defined($_), @$files;
  return $removed;
}


# Find children of a declarative item which fulfil a condition
# -> Reference to declarative item represented as hash
#    Key to compare
#    Requested value of that key in a (direct) child of the decl. item
# <- Array of matching children
sub find_children
{
  my ($obj, $key, $val)= @_;

  return () unless $obj->{children};
  return grep defined($_->{$key}) && lc($_->{$key}) eq lc($val), @{$obj->{children}};
}


# Returns the maximal depth of a part of the declaration hierarchy
# -> Reference to the hash which is the root of the appropriate part of the
#    hierarchy
# <- Depth (0 if the root has no children, and so on)
sub max_depth
{
  my ($root)= @_;
  my $maxd= 0;

  if( !$root->{children} || !@{$root->{children}} ) {
    return 0;
  }
  for my $child (@{$root->{children}}) {
    my $childd= max_depth($child);
    $maxd= $childd if $maxd < $childd;
  }
  return $maxd+1;
}


# Finds all nodes of a certain type in a subtree
# -> Reference to hash representing root node
#    Key of entry to be compared
#    Value of that key in the searched-for nodes (case insensitive string 
#    comparison)
# <- Array of hash (node) references
sub find_all
{
  my ($root, $key, $val)= @_;
  my @all;

  $val= lc($val);
  push @all, $root if lc($root->{$key}) eq $val;
  for my $child (@{$root->{children}}) {
    push @all, (find_all($child, $key, $val));
  }
  return @all;
}


# Deletes all nodes of a certain type in a subtree, including their children
# -> Reference to hash representing root node
#    Key of entry to be compared
#    Value of that key in the nodes to be pruned (string comparison)
sub prune_all
{
  my ($root, $key, $val)= @_;

  return unless $root->{children};
  $val= lc($val);
  @{$root->{children}}= grep(lc($_->{$key}) ne $val, @{$root->{children}});
  for my $child (@{$root->{children}}) {
    prune_all( $child, $key, $val );
  }
}


# Remove equivalent objects (references to their hashes) from an array.  All
# objects in the array have to be of the same type and situated in the same
# library.  They are considered equivalent if their names are equal and (for
# architectures and configurations) if their entity has the same name.  A
# warning is printed if there are duplicates and unless $config{quiet}.
# -> Reference to the array of objects
#    Library name (for messages) or undef
# <- 1 if elements were removed
sub uniq_objs
{
  my ($ary, $lib)= @_;
  return 0 unless @$ary;
  my $type= $ary->[0]{type};
  my %byname;
  my $removed= 0;

  $lib= $lib ? "$lib." : "";
  if( $type eq "architecture" || $type eq "configuration" ) {
    my $ind= 0;
    for my $elem (@$ary) {
      push @{$byname{lc($elem->{name})}{lc($elem->{objname})}}, $ind;
      ++$ind;
    }
    for my $name (keys %byname) {
      for my $objname (keys %{$byname{$name}}) {
        my @all= @{$byname{$name}{$objname}};
        next unless @all > 1;
        print STDERR ucfirst($type), " ", $$ary[$all[0]]{name},
             " of $lib$$ary[$all[0]]{objname} was found ",
             @all > 2 ? (0+@all)." times" : "twice", ", in:\n   ",
             join("\n   ", map $$ary[$_]{filename}, @all),
             "\nKeeping the one from $$ary[$all[0]]{filename}.\n"
            unless $config{quiet};
        @$ary[@all[1..$#all]]= (undef) x $#all;
        $removed= 1;
      }
    }
  }
  else {
    my $ind= 0;
    for my $elem (@$ary) {
      push @{$byname{lc($elem->{name})}}, $ind;
      ++$ind;
    }
    for my $name (keys %byname) {
      my @all= @{$byname{$name}};
      next unless @all > 1;
      if( !$config{quiet} && ($type ne "entity" || !sameentities(map $$ary[$_], @all)) ) {
        print STDERR ucfirst($type), " $lib$$ary[$all[0]]{name}",
           " was found ", @all > 2 ? (0+@all)." times" : "twice", ", in:\n   ",
           join("\n   ", map $$ary[$_]{filename}, @all),
           "\nKeeping the one from $$ary[$all[0]]{filename}.\n";
      }
      @$ary[@all[1..$#all]]= (undef) x $#all;
      $removed= 1;
    }
  }
  @$ary= grep defined($_), @$ary;
  return $removed;
}


# Find out if a set of entity declarations describe the same entity.  The
# number, names, types and directions of ports and generics are compared.  The
# documentation markup is not.
# -> List of references to hashes representing entities
# <- 1 if all are equal, 0 otherwise
sub sameentities
{
  my $first= shift;

  return 1 unless @_;
  my @fports= sort { $a->{name} cmp $b->{name} } @{$first->{childtype}{port} || []};
  my @fgens= sort { $a->{name} cmp $b->{name} } @{$first->{childtype}{generic} || []};
  for my $ent (@_) {
    return 0 unless @fports == @{$ent->{childtype}{port} || []} &&
                    @fgens == @{$ent->{childtype}{generic} || []};
    my @ports= sort { $a->{name} cmp $b->{name} } @{$ent->{childtype}{port} || []};
    for my $ind (0..$#ports) {
      return 0 unless $fports[$ind]{name} eq $ports[$ind]{name} &&
               $fports[$ind]{direction} eq $ports[$ind]{direction} &&
               !codecmp($fports[$ind]{subtype}, $ports[$ind]{subtype});
    }
    my @gens= sort { $a->{name} cmp $b->{name} } @{$ent->{childtype}{generic} || []};
    for my $ind (0..$#gens) {
      return 0 unless $fgens[$ind]{name} eq $gens[$ind]{name} &&
               !codecmp($fgens[$ind]{subtype}, $gens[$ind]{subtype});
    }
  }
  return 1;
}


# Finds the corresponding declarations for each attribute specification, and
# assigns the specifications to their targets.  The targets receive a new entry
# "attributes" in their hash which references a hash in which the keys are
# references to the attribute declarations and the values to the
# specifications.
# -> Hash reference representing top-level declarative item.  Only its
#    (first-level) children are considered when searching for attributes, and
#    only its children and itself are candidates for targets.
sub match_attributes
{
  my ($top)= @_;
  my @aspecs= @{$top->{childtype}{attrspec} || []};
  my @adecls= @{$top->{childtype}{attribute} || []};

  for my $aspec (@aspecs) {
    for my $adecl (@adecls) {
      if( lc($adecl->{name}) eq lc($aspec->{name}) ) {
        $aspec->{attribute}= $adecl;
        last;
      }
    }
  }
  for my $aspec (@aspecs) {
    if( $top->{type} eq $aspec->{objtype} && 
        lc($top->{name}) eq lc($aspec->{objname}) ) {
      $top->{attributes}{$aspec->{name}}= $aspec;
      next;
    }
    my @targets;
    if( $aspec->{objtype} eq "label" ) {
      @targets= ( @{$top->{allinstances}}, @{$top->{allprocesses}} );
      # Many other labels can have attributes but only those of instances and
      # processes are of interest to us
    }
    elsif( $aspec->{objtype} =~
        /^(?:entity|architecture|configuration|package|packagebody)$/ ) {
      @targets= ( $top )
        if $aspec->{objtype} eq $top->{type};
    }
    else {
      @targets= @{$top->{childtype}{$aspec->{objtype}} || []};
    }
    next unless @targets;
    if( lc($aspec->{objname}) eq "all" ) {
      map { $_->{attributes}{$aspec->{name}}= $aspec; } @targets;
    }
    elsif( lc($aspec->{objname}) eq "others" ) {
      for my $target (@targets) {
        $target->{attributes}{$aspec->{name}}= $aspec
                unless $target->{attributes}{$aspec->{name}};
      }
    }
    else {
      my $truncname= $aspec->{objname};
      $truncname =~ s/\s*\[.*$//;
      $truncname= lc($truncname);
      @targets= grep lc($_->{name}) eq $truncname, @targets;
      next unless @targets;
      if( ($aspec->{objtype} eq "function" || 
        $aspec->{objtype} eq "procedure") && $aspec->{objname} =~ /\[/ ) {
        my @argtypes;
        my $arglist;
        $arglist= $aspec->{objname};
        $arglist =~ s/^.*\[\s*//;
        $arglist =~ s/\s*\]\s*$//;
        @argtypes= split /\s*(?:,|\breturn\b)\s*/i, $arglist;
        my $returntype= pop @argtypes if $arglist =~ /\breturn\b/i;
tryfunctarget:
        for my $target (@targets) {
          next if $returntype && $target->{subtype} !~ /\b$returntype\b/i;
          next if $#argtypes != $#{$target->{parameters}};
          for my $ind (0..$#argtypes) {
            my $type= $argtypes[$ind];
            next tryfunctarget
                if $target->{parameters}[$ind]{type} !~ /\b$type\b/i;
          }
          $target->{attributes}{$aspec->{name}}= $aspec;
        }
      }
      else {
        map { $_->{attributes}{$aspec->{name}}= $aspec; } @targets;
      }
    }
  }
}


# Recursively find all contexts referenced directly or indirectly by a given
# context.
# -> Reference to context declaration hash
#    Reference to hash set of context declarations in this branch of the
#    dependency tree, to prevent infinite recursion
sub collect_subcontexts
{
  my ($context, $trace)= @_;
  my @loops;

  $trace ||= {};
  $trace->{$context}= 1;
  $context->{allcontexts}= {};
  $context->{alluses}= {};
  for my $contref (@{$context->{childtype}{context}}) {
    my $subcont= $contref->{object};
    next unless $subcont;
    if( $trace->{$subcont} ) {
      push @loops, $subcont;
    }
    else {
      collect_subcontexts($subcont, $trace)
          unless $subcont->{allcontexts};
      @{$context->{allcontexts}}{keys %{$subcont->{allcontexts}}}= values %{$subcont->{allcontexts}};
      $context->{allcontexts}{$subcont}= $subcont;
      merge_uselist($context->{alluses}, $subcont->{alluses});
    }
  }
  for my $loop (@loops) {
    @{$context->{allcontexts}}{keys %{$loop->{allcontexts}}}= values %{$loop->{allcontexts}};
    $context->{allcontexts}{$loop}= $loop;
    $loop->{allcontexts}= $context->{allcontexts};
    merge_uselist($context->{alluses}, $loop->{alluses});
    $loop->{alluses}= $context->{alluses};
  }
  for my $use (@{$context->{childtype}{use}}) {
    add2uselist($context->{alluses}, $use, $context->{libname});
  }
  delete $trace->{$context};
}


# Add a selected name from a package use statement to a hash representation of
# use clauses.  Use of "all" causes all more specific use clauses from the same
# package to be removed.
# -> Reference to use clause list in the following format: The top-level hash
#    reference contains as its keys the full names of the packages.  Its values
#    can be the reference to the corresponding use statement (corresponding to
#    "all") or a reference to a hash mapping identifiers to use statements
#    of identifiers.
#    Selected name from a use clause
#    Default library
sub add2uselist
{
  my ($list, $use, $lib)= @_;

  my ($pack, $uitem)= $use->{name} =~ /^(.*)\.(\w+)$/ or return;
  $pack= "$lib.$pack" unless $pack =~ /\./;
  if( lc($uitem) eq "all" ) {
    $list->{$pack}= $use;
  }
  # The "type" entry distinguishes a hash representing a use statement from a
  # hash containing a list of non-"all" use statements.
  elsif( ! $list->{$pack} || ! $list->{$pack}{type} ) {
    $list->{$pack}{$uitem}= $use;
  }
}


# Merge the content of a hash representation of a list of use clauses to
# another.  "all" entries override all more specific ones from the same
# package; otherwise the individual symbols are added.
# -> Reference to hash representation of destination list
#    Reference to hash representation of list to merge
sub merge_uselist
{
  my ($dest, $src)= @_;

  for (keys %$src) {
    # The "type" entry distinguishes a hash representing a use statement from a
    # hash containing a list of non-"all" use statements.
    if( $src->{$_}{type} ) {
      $dest->{$_}= $src->{$_};
    }
    elsif( ! $dest->{$_} ) {
      $dest->{$_}= { %{$src->{$_}} };
    }
    elsif( ! $dest->{$_}{type} ) {
      @{$dest->{$_}}{keys %{$src->{$_}}}= values %{$src->{$_}};
    }
  }
}


# Resolve reference to minor declaration, i.e. sub-declaration of a major
# design unit.  This function does the dirty work for resolve_types and
# resolve_genfunc.  A declaration with the given name and type is searched for
# in the parent design unit and all available packages.
# -> Selected ID / name of declaration to look for
#    Type of declaration to look for
#    Reference to parent declaration hash
#    Reference to array of package use clauses with two components (1 dot)
#    Reference to array of package use clauses with three components (2 dot)
#    Reference to hash for caching found declarations
sub resolve_minordecl
{
  my ($id, $type, $parent, $puses2, $puses3, $cache)= @_;
  my $result;

  $id= lc($id);
  return $$cache{$id} if exists $$cache{$id};
  my $numdots= $id =~ tr/././;
  if( $numdots > 2 ) {
    $result= undef;
  }
  elsif( $numdots == 2 ) {
    $result= find_selname($id, $type);
  }
  elsif( $numdots == 1 ) {
    for my $use (@$puses2) {
      my $selname= merge_selname(lc($use->{name}), $id);
      next unless $selname;
      $result= $$cache{$selname}, last if $$cache{$selname};
      next if exists $$cache{$selname};
      $result= find_selname($selname, $type);
      if( ! $result && $use->{package} && $use->{package}{instanceof} ) {
        my $selname2= merge_selname(lc($use->{package}{instanceof}{fullname}), $id);
        if( $selname2 ) {
          $$cache{$selname2}= find_selname($selname2, $type)
              unless exists $$cache{$selname2};
          $result= $$cache{$selname2};
        }
      }
      $$cache{$selname}= $result;
      last if $result;
    }
    unless( $result ) {
      my $selname= "$parent->{libname}.$id";
      if( exists $$cache{$selname} ) {
        $result= $$cache{$selname};
      }
      else {
        $result= find_selname($selname, $type);
        $$cache{$selname}= $result;
      }
    }
  }
  else {
    ($result)= grep lc($_->{name}) eq $id, @{$parent->{childtype}{$type}};
    unless( $result ) {
      for my $use (@$puses3) {
        my $selname= merge_selname(lc($use->{name}), $id);
        next unless $selname;
        $result= $$cache{$selname}, last if $$cache{$selname};
        next if exists $$cache{$selname};
        $result= find_selname($selname, $type);
        if( ! $result && $use->{package} && $use->{package}{instanceof} ) {
          my $selname2= merge_selname(lc($use->{package}{instanceof}{fullname}), $id);
          if( $selname2 ) {
            $$cache{$selname2}= find_selname($selname2, $type)
                unless exists $$cache{$selname2};
            $result= $$cache{$selname2};
          }
        }
        $$cache{$selname}= $result;
        last if $result;
      }
    }
  }
  $$cache{$id}= $result;
  return $result;
}


# Blacklist keywords and IEEE types (below) when searching type expressions for
# user-defined types: (this is merely an optimisation)
my %no_usertypes= map { $_ => 1; } qw( array of to downto range );

# Resolve type identifiers of user-defined types.  This is deliberately less
# sophisticated than the resolving of component instances below, because typed
# declarations are more numerous and hence the impact on runtime is likely to
# be larger, and less important.  Only type declarations accessible within the
# same top-level construct or via package use statements are taken into
# account.  And it is assumed that each type designation can only contain one
# user-defined type.
# -> Top-level construct containing the following declarations
#    List of typed declarations possibly referencing user-defined types
sub resolve_types
{
  my ($obj)= shift;
  my %resolved;

  return unless @_;
  my @puses= reverse grep $_->{package}, @{$obj->{uses}};
  my @puses2= grep $_->{name} =~ tr/././ == 1, @puses;
  my @puses3= grep $_->{name} =~ tr/././ == 2, @puses;
  @puses= ();
  for my $typed (@_) {
    my $typeexpr= $typed->{$typed->{type} eq "type" ? "definition" : "subtype"};
    next unless $typeexpr;
    my @ids= grep ! $no_usertypes{$_}, map lc($_), $typeexpr =~ /$SID/g;
    for my $id (@ids) {
      my $typedef= resolve_minordecl($id, "type", $obj, \@puses2, \@puses3, \%resolved);
      $typed->{typedef}= $typedef, last if $typedef;
    }
  }
}


# Resolve instances of generic functions and procedures.  This is similar to
# but simpler than resolving types.  As for type declarations, generic
# subprogram declarations are searched for in the same top-level construct and
# in packages accessible by use statements.
# -> Top-level construct containing the following instances
#    List of instances of generic subprograms; all have to have an
#    "instanceofname" entry
sub resolve_genfunc
{
  my ($obj)= shift;
  my %resolved;

  return unless @_;
  my @puses= reverse grep $_->{package}, @{$obj->{uses}};
  my @puses2= grep $_->{name} =~ tr/././ == 1, @puses;
  my @puses3= grep $_->{name} =~ tr/././ == 2, @puses;
  @puses= ();
  for my $inst (@_) {
    $inst->{instanceof}= resolve_minordecl($inst->{instanceofname},
                          $inst->{type}, $obj, \@puses2, \@puses3, \%resolved);
  }
}


# Try to merge the selected name in a package use clause with the selected name
# describing an entity, component, configuration or similar.  The rightmost
# part of the use clause name has to be the same as the leftmost part of the
# entity selected name, or the rightmost part of the use clause name has to be
# "all" for this to succeed.  The total number of components (separated by ".")
# of the result must be at most 3.
# -> Selected name from use clause
#    Selected name of object
# <- Merged name or undef
sub merge_selname
{
  my ($suse, $sobj)= @_;
  my $selname;

  $suse =~ s/\.all$//i;
  $selname= "$suse.$sobj";
  $selname =~ s/\.([^.]+)\.\1(\.|$)/.$1$2/i;
  return ($selname =~ tr/././) <= 2 ? $selname : undef;
}


# Primary design units we document and their doc subdirectories:
my %unitdirs= ( "entity" => "entities", "architecture" => "architectures",
                "configuration" => "configurations", "context" => "contexts",
                "package" => "packages", "packagebody" => "packages" );

{

# Table of selected names.  Those tables which will be searched are initialised
# up-front to avoid "can't use undef as hash ref" errors.
my %selnames= map { $_ => {}; } (keys(%unitdirs), qw(component type psl function procedure));
# Dummy scalar the reference to which indicates that multiple objects with that
# name and type exist.
my $multiple;

# Add objects to the table of selected names applicable for their type.
# -> Prefix (for top-level constructs, this is the library name, for
#    declarations in packages, this is "library.package")
#    List of objects
sub add_selnames
{
  my $prefix= shift;

  for (@_) {
    my $table= $selnames{$_->{type}};
    if( $table->{lc($_->{name})} ) {
      $table->{lc($_->{name})}= \$multiple;
    }
    else {
      $table->{lc($_->{name})}= $_;
    }
    $table->{lc("$prefix.$_->{name}")}= $_;
  }
}


# Find the object denoted by a selected name.
# -> Name of the object
#    Type of the object (if empty or undef, all tables will be searched)
#    optional: Prefix (such as library of a top-level object or
#    "library.package" for declarations in a package)
# <- Reference to object hash if found; undef if not found; defined but false
#    (0) if ambiguous and no prefix given
sub find_selname
{
  my ($name, $type, $prefix)= @_;

  if( $type ) {
    return undef unless $selnames{$type};
    my $obj= $selnames{$type}{lc($name)};
    return $obj if $obj && $obj != \$multiple;
    return ($obj ? 0 : undef) if !$prefix;
    return $selnames{$type}{lc("$prefix.$name")};
  }
  # Try all types if type is not given:
  my @alltypes= keys %unitdirs;
  # Top-level design units first, then minor declarations
  push @alltypes, grep ! $unitdirs{$_}, keys %selnames;
  for my $t (@alltypes) {
    my $obj= find_selname($name, $t, $prefix);
    return $obj if $obj;
  }
  return undef;
}

}


# Try to resolve @see cross references to design elements.  This function
# should only be called when the "docfilename" and "doclink" entries of various
# possible reference targets have already been defined.
# -> Reference to array of references to arrays containing the cross reference
#    in their first element
#    (optional) Name of the current library
# (<-) For those references which are resolved, the second element of the array
#    will contain a reference to the target object's hash.  The third element
#    will contain a hyperlink to the target's description.
sub resolve_seealso
{
  my ($seeary, $libname)= @_;

  for my $see (@$seeary) {
#TODO: search for types in intelligent order rather than using type ""
    my $candidate= find_selname($see->[0], "", $libname);
    next unless $candidate;
    $see->[1]= $candidate;
    if( $unitdirs{$candidate->{type}} ) {
      $see->[2]= "../$unitdirs{$candidate->{type}}/$candidate->{docfilename}";
    }
    elsif( $candidate->{doclink} ) {  # declarative item in a package
      $see->[2]= $candidate->{doclink};
    }
  }
}


# Assign references to corresponding declarative items to the "for" and "use"
# statements in a configuration.
# -> Reference to hash representing configuration
#    Reference to hash mapping library names to references to arrays of their
#    declarations
sub resolve_configuration
{
  my ($conf, $libhash)= @_;
  my $ent;
  my $libname;
  my @topfors;
  my @todo;
  my @forothers;

  return unless $ent= $conf->{entity};
  $libname= $conf->{file}{libname};
  @topfors= grep $_->{type} eq "for" && $_->{subtype} eq "architecture",
                        @{$conf->{children}};
  @topfors= grep { my $for= $_;
                  ($for->{object})= grep lc($_->{name}) eq lc($for->{objname}),
                                        @{$ent->{architectures}};
                } @topfors;
  for my $for (@topfors) {
    push @todo, map( [ $_, $for->{object}, $for ],
                        find_children($for, "type", "for"));
  }
  while( @todo )
  {
    my $triplet;
    my $for;
    my $parentdecl;

    $triplet= pop @todo;
    ($for, $parentdecl)= @$triplet;
    if( $for->{subtype} eq "architecture" ) {
      # Configuration of an architecture or of a generate or block statement
      if( $parentdecl->{type} eq "architecture" && 
                        lc($for->{objname}) eq lc($parentdecl->{name}) ) {
        $for->{object}= $parentdecl;
      }
      else {
        my @candidates= grep $_->{type} =~ /^(?:generate|block)$/,
                find_children($parentdecl, "name", $for->{objname});
        @candidates= grep $_->{subname} && lc($_->{subname}) eq lc($for->{subname}), @candidates
            if $for->{subname};
        $for->{object}= $candidates[0];
      }
      my @newfors= find_children($for, "type", "for");
      push @todo, map( [ $_, $for->{object}, $for ], @newfors);
    }
    else {
      my @candidates= find_all($parentdecl, "type", "instance");
      @candidates= grep $_->{subtype} eq "component", @candidates;
      @candidates= grep lc($_->{objname}) eq lc($for->{objtype}), @candidates;
      if( lc($for->{objnames}[0]) eq "others" ) {
        push @forothers, $triplet;
      }
      elsif( lc($for->{objnames}[0]) ne "all" ) {
        @candidates= grep { my $cand= $_;
                    grep lc($_) eq lc($cand->{name}), @{$for->{objnames}};
                      } @candidates;
      }
      $for->{objects}= \@candidates;
      my ($use)= find_children($for, "type", "use");
      $for->{use}= $use;
      if( $use && $use->{subtype} ne "open" ) {
        $for->{bindname}= $use->{name};
        $use->{object}= find_selname($use->{name}, $use->{subtype},
                                          $libname);
        $for->{binding}= $use->{object};
        if( $use->{subtype} eq "entity" && $for->{binding} ) {
          $for->{bindname}= $for->{binding}{fullname};
          if( $use->{archname} ) {
            $for->{archname}= $use->{archname};
            ($for->{bindarch})= ($use->{architecture})=
                grep lc($_->{name}) eq lc($use->{archname}),
                      @{$for->{binding}{architectures}};
          }
          elsif( @{$for->{binding}{architectures}} ) {
            ($for->{bindarch})= @{$for->{binding}{architectures}};
            $for->{archname}= $for->{bindarch}{name};
          }
          if( $for->{bindarch} ) {
            my @newfors= find_children($for, "type", "for");
            push @todo, map( [ $_, $for->{bindarch}, $for ], @newfors);
          }
        }
        $for->{bindgen}= $use->{genericmap};
      }
      else {
        $for->{bindgen}= $for->{genericmap};
      }
    }
  }
  for my $triplet (@forothers) {
    my ($for, undef, $parent)= @$triplet;
    my @siblings= find_children($parent, "type", "for");
    for my $sibl (@siblings) {
      next if $sibl == $for;
      for my $obj (@{$for->{objects}}) {
        $obj= undef if grep($_ == $obj, @{$sibl->{objects}});
      }
    }
    @{$for->{objects}}= grep defined($_), @{$for->{objects}};
  }
}


# Search for an equivalent of a child hierarchy node in an array of other child
# or top-level nodes.  This is used to prevent duplicate instantiations in the
# instantiation hierarchy.  The comparison performed is slightly asymmetrical
# as required in the situations where this function is used: Child nodes
# representing configuration instantiations need not have been resolved yet (=
# have an entity and architecture assigned to them), but top-level
# configuration nodes in the array may have.  (See the third argument, though.)
# -> Reference to the hash representing the child node
#    Reference to the array of hash references representing the other nodes
#    optional: if 1, the "confname" and "configuration" entries of the first
#    argument are ignored, and the comparison is based solely on the
#    entity and architecture to which the configuration node has been resolved.
# <- The hash reference of the node from the array if an equivalent node has
#    been found; otherwise undef
sub grep_hier
{
  my ($child, $ary, $ignoreconf)= @_;
  my $result;

  if( !$ignoreconf && $child->{confname} ) {
    if( $child->{configuration} ) {
      ($result)= grep $_->{configuration} &&
                    $_->{configuration} == $child->{configuration}, @$ary;
    }
    else {
      ($result)= grep !$_->{configuration} && $_->{confname} &&
                      lc($_->{confname}) eq lc($child->{confname}), @$ary;
    }
  }
  elsif( $child->{architecture} ) {
    ($result)= grep $_->{architecture} && !$_->{confname} &&
                    $_->{architecture} == $child->{architecture}, @$ary;
  }
  elsif( $child->{entity} ) {
    ($result)= grep $_->{entity} && !$_->{architecture} &&
                !$_->{confname} && $_->{entity} == $child->{entity} &&
          lc($_->{archname} || "") eq lc($child->{archname} || ""), @$ary;
  }
  else {
    ($result)= grep !$_->{entity} && !$_->{architecture} &&
         !$_->{confname} && lc($_->{entname}) eq lc($child->{entname}) &&
         lc($_->{archname} || "") eq lc($child->{archname} || ""), @$ary;
  }
  return $result;
}


# Compares two sub-hierarchies of instantiations.  Children are compared in
# order, which is sufficient if equal subtrees were generated by the same
# algorithm.
# -> Two hierarchy nodes which are the roots of the sub-hierarchies to be
#    compared.
# <- 1 if equal, 0 otherwise
sub hier_equal
{
  my ($node1, $node2)= @_;

  return 1 if $node1 == $node2;
  return 0
      if ($node1->{configuration} || 0) != ($node2->{configuration} || 0);
  return 0 if lc($node1->{confname} || "") ne lc($node2->{confname} || "");
  return 1 if $node1->{proxy} && $node2->{proxy} &&
                $node1->{proxy} == $node2->{proxy};
  return 0
        if ($node1->{architecture} || 0) != ($node2->{architecture} || 0);
  return 0 if ($node1->{entity} || 0) != ($node2->{entity} || 0);
  return 0 if lc($node1->{archname} || "") ne lc($node2->{archname} || "");
  return 0 if lc($node1->{entname} || "") ne lc($node2->{entname} || "");
  return 0 if $#{$node1->{children}} != $#{$node2->{children}};
  for my $ind (0..$#{$node1->{children}}) {
    return 0 unless hier_equal($node1->{children}[$ind],
                                $node2->{children}[$ind]);
  }
  return 1;
}


# Comparison between instantiation hierarchy nodes for use with the sort
# function.  The comparison criteria in descending order of priority are entity
# name, architecture name and configuration name.
# (->) Global variables $a and $b, provided by sort, are interpreted as
#      references to hashes representing instantiation hierarchy nodes.
# <- <0 if $a "<" $b etc.
sub hier_sort_cmp
{
  my $last= "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz";
  my $result;

  if( $result= (lc($a->{entname} || $last) cmp
                lc($b->{entname} || $last)) ) {
    return $result;
  }
  if( $result= (lc($a->{archname} || $last) cmp
                lc($b->{archname} || $last)) ) {
    return $result;
  }
  return lc($a->{confname} || $last) cmp lc($b->{confname} || $last);
}


# Find all for statements referring to an instance at the current level of a
# configuration.
# -> Reference to hash representing a configuration or a for statement in a
#    configuration
# <- Reference to array containing references to hashes representing the for
#    statements.  Only the next-level instance for statements are returned, no
#    nesting.  But intermediate for statements referring to block or generate
#    statements are searched.
sub find_forinsts
{
  my ($root)= @_;
  my @results;

  for my $for (grep $_->{type} eq "for", @{$root->{children}}) {
    if( $for->{subtype} eq "instance" ) {
      push @results, $for;
    }
    else {
      push @results, find_forinsts($for);
    }
  }
  return @results;
}


# Build a part of the instantiation hierarchy from a configuration
# instantiation
# -> Reference to the hierarchy node corresponding to a configuration
#    instantiation which has been resolved
#    Reference to array of all hierarchy nodes representing architectures
#    Reference to array of all hierarchy nodes representing configurations
# (<-) Nodes corresponding to bindings given in the configuration are entered
#    into the hierarchy and equal existing nodes marked as instantiated
sub configure_hierarchy
{
  my ($node, $ahier, $chier)= @_;
  my $conf= $node->{configuration};

  $node->{entity}= $conf->{entity}, 
  $node->{entname}= $conf->{entity} ? $conf->{entity}{fullname} : $conf->{objname};
  my ($topfor)= @{$conf->{childtype}{for} || []};
  unless( $topfor && $topfor->{subtype} eq "architecture" ) {
    # Pathological case #1: empty configuration body - bind entity to its
    # first architecture.
    if( $node->{entity}{architectures}[0] ) {
      $node->{architecture}= $node->{entity}{architectures}[0];
      $node->{archname}= $node->{architecture}{name};
      if( my ($anode)= grep_hier($node, $ahier, 1) ) {
        $node->{proxy}= $anode;
        $anode->{instantiated}= 1;
      }
    }
    return;
  }
  $node->{archname}= $topfor->{objname};
  $node->{architecture}= $topfor->{object};
  configure_hierarchy_arch($topfor, $node, $ahier, $chier);
}


# Build part of the instantiation hierarchy from one architecture-related for
# statement in a configuration
# -> Reference to hash representing the for statement (which has been resolved)
#    Reference to the hierarchy node representing the architecture (either the
#    topmost architecture node in the configuration or the parent node
#    representing an instance for statement)
#    Reference to array of all hierarchy nodes representing architectures
#    Reference to array of all hierarchy nodes representing configurations
# (<-) Nodes representing instance-related for statements of this
#    architecture-related for statement are created recursively, and other
#    instantiated entities and configurations are also listed as children.
sub configure_hierarchy_arch
{
  my ($for, $node, $ahier, $chier)= @_;

  my @nextfors= grep($_->{use}, find_forinsts($for));
  unless( @nextfors ) {
    # Pathological case #2: empty architecture for statement - bind entity to
    # this architecture.
    if( my ($anode)= grep_hier($node, $ahier, 1) ) {
      $node->{proxy}= $anode;
      $anode->{instantiated}= 1;
    }
    return;
  }
  my $arch= $node->{architecture};
  unless( $arch ) {
    for my $nfor (@nextfors) {
      push @{$node->{children}}, 
                configure_hierarchy_for($nfor, $node, $ahier, $chier);
    }
    return;
  }
  $node->{children}= [];
  my @archildren;
confarchinst:
  for my $inst (@{$arch->{allinstances}}) {
    my $new;
    for my $ind (0..$#nextfors) {
      my $nfor= $nextfors[$ind];
      if( grep($_ == $inst, @{$nfor->{objects}}) ) {
        next confarchinst if $nfor->{hier_done};
        $nfor->{hier_done}= 1;
        $new= configure_hierarchy_for($nfor, $node, $ahier, $chier);
        push @{$node->{children}}, $new
                unless grep hier_equal($new, $_), @{$node->{children}};
        next confarchinst;
      }
    }
    if( $inst->{subtype} eq "configuration" || ($inst->{binding} &&
        $inst->{binding}{type} eq "configuration") ) {
      if( $inst->{binding} ) {
        ($new)= grep $_->{configuration} == $inst->{binding}, @$chier;
        $new->{instantiated}= 1;
      }
      else {
        $new= { confname => $inst->{objname} };
      }
    }
    else {
      if( $inst->{binding} ) {
        if( $inst->{bindarch} && (my ($anode)=
            grep($_->{architecture} == $inst->{bindarch}, @$ahier)) ) {
          $new= $anode;
          $anode->{instantiated}= 1;
        }
        else {
          $new= { entity => $inst->{binding},
                  entname => $inst->{bindname},
                  architecture => $inst->{bindarch}, 
                  archname => $inst->{archname} };
        }
      }
      else {
        $new= { entname => $inst->{bindname} || $inst->{objname},
                archname => $inst->{archname} };
      }
    }
    unless( grep_hier($new, \@archildren) ) {
      push @{$node->{children}}, $new;
      push @archildren, $new;
    }
  }
  for (@nextfors) {
    undef $_->{hier_done};
  }
}


# Build a part of the instantiation hierarchy from one instance-related for
# statement in a configuration
# -> Reference to hash representing the for statement (which has been resolved)
#    Reference to the hierarchy node representing the configuration or a
#    different node with the right confname and configuration entries
#    Reference to array of all hierarchy nodes representing architectures
#    Reference to array of all hierarchy nodes representing configurations
# <- Node (reference to hash) representing the instantiation bound by this for
#    statement
sub configure_hierarchy_for
{
  my ($for, $confnode, $ahier, $chier)= @_;
  my $use= $for->{use};
  my $node;

  if( $use->{subtype} eq "configuration" ) {
    $node= { confname => $use->{name},
              configuration => $for->{binding} };
    if( my ($cnode)= grep_hier($node, $chier) ) {
      $cnode->{instantiated}= 1;
      return $cnode;
    }
  }
  else {
    my $arch= $for->{bindarch};
    $node= { entity => $for->{binding},
             entname => $for->{bindname} || $use->{name},
             architecture => $arch, archname => $for->{archname},
             configuration => $confnode->{configuration},
             confname => $confnode->{confname} };
    my ($archfor)= grep lc($_->{objname}) eq lc($node->{archname}),
                                find_children($for, "type", "for");
    if( $archfor ) {
      configure_hierarchy_arch($archfor, $node, $ahier, $chier);
    }
    else {
      if( my ($anode)= grep_hier($node, $ahier, 1) ) {
        $node->{proxy}= $anode;
        $anode->{instantiated}= 1;
      }
    }
  }
  return $node;
}


# Returns the maximal depth of a part of the instantiation hierarchy
# -> Reference to the hash which is the root of the part-hierarchy
# <- Depth (0 if the root has no children, and so on).  Recursive instantiation
#    is cut off after the first node which indicates it.
sub hier_max_depth
{
  my ($root, $trace)= @_;
  my $maxd= 0;
 
  $trace ||= [];
  if( $root->{proxy} ) {
    return hier_max_depth($root->{proxy}, $trace);
  }
  if( !$root->{children} || !@{$root->{children}} ||
                                grep($_==$root, @$trace) ) {
    return 0;
  }
  push @$trace, $root;
  for my $child (@{$root->{children}}) {
    my $childd= hier_max_depth($child, $trace);
    $maxd= $childd if $maxd < $childd;
  }
  pop @$trace;
  return $maxd+1;
}


# Parse the strings from the --topmodule option.
# (->) $config{topmodules}
# (<-) $config{topmodhash} has (selected) entity names as keys and  a scalar
#      1 or an array ref of two hashes as value.  These hashes contain the
#      names of architectures and configurations as keys, respectively.
sub parsetopmods
{
  my %topmods;

  for (@{$config{topmodules}}) {
    if( /^([\w\.]+)(?:\((\w+)\)|\[(\w+)\])?$/ ) {
      my ($ent, $arch, $conf)= (lc($1), lc($2 || ""), lc($3 || ""));
      $ent= "work.$ent" unless $ent =~ /\./;
      next if $topmods{$ent} && !ref($topmods{$ent});
      if( $arch ) {
        $topmods{$ent}[0]{$arch}= 1;
      }
      elsif( $conf ) {
        $topmods{$ent}[1]{$conf}= 1;
      }
      else {
        $topmods{$ent}= 1;
      }
    }
    else {
      print STDERR "Warning: Ignoring invalid top module specification \`$_'.\n",
      "The format is: <entity>(<architecture>) or <entity>[<configuration>].\n"
            unless $config{quiet};
    }
  }
  $config{topmodhash}= \%topmods;
}


# Generate lists of user-designated top modules and other uninstantiated
# hierarchy nodes.
# -> Reference to array of hierarchy nodes
# <- List of two array references containing designated top modules and other
#    uninstantiated modules, respectively
sub topmodules
{
  my ($hier)= @_;
  my (@tops, @uninst);
  my %done;

  for my $node (@$hier) {
    my $topflag= $config{topmodhash}{lc($node->{entname})};
    if( ref $topflag ) {
      $topflag= ($topflag->[0] && $node->{archname} && $topflag->[0]{lc($node->{archname})}) ||
                ($topflag->[1] && $node->{confname} && $topflag->[1]{lc($node->{confname})});
    }
    next if !$topflag && $node->{instantiated};
    if( $topflag ) {
      push @tops, $node;
    }
    else {
      push @uninst, $node;
    }
    next if $done{$node};
    my @newdone= ($node);
    do {
      @done{@newdone}= (1) x @newdone;
      @newdone= ( map { @{$_->{children} || []}; } @newdone );
      @newdone= grep ! $done{$_}, @newdone;
    }
    while( @newdone );
  }
  if( keys(%done) < @$hier ) {
    my @cycles= grep ! $done{$_}, @$hier;
    do {
      my $node= shift @cycles;
      push @uninst, $node;
      my @newdone= ($node);
      do {
        @done{@newdone}= (1) x @newdone;
        @newdone= ( map { @{$_->{children} || []}; } @newdone );
        @newdone= grep ! $done{$_}, @newdone;
      }
      while( @newdone );
      @cycles= grep ! $done{$_}, @cycles;
    }
    while( @cycles );
  }
  if( ! $config{quiet} ) {
    delete @{$config{topmodhash}}{map lc($_->{entname}), @tops};
    if( %{$config{topmodhash}} ) {
      my @misses;
      for my $ent (keys %{$config{topmodhash}}) {
        if( ref($config{topmodhash}{$ent}) ) {
          push @misses, map "$ent\($_)", keys %{$config{topmodhash}{$ent}[0]}
              if $config{topmodhash}{$ent}[0];
          push @misses, map "$ent\[$_]", keys %{$config{topmodhash}{$ent}[1]}
              if $config{topmodhash}{$ent}[1];
        }
        else {
          push @misses, $ent;
        }
      }
      print STDERR "Warning: Designated top module", (@misses > 1 ? "s ":" "),
            cswordlist(" and ", @misses), " not found.\n";
    }
  }
  return (\@tops, \@uninst);
}


#sectionoutput################################################################
##############################################################################
####                    Output functions
##############################################################################
##############################################################################

# classes and <span> tags for VHDL language elements:
my $SPDOC= "<span class=\"doccom\">";       # documentation comment text
my $SPDO= "<span class=\"vhdlcom\">";       # other comment text
my $SPID= "<span class=\"identifier\">";    # identifier
$VID= "<var class=\"vhdlcode identifier\">";# identifier in <var> tag
my $SPTYID= "<span class=\"typeid\">";      # type identifier
my $SPDID= "<span class=\"declid\">";       # identifier of this declaration
my $SPPID= "<span class=\"pslid\">";        # PSL identifier
my $SPSTR= "<span class=\"vhdlstr\">";      # quoted (bit) string or bit
my $SPIO= "<span class=\"vhdlio\">";        # in, out, inout
my $SPVA= "<span class=\"vhdlvar\">";       # signal, constant, variable, attr.
my $SPDCL= "<span class=\"vhdldecl\">";     # declarative item
my $SPWD= "<span class=\"vhdlword\">";      # other VHDL reserved word
my $SPPSL= "<span class=\"pslword\">";      # PSL reserved word
my $SPIE= "<span class=\"vhdlieee\">";      # standard package word
my $SPIET= "<span class=\"vhdlieee typeid\">"; # standard package type
my $CCO= " class=\"vhdlcode\"";
my $SPCO= "<span class=\"vhdlcode\">";      # encloses all VHDL code
my $SPNC= "<span class=\"nocode\">";        # non-code within class vhdlcode
my $SP_= "</span>";

# other tags that allow CSS customisation:
my $ARDCL= " class=\"vhdlcode archdecl\"";  # top line of minor declarations ..
my $PCDCL= " class=\"vhdlcode packdecl\"";  # .. in architecture / package
my $DIVDESC= "<div class=\"bigdesc\">";     # description of major design element
my $SPBRIEF= "<span class=\"bigbrief\">";    # brief description of design element
my $CLSDESC= " class=\"smdesc\"";           # description of declaration
my $CLSBRF= " class=\"smbrief\"";           # brief description of declaration
my $DIVPSUM= "<div class=\"packsum\">";     # package summary section
my $STDTAB= "<table class=\"vhdocltab\" border=\"0\" cellpadding=\"3\">";   # major layout table
my $SUMTAB= "<table class=\"vhdocltab packsum\" border=\"0\" cellpadding=\"3\">";   # package summary table
my $TDI= "<td class=\"vhdoclind\" width=\"50\"></td>";  # indentation in tables


# Search for data directory containing style folder in standard locations and
# at the environment variable VHDOCL_DATADIR if available.
# <- Path to style directory or undef if not found
sub getstyledatadir
{
  my @locations;

  if( $^O ne "MSWin32" && $^O ne "MacOS" ) {
    @locations= ("/usr/local/share/vhdocl/style", "/usr/share/vhdocl/style");
  }
  unshift @locations, File::Spec->catdir($ENV{VHDOCL_DATADIR}, "style")
      if $ENV{VHDOCL_DATADIR};
  my ($firstex)= grep -d $_, @locations;
  return $firstex;
}


# Try to create output directories if they do not yet exist, and localise the
# file name of style sheet and logos relative to the output directory if
# applicable.  The function dies if it cannot create the directories.
# (<->) %config
sub prepareoutput
{
  my $dir= $config{absoutputdir};
  my @subdirs;
  my $mkpatherr;

  File::Path::mkpath( $dir, { error => \$mkpatherr } );
  croak "Cannot create output directory `$dir' - ".(values %{$$mkpatherr[0]})[0] if @$mkpatherr;
  @subdirs= map File::Spec->catdir($dir, $_), values(%unitdirs), "sources", "style";
  push @subdirs, File::Spec->catdir($dir, "latex")
      if $config{texout};
  for my $subdir (@subdirs)
  {
    next if -d $subdir && -w $subdir;
    croak "Cannot create output directory `$subdir' - the name exists and is no writable directory!"
        if -e $subdir;
    mkdir($subdir) or croak "Cannot create output directory `$subdir' - $!";
  }
  my $styledir= File::Spec->catdir($dir, "style");
  my $styledatadir= getstyledatadir();
  if( $styledatadir ) {
    my $copyerr= 0;
    while( my ($key, $file)= each(%requisites) ) {
      $copyerr ||= ! copyfile(File::Spec->catfile($styledatadir, $file),
                                  $styledir);
    }
    if( $copyerr && !$config{quiet} ) {
      print STDERR "Error copying some style files.  Continuing regardless.\n";
    }
  }
  else {
    print STDERR "Style data directory not found.  Cannot copy style files.  Continuing regardless.\n";
    print STDERR <<EOF unless $config{quiet};
This error can occur if VHDocL auxiliary data were installed to a non-standard
location but the VHDOCL_DATADIR environment variable was not set.  Ask the
person who installed VHDocL for you to set this variable appropriately.
EOF
  }
  # Now copy all style files not given as URLs
  for my $item ("stylesheet", "leftlogo", "rightlogo") {
    if( $config{$item} ) {
      $config{$item."url"}= $config{$item} =~ /^\w+:\/\//;
      if( !$config{$item."url"} ) {
        my $destname= "$config{prefix}$item." . fileext($config{$item});
        if( ! copyfile($config{$item}, File::Spec->catfile($styledir, $destname)) ) {
          print STDERR "Could not copy `$config{$item}' to style",
                    " directory.  Continuing regardless.\n"
            unless $config{quiet};
        }
        else {
          $config{$item}= "style/$destname";
        }
      }
    }
  }
  if( $config{custom} ) {
    my $ind= 1;
    for my $cus (@{$config{custom}}) {
      if( ! defined $$cus[0] ) {
        print STDERR "Warning: No link text given for custom page \`$$cus[1]'.\n"
            unless $config{quiet};
        $$cus[0]= "Custom $ind";
      }
      $$cus[2]= $$cus[1] =~ /^\w+:\/\// || File::Spec->file_name_is_absolute($$cus[1]);
      if( $$cus[2] && $$cus[1] !~ /^\w+:\/\// ) {
        print STDERR "Warning: Absolute file name for custom page \`$$cus[1]'",
             " will not be portable across systems.\n" unless $config{quiet};
      }
      $$cus[1]= File::Spec->abs2rel($$cus[1], $dir)
          unless $$cus[2];
      ++$ind;
    }
  }
  if( $config{toplink} ) {
    print STDERR "Warning: --homehtml is pointless when --toplink is present.  The home page will not be generated.\n"
        if $config{homehtml} && !$config{quiet};
    $config{toplinktext}= $config{toplink}[-1][0] || "Home";
    $config{toplink}= $config{toplink}[-1][1];
    $config{toplinkabs}= $config{toplink} =~ /^\w+:\/\// ||
             File::Spec->file_name_is_absolute($config{toplink});
    if( $config{toplinkabs} && $config{toplink} !~ /^\w+:\/\// ) {
      print STDERR "Warning: Absolute top link file name will not be",
                   " portable across systems.\n" unless $config{quiet};
    }
    $config{toplink}= File::Spec->abs2rel($config{toplink}, $dir)
        unless $config{toplinkabs};
  }
  else {
    $config{toplink}= "$config{prefix}index.html";
    $config{toplinktext}= "Home";
    $config{toplinkabs}= 0;
    my $fname= "$config{outputdir}/$config{toplink}";
    open INDEX, ">$fname" or croak "Could not create index.html.\n";
    printhtmlheader(*INDEX{IO}, "Home", 1);
    my $homecontent= gethtml($config{homehtml});
    print INDEX ($homecontent ? "$homecontent\n<hr>\n" : "<p></p>\n");
    printhtmlfooter(*INDEX{IO}, 1);
    close INDEX;
  }
  if( $config{cellpadding} ) {
    $STDTAB= "<table class=\"vhdocltab\" border=\"0\" cellpadding=\"" .
             "$config{cellpadding}\">";
    print STDERR <<EOF;
Warning: The option -c / --cellpadding is deprecated and may be removed.
Instead, use the --stylefile option with a file containing something like:
table.vhdocltab td { padding:3px; }
EOF
  }
  if( $config{indentation} ) {
    $TDI= "<td class=\"vhdoclind\" width=\"$config{indentation}\"></td>";
    print STDERR <<EOF;
Warning: The option -i / --indentation is deprecated and may be removed.
Instead, use the --stylefile option with a file containing something like:
*.vhdoclind { width:50px; }
EOF
  }
}


{
my ($commonhead_pre, $commonhead_global, $commonhead_nonglobal);

# Print the header of an HTML documentation file
# -> File handle or scalar reference to print to
#    Page title
#    Global page flag, !=0 for entity list, instantiation hierarchy, etc., and
#    0 for documentation of single entity, architecture etc.
sub printhtmlheader
{
  my ($handle, $title, $global)= @_;

  if( ! defined $commonhead_pre ) {
    $commonhead_pre= "<html>\n<head>\n    <title>";
  }
  if( ! defined ($global ? $commonhead_global : $commonhead_nonglobal) ) {
    my $prepre= ($global? "": "../");
    my $prefix= $prepre . $config{prefix};
    my ($top, $doctitle, $stylesheet, $leftlogo, $rightlogo, $toplink, $custom, $common);

    $doctitle= length($config{title})?
                  "\n<center>$config{title}</center><hr>\n" : "";
    $stylesheet= "<link rel=\"stylesheet\" type=\"text/css\" " .
                 "href=\"${prepre}style/$requisites{basestyle}\">";
    if( $config{stylesheet} ) {
      $top= $config{stylesheeturl}? "" : $prepre;
      $stylesheet .= "\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"" .
                     "$top$config{stylesheet}\">";
    }
    $top= $config{leftlogourl}? "" : $prepre;
    $leftlogo= $config{leftlogo} ?
     "<img style=\"vertical-align:middle\" src=\"$top$config{leftlogo}\">" : "";
    $top= $config{rightlogourl}? "" : $prepre;
    $rightlogo= $config{rightlogo} ?
    "<img style=\"vertical-align:middle\" src=\"$top$config{rightlogo}\">" : "";
    $top= $config{toplinkabs}? "" : $prepre;
    $toplink= $config{toplink}?  "<a href=\"$top$config{toplink}" .
              "\">$config{toplinktext}</a>\n&nbsp;&nbsp; -- &nbsp;&nbsp;" : "";
    $custom= join "", map "&nbsp;&nbsp; -- &nbsp;&nbsp;<a href=\"" .
                          ($$_[2] ? "" : $prepre) . "$$_[1]\">$$_[0]</a>",
                      @{$config{custom} || []};

    $common= <<EOF;
</title>
    $stylesheet
</head>
<body>
$doctitle
<table border="0" width="100%"><tr><td align="left">
$leftlogo
</td><td align="center">
$toplink
<a href="${prefix}hierarchy.html">Hierarchy</a>
&nbsp;&nbsp; -- &nbsp;&nbsp;
<a href="${prefix}packages.html">Packages</a>
&nbsp;&nbsp; -- &nbsp;&nbsp;
<a href="${prefix}entities.html">Entities</a>
&nbsp;&nbsp; -- &nbsp;&nbsp;
<a href="${prefix}instantiations.html">Instantiations</a>
&nbsp;&nbsp; -- &nbsp;&nbsp;
<a href="${prefix}sources.html">Sources</a>
$custom
</td><td align="right">
$rightlogo
</td></tr></table>

<hr>

EOF
    ($global ? $commonhead_global : $commonhead_nonglobal) = $common;
  }
  my $html= $commonhead_pre . $title . ($global ? $commonhead_global : $commonhead_nonglobal);
  if( ref($handle) eq "SCALAR" ) {
    $$handle= $html;
  }
  else {
    print $handle $html;
  }
}

}


{
my @monthname= qw( Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec );
my $footer;

# Print the footer of a HTML documentation file
# -> File handle to print to
#    Optional flag indicating that the vertical bar should be omitted
sub printhtmlfooter
{
  my ($handle, $nobar)= @_;

  if( ! defined $footer ) {
    my ($sec,$min,$hour,$mday,$mon,$year)= localtime(time);

    $year += 1900;
    $mon= $monthname[$mon];
    $min= sprintf("%02d", $min);
    $sec= sprintf("%02d", $sec);
    $footer= <<EOF;

$config{footer}
Generated on $mday $mon $year $hour:$min:$sec with <a
href="http://www.volkerschatz.com/hardware/vhdocl.html">VHDocL</a>
V$version

</body>
</html>
EOF
  }
  print $handle "\n<hr>\n" unless $nobar;
  print $handle $footer;
}

}


# Escape HTML's reserved characters.
# -> Text
# <- Text with &<>" escaped
sub html_esc
{
  my ($string)= @_;

  $string =~ s/&/&amp;/g;
  $string =~ s/</&lt;/g;
  $string =~ s/>/&gt;/g;
  $string =~ s/"/&quot;/g;
  return $string;
}


# Strings: \x04 stands for double quotes which are later converted to `&quot;',
# unlike those enclosing the class names.
my $MARKQUOT= qr/(?:\b[box])?\x04[^\x04]*\x04|'[^']'/i;
# Lists of words belonging to CSS classes:
my @IOWORDS= qw( in out inout buffer linkage );
my @VARWORDS= qw( constant signal variable file attribute );
# "use" is now included in @DECLWORDS, even though this is only really correct
# for package use statements.
my @DECLWORDS= qw( entity architecture configuration package body
function procedure subtype type library component use context );
my @OTHERWORDS= qw( begin pure impure postponed guarded if then else
elsif for generate while until loop next case when group exit block process
array units record with port generic map open null all others range not and
nand or xor xnor mod rem sla sll sra srl ror rol assert report severity 
is return to downto on of after wait bus new alias force release abs
select reject literal register transport inertial unaffected shared disconnect
access label end minimum maximum to_x01 to_x01z to_ux01 to_01 
parameter );
my @IEEEWORDS= qw( true false note warning error failure now foreign
read_mode write_mode append_mode open_ok status_error name_error mode_error
textio input output readline read writeline write oread owrite hread hwrite
endline bit bit_vector ieee std_logic_1164 to_bit to_bv to_sulv to_slv
to_bitvector to_stdulogic to_float to_ufixed to_sfixed to_real
to_stdulogicvector to_stdlogicvector rising_edge falling_edge is_x numeric_std
numeric_bit to_integer to_signed to_unsigned shift_left shift_right rotate_left
rotate_right resize std_logic_arith shl shr ext sext conv_integer conv_unsigned
conv_signed conv_std_logic_vector std_logic_misc and_reduce or_reduce
xor_reduce std_logic_unsigned std_logic_signed cond_op cond sh_left sh_right
align_size math_real math_e math_1_e math_pi math_1_pi math_log_of_2
math_log_of_10 math_log2_of_e math_log10_of_e math_sqrt2 math_sqrt1_2
math_sqrt_pi math_deg_to_rad math_rad_to_deg sign ceil floor fmax fmin uniform
srand rand get_rand_max sqrt cbrt exp log sin cos tan asin acos atan atan2 sinh
cosh tanh acosh atanh math_complex cbase_1 cbase_j czero cabs carg cmplx conj
csqrt cexp complex_to_polar polar_to_complex
bread bwrite sread swrite tee flush to_string to_hstring to_ostring to_bstring
to_binarystring to_octalstring to_hexstring justify std env stop finish
resolution_limit
);
my @IEEETYPES= qw( integer positive natural boolean real string character time
delay_length severity_level file_open_kind file_open_status line text side
std_ulogic std_ulogic_vector std_logic std_logic_vector x01 x01z ux01
ux01z small_int signed unsigned complex complex_vector complex_polar 
boolean_vector integer_vector real_vector time_vector );
# "width" is a type defined in textio, but has been removed, as it may often be
# used as a constant/variable name.
my @PSLWORDS= qw( abort always assume assume_guarantee before clock const
countones cover default endpoint eventually fairness fell forall inf inherit
isunknown never next next_a next_e next_event next_event_a next_event_e onehot
onehot0 property prev restrict restrict_guarantee rose sequence stable strong
union until vmode vprop vunit within );
# Note: assert, boolean, report have been left out, as they conflict with other
# classes.  Keywords ending with underscores are not caught by /$ID/ and are
# for now also left out.  Single- and two-character keywords are for now
# ignored too.
my %SPANCLASS= ( map( { $_ => $SPIO; } @IOWORDS),
                 map( { $_ => $SPVA; } @VARWORDS),
                 map( { $_ => $SPDCL; } @DECLWORDS),
                 map( { $_ => $SPWD; } @OTHERWORDS),
                 map( { $_ => $SPIE; } @IEEEWORDS),
                 map( { $_ => $SPIET; } @IEEETYPES) );
# Add IEEE types to exlusion hash set for resolve_types:
@no_usertypes{@IEEETYPES}= (1) x @IEEETYPES;

# Convert VHDL code to HTML with syntax markup expressed in CSS classes.
# -> VHDL code
# <- HTML with <span> tags of the appropriate classes
sub markvhdl
{
  my ($code)= @_;

  $code =~ tr/&<>"/\x01\x02\x03\x04/;
  $code =~ s/($MARKQUOT)|($ID)/
        $1 ? "$SPSTR$1$SP_" : ($SPANCLASS{lc($2)} || $SPID) . $2 . $SP_ /iexog;
  $code =~ s/\x01/&amp;/g;
  $code =~ s/\x02/&lt;/g;
  $code =~ s/\x03/&gt;/g;
  $code =~ s/\x04/&quot;/g;
  return $code;
}


# Mark up VHDL code between <code> .. </code> tags in HTML.  If some <code>
# tags are not closed, a start or end tag is added at the start or end of the
# string.
# <-> HTML string
sub markcodetag
{
  return unless $_[0] =~ /<\/?code>/i;
  $_[0] =~ s/^((.*?)<(\/?)code>)/$3 ? "<code$CCO>" . markvhdl($2) . "<\/code>" : $1/ie;
  $_[0] =~ s/<code>(.*?)<\/code>/"<code$CCO>" . markvhdl($1) . "<\/code>"/ieg;
  $_[0] =~ s/<code>(.*)$/"<code$CCO>" . markvhdl($1) . "<\/code>"/ie;
}


# Apply HTML markup to type name.  Calls markvhdl, and adds a link to the type
# definition if available.
# -> VHDL code describing a type
#    Reference to hash of the object that has this type, possibly including a
#    "typedef" field referencing the type definition object
# <- HTML markup of the type designation
sub marktype
{
  my ($code, $obj)= @_;

  $code= markvhdl($code);
  return $code unless $obj->{typedef} && $obj->{typedef}{doclink};
  $code =~ s/\b((?:\w+\.)*$obj->{typedef}{name})\b/<a href="$obj->{typedef}{doclink}">$1<\/a>/i;
  return $code;
}


# Print detailed description of entity etc.  List items starting with @li are
# converted to their HTML equivalent
# -> File handle to print to
#    Reference to array containing paragraphs and list items of description
sub printdescription
{
  my ($handle, $desc)= @_;
  my $listnow= 0;

  print $handle "$DIVDESC\n";
  for my $line (@$desc)
  {
    if( $line =~ s/^\@li\b\s*//i ) {
      if( !$listnow ) {
        print $handle "<ul>\n";
        $listnow= 1;
      }
      print $handle "<li>$line</li>\n";
    }
    else {
      if( $listnow ) {
        print $handle "</ul>\n";
        $listnow= 0;
      }
      print $handle "<p>\n$line\n</p>\n";
    }
  }
  print $handle "</ul>\n" if $listnow;
  print $handle "</div>\n";
}


# Print HTML fragment of file name and optional link to source file page and
# actual source file.  No newline is appended.
# -> File handle to print to
#    Reference to hash representing the declaration.  The "filename" entry must
#    exist.
sub printfileref
{
  my ($handle, $obj)= @_;

  if( $obj->{file} ) {
    print $handle "<a href=\"../sources/", $obj->{file}{docfilename},
          "\">", substr($obj->{filename}, $config{prepathlen}), "</a>";
    print $handle "&nbsp;&nbsp;&nbsp;<a href=\"",
          ($obj->{file}{link} =~ /^\w+:\/\// ? "":"../"),
           $obj->{file}{link}, "\">[source file]</a>"
        if defined $obj->{file}{link};
  }
  else {
    print $handle substr($obj->{filename}, $config{prepathlen});
  }
}


# Print the common part of an HTML file pertaining to an entity, architecture,
# configuration, package or context, below the header and headline.
# -> File handle to print to
#    Reference to hash representing the entity etc.
sub printobjhtml
{
  my ($handle, $obj)= @_;

  print $handle "<p><b>$SPBRIEF$obj->{doc}{brief}$SP_</b></p>\n" 
        if $obj->{doc}{brief};
  if( $obj->{filename} ) {
    print $handle "<p>Defined in ";
    printfileref($handle, $obj);
    print $handle "</p>\n";
  }
  for (qw(synthesis simulation testbench deprecated internal)) {
    print $handle "<h3><b>", ucfirst($_), "</b></h3>\n" if $obj->{doc}{$_};
  }
  print $handle "<p>\n";
  if( $obj->{doc}{author} ) {
    print $handle ($obj->{doc}{author} =~ /,|;|\band\b/?
                                        "Authors: " : "Author: ");
    print $handle $obj->{doc}{author}, "<br>\n";
  }
  print $handle "Date: $obj->{doc}{date}<br>\n"
        if $obj->{doc}{date};
  print $handle "Version: $obj->{doc}{version}<br>\n"
        if $obj->{doc}{version};
  print $handle "ID: $obj->{doc}{id}<br>\n"
        if $obj->{doc}{id};
  print $handle "</p>\n\n";
  if( $obj->{doc}{description} && @{$obj->{doc}{description}} ) {
    print $handle "<hr>\n\n<h2>Detailed description</h2>\n\n";
    printdescription($handle, $obj->{doc}{description});
  }
  if( $obj->{doc}{example} && @{$obj->{doc}{example}} ) {
    print $handle "<b>Example", (@{$obj->{doc}{example}} > 1 ? "s":""), ":</b> ";
    print $handle join(", ", @{$obj->{doc}{example}}), "\n";
  }
  if( $obj->{doc}{see} && @{$obj->{doc}{see}} ) {
    print $handle "<p>See also: ", join(", ", map( ($_->[2]?
            "<a href=\"$_->[2]\">$_->[0]</a>" : $_->[0]),
            @{$obj->{doc}{see}})), "</p>\n\n";
  }
  if( $obj->{attributes} && keys(%{$obj->{attributes}}) ) {
    print $handle "\n<h2>Attributes</h2>\n\n";
    printattrhtml($handle, $obj);
  }
}


my %labels= ( component => "comp:", instance => "inst:", type => "type:",
              function => "func:", procedure => "proc:", psl => "psl:" );

# Print HTML fragment describing the libraries, package use clauses and context
# references affecting an object.
# -> File handle to print to
#    Reference to hash representing entity, architecture, configuration,
#    context, package or package body
#    Flag to omit declarations in the file outside the object
sub printlibusehtml
{
  my ($handle, $obj, $nofile)= @_;
  my (%libs, %uses, %conts);        # use hashes for deduplication
  my @headwords;

  for ( ($nofile ? () : @{$obj->{file}{children}}), @{$obj->{children}}) {
    if( $_->{type} eq "library" ) {
      $libs{lc($_->{name})}= $_;
    }
    elsif( $_->{type} eq "use" && $_->{subtype} eq "package" ) {
      $uses{lc($_->{name})}= $_;
    }
    elsif( $_->{type} eq "context" && $_->{subtype} eq "reference" ) {
      $conts{lc($_->{name})}= $_;
    }
  }
  push @headwords, "libraries" if %libs;
  push @headwords, "global use clauses" if %uses;
  push @headwords, "context references" if %conts;
  return unless @headwords;
  print $handle "\n<h2>", ucfirst(cswordlist(" and ", @headwords)), "</h2>\n\n$STDTAB\n";
  for my $contname (sort keys %conts) {
    printusehtml($handle, $conts{$contname});
  }
  my @sortuses= sort keys %uses;
  for my $lib (sort keys %libs) {
    my $markedname= markvhdl($libs{$lib}{name});
    print $handle "<tr$CCO><td colspan=\"2\"><b>${SPDCL}library$SP_ ",
                  $markedname, "</b></td></tr>\n";
    map { print $handle "<tr>$TDI<td$CLSDESC>$_</td></tr>\n"; }
                          @{$libs{$lib}{doc}{description}};
    for my $usename (grep $_ =~ /^$lib\b/, @sortuses) {
      printusehtml($handle, $uses{$usename});
      delete $uses{$usename};
    }
  }
  for my $usename (sort keys %uses) {
    printusehtml($handle, $uses{$usename});
  }
  print $handle "</table>\n\n";
}


# Print HTML fragment describing a package use clause or context reference
# -> File handle to print to
#    Reference to hash representing use clause
sub printusehtml
{
  my ($handle, $use)= @_;
  my $type= $use->{type};
  my $markedname= markvhdl($use->{name});

  if( $use->{object} && (my $link= $use->{object}{doclink}) ) {
    print $handle "<tr$CCO><td colspan=\"2\">${SPDCL}$type$SP_ ",
                  "<a href=\"$link\">$markedname</a></td></tr>\n";
  }
  elsif( $use->{package} ) {
    print $handle "<tr$CCO><td colspan=\"2\">${SPDCL}$type$SP_ ",
          "<a href=\"../$use->{package}{doclink}\">$markedname</a></td></tr>\n";
  }
  else {
    print $handle "<tr$CCO><td colspan=\"2\">${SPDCL}$type$SP_ $markedname",
                  "</td></tr>\n";
  }
  map { print $handle "<tr>$TDI<td$CLSDESC>$_</td></tr>\n"; }
                        @{$use->{doc}{description}};
}


# Print HTML fragment describing a generic, port or constant
# -> File handle to print to
#    Reference to hash representing the generic/port/...
#    Optional hyperlink label to insert
my %nogenconst= map { $_ => 1; } qw(type package function procedure);
sub printgenporthtml
{
  my ($handle, $gp, $label)= @_;

  $label= $label ? "<a name=\"$label\">" : "";
  my $aclose= $label ? "</a>" : "";

  print $handle "<tr$CCO><td align=\"left\"><b>$label$SPID$gp->{name}",
                "$SP_$aclose</b></td>\n";
  print $handle "<td align=\"center\"><i><b>$SPIO", $gp->{direction}, 
                "$SP_</b></i></td>" if $gp->{direction};
  if( $nogenconst{$gp->{subtype}} ) {
    if( $gp->{subtype} eq "type" ) {
      print $handle "<td align=\"left\">${SPDCL}type$SP_</td>\n";
    }
    elsif( $gp->{subtype} eq "package" ) {
      print $handle "<td align=\"left\">${SPWD}new$SP_ ${SPDCL}package$SP_ ";
      print $handle "<a href=\"../$gp->{instanceof}{doclink}\">"
          if $gp->{instanceof} && $gp->{instanceof}{doclink};
      print $handle "$SPID$gp->{subname}$SP_";
      print $handle "</a>"
          if $gp->{instanceof} && $gp->{instanceof}{doclink};
      print $handle " ${SPWD}generic map$SP_ ( ", markvhdl($gp->{genmapstr}), " )</td>\n";
    }
    else {
      print $handle "<td align=\"left\">${SPDCL}$gp->{subtype}$SP_ ( ",
                    markvhdl($gp->{parlist}), " ) ";
      print $handle "${SPWD}return$SP_ ", markvhdl($gp->{return})
          if $gp->{return};
      print $handle "</td>\n";
      print $handle "<td align=\"left\">${SPWD}is$SP_ ", markvhdl($gp->{value}), "</td>\n"
          if $gp->{value};
    }
  }
  else {
    print $handle "<td align=\"left\">", marktype($gp->{subtype}, $gp), "</td>\n";
    print $handle "<td align=\"left\">:= ", markvhdl($gp->{value}), "</td>\n"
        if $gp->{value};
  }
  print $handle "</tr>\n";
  print $handle "<tr>$TDI<td colspan=\"4\"$CLSBRF>$gp->{doc}{brief}</td></tr>\n"
      if $gp->{doc}{brief};
  map { print $handle "<tr><td></td><td align=\"left\" colspan=\"3\"$CLSDESC>$_</td></tr>\n" }
                        @{$gp->{doc}{description}};
  return unless $gp->{type} eq "const";
  for( qw(deprecated internal) ) {
    print $handle "<tr>$TDI<td colspan=\"4\"><b>", ucfirst($_), "</b></td></tr>\n"
        if $gp->{doc}{$_};
  }
  if( $gp->{doc}{example} && @{$gp->{doc}{example}} ) {
    print $handle "<tr>$TDI<td colspan=\"4\">Example", (@{$gp->{doc}{example}} > 1 ? "s":""), ": ";
    print $handle join(", ", @{$gp->{doc}{example}}), "</td></tr>\n";
  }
  if( $gp->{doc}{see} && @{$gp->{doc}{see}} ) {
    print $handle "<tr>$TDI<td colspan=\"4\"$CLSDESC>See also: ",
            join(", ", map( ($_->[2]? "<a href=\"$_->[2]\">$_->[0]</a>" : $_->[0]),
            @{$gp->{doc}{see}})), "</td></tr>\n";
  }
}


# Print section with links to components instantiating this one.
# -> File handle to print to
#    Reference to has representing entity, architecture or configuration
sub printinstantiated
{
  my ($handle, $obj)= @_;

  return unless $obj->{instantiated} && @{$obj->{instantiated}};
  # The instantiation list is already sorted because it was generated after
  # sorting the hierarchy nodes.  But it may contain duplicates if a
  # configuration has separate bindings for multiple instances of the same
  # entity.
  my @instlinks= map nodehtml($_, 1), uniq @{$obj->{instantiated}};
  print $handle "\n<h2>Instantiated in...</h2>\n\n", join(", ", @instlinks);
}


my $enthtmlerr= 0;

# Write the HTML documentation for an entity
# -> Reference to hash representing entity
sub entityhtml
{
  my ($ent)= @_;
  my $fname= File::Spec->catfile($config{outputdir}, "entities",
                                 $ent->{docfilename});

  if( !open(ENT, ">$fname") ) {
    limitfileerr("Cannot create output file $fname", \$enthtmlerr);
    return;
  }
  printhtmlheader(*ENT{IO}, $ent->{fullname});
  print ENT "\n<h1>Entity $ent->{fullname}</h1>\n";
  printobjhtml(*ENT{IO}, $ent);
  if( $config{eyecandy} ) {
    entityhtmldiagram(*ENT{IO}, $ent);
  }
  if( @{$ent->{architectures}} ) {
    print ENT "\n<h2>Architectures</h2>\n\n$STDTAB\n";
    map { print ENT "<h3><a href=\"../architectures/$_->{docfilename}",
                    "\">$_->{name}</a></h3>\n"; }
            @{$ent->{architectures}};
    print ENT "</table>\n\n";
  }
  else {
    print ENT "\n<h2>No architectures found</h2>\n\n";
  }
  if( @{$ent->{configurations}} ) {
    print ENT "\n<h2>Configurations</h2>\n\n$STDTAB\n";
    map { print ENT "<h3><a href=\"../configurations/$_->{docfilename}",
                    "\">$_->{name}</a></h3>\n"; }
            @{$ent->{configurations}};
    print ENT "</table>\n\n";
  }
  printinstantiated(*ENT{IO}, $ent);
  print ENT "\n<hr>\n\n";
  printlibusehtml(*ENT{IO}, $ent);
  if( my @gens= @{$ent->{childtype}{generic}} ) {
    print ENT "\n<h2>Generics</h2>\n\n$STDTAB\n";
    map { printgenporthtml(*ENT{IO}, $_) } @gens;
    print ENT "</table>\n\n";
  }
  if( my @ports= @{$ent->{childtype}{port}} ) {
    print ENT "\n<h2>Ports</h2>\n\n$STDTAB\n";
    map { printgenporthtml(*ENT{IO}, $_) } @ports;
    print ENT "</table>\n\n";
  }
  printhtmlfooter(*ENT{IO});
  close ENT;
}


# Write HTML code for an entity block diagram.
# -> File handle to print to
#    Reference to hash representing entity
sub entityhtmldiagram
{
  my ($handle, $ent)= @_;
  my (@inports, @outports, @linkports);

  for (@{$ent->{childtype}{port}}) {
    my $dir= $_->{direction};
    if( $dir eq "linkage" ) {
      push @linkports, $_;
    }
    elsif( $dir eq "in" ) {
      push @inports, $_;
    }
    elsif( $dir eq "out" ) {
      push @outports, $_;
    }
    else {  # inout and buffer are / can be bidirectional
      push @inports, $_;
      push @outports, $_;
    }
  }
  print $handle <<EOF;
<center>
<table border="1" rules="groups">
<tbody>
<tr class="entdiaghead"><td colspan="2" align="left">$ent->{fullname}</td></tr>
EOF
  for (@{$ent->{childtype}{generic}}) {
    print $handle "<tr class=\"entdiagio\"><td colspan=\"2\" align=\"left\">$_->{name}</td></tr>\n";
  }
  print $handle "</tbody><tbody>\n";
  while( @inports && @outports ) {
    my ($in, $out)= map $_->{name}, shift(@inports), shift(@outports);
    print $handle "<tr class=\"entdiagio\"><td align=\"left\">$in</td><td align=\"right\">$out</td></tr>\n";
  }
  while( @inports ) {
    my $in= ${shift @inports}{name};
    print $handle "<tr class=\"entdiagio\"><td colspan=\"2\" align=\"left\">$in</td></tr>\n";
  }
  while( @outports ) {
    my $out= ${shift @outports}{name};
    print $handle "<tr class=\"entdiagio\"><td colspan=\"2\" align=\"right\">$out</td></tr>\n";
  }
  print $handle "</tbody>\n";
  if( @linkports ) {
    print $handle "<tbody>\n";
    for( @inports ) {
      print $handle "<tr class=\"entdiagio\"><td colspan=\"2\" align=\"left\">$_->{name}</td></tr>\n";
    }
    print $handle "</tbody>\n";
  }
  print $handle <<EOF;
</table>
</center>

EOF
}


# Print description and attributes of component, instance, process, procedure
# or function
# -> File handle to print to
#    Reference to hash representing object
sub printcommonhtml
{
  my ($handle, $obj)= @_;

  print $handle "<tr>$TDI<td colspan=\"4\"$CLSBRF>$obj->{doc}{brief}</td></tr>\n"
      if $obj->{doc}{brief};
  map { print $handle "<tr>$TDI<td colspan=\"4\"$CLSDESC>$_</td></tr>\n" }
                        @{$obj->{doc}{description}};
  if( $obj->{doc}{param} && @{$obj->{doc}{param}} ) {
    print $handle "<tr>$TDI<td colspan=\"4\"$CLSDESC>Parameters:</td></tr>\n";
    for my $par (@{$obj->{doc}{param}}) {
      $par =~ /^(?:\[(\w+)\]\s*)?([,\w]+)\s+(.*)$/s or next;
      print $handle "<tr>$TDI$TDI<td align=\"left\">$SPID$2$SP_</td><td colspan=\"2\" align=\"left\"$CLSDESC>$3</td></tr>\n";
    }
  }
  print $handle "<tr>$TDI<td align=\"left\" valign=\"top\" colspan=\"2\"$CLSDESC>",
   "Return value:</td><td colspan=\"2\"$CLSDESC>$obj->{doc}{return}</td></tr>\n"
      if $obj->{doc}{return};
  for( qw(deprecated internal) ) {
    print $handle "<tr>$TDI<td colspan=\"4\"><b>", ucfirst($_), "</b></td></tr>\n"
        if $obj->{doc}{$_};
  }
  if( $obj->{doc}{example} && @{$obj->{doc}{example}} ) {
    print $handle "<tr>$TDI<td colspan=\"4\">Example", (@{$obj->{doc}{example}} > 1 ? "s":""), ": ";
    print $handle join(", ", @{$obj->{doc}{example}}), "</td></tr>\n";
  }
  if( $obj->{doc}{see} && @{$obj->{doc}{see}} ) {
    print $handle "<tr>$TDI<td colspan=\"4\"$CLSDESC>See also: ",
            join(", ", map( ($_->[2]? "<a href=\"$_->[2]\">$_->[0]</a>" : $_->[0]),
            @{$obj->{doc}{see}})), "</td></tr>\n";
  }
  if( $obj->{attributes} && keys(%{$obj->{attributes}}) ) {
    print $handle "<tr>$TDI<td colspan=\"4\">Attributes:</td></tr>\n",
                  "<tr>$TDI$TDI<td colspan=\"3\">";
    printattrhtml($handle, $obj);
    print $handle "</td></tr>\n";
  }
}


# Print HTML table listing an object's attributes and their descriptions
# -> File handle to print to
#    Reference to hash describing the object
sub printattrhtml
{
  my ($handle, $obj)= @_;

  return unless $obj->{attributes} && keys(%{$obj->{attributes}});
  print $handle "$STDTAB\n";
  for my $attrname (keys %{$obj->{attributes}}) {
    my $aspec= $obj->{attributes}{$attrname};
    my $attr= $aspec->{attribute};
    print $handle "<tr$CCO><td><b>$SPID", $aspec->{name},
                "$SP_</b></td><td> : ", ($attr->{subtype} ?
             markvhdl($attr->{subtype}) : "<i>${SPNC}unknown type$SP_</i>"), 
                "</td><td> := ", markvhdl($aspec->{value}), "</td></tr>\n";
    if( $attr->{doc}{description} && @{$attr->{doc}{description}} ) {
      map { print $handle "<tr>$TDI<td colspan=\"2\"$CLSDESC>$_</td></tr>\n" }
                @{$attr->{doc}{description}};
    }
    if( $aspec->{doc}{description} && @{$aspec->{doc}{description}} ) {
      map { print $handle "<tr>$TDI<td colspan=\"2\"$CLSDESC>$_</td></tr>\n" }
                @{$aspec->{doc}{description}};
    }
  }
  print $handle "</table>\n";
}


# Print HTML fragment describing a component declaration
# -> File handle to print to
#    Reference to hash representing the component declaration
#    Flag indicating the component declaration is in a package
sub printcomphtml
{
  my ($handle, $comp, $inpack)= @_;
  my $class= $inpack ? $PCDCL : $ARDCL;

  print $handle "<tr$class><td colspan=\"5\"><b><a name=\"",
                $labels{component}, $comp->{name}, "\">$SPDID",
                $comp->{name}, "$SP_</a></b></td></tr>\n";
  printcommonhtml($handle, $comp);
  print $handle "<tr>$TDI<td colspan=\"4\">",
                "Default binding: $SPCO<a href=\"../entities/",
                $comp->{binding}{docfilename}, "\">$SPID", 
                $comp->{binding}{fullname}, "$SP_</a>$SP_</td></tr>\n"
        if $comp->{binding};
}


# Print HTML fragment describing all function and procedure declarations of a
# library unit, in the order in which they appear in the source.
# -> File handle to print to
#    Reference to hash representing the top-level declaration (library unit)
#    Flag indicating the declaration is in a package
sub printfuncprochtml
{
  my ($handle, $obj, $inpack)= @_;
  my @funcprocs;

  @funcprocs= @{$obj->{childtype}{funcproc}};
  return unless @funcprocs;
  print $handle "\n<h2>Functions and procedures</h2>\n\n$STDTAB\n";
  map { printfunchtml($handle, $_, $inpack) } @funcprocs;
  print $handle "</table>\n\n";
}


# Print HTML fragment describing a function or procedure declaration.  If the
# "label" field of the function hash exists, this string is inserted as a
# hyperlink label (this is only needed for package summaries).
# -> File handle to print to
#    Reference to hash representing the function/procedure
#    Flag indicating the declaration is in a package
sub printfunchtml
{
  my ($handle, $func, $inpack)= @_;
  my $gen= $func->{childtype}{generic} && @{$func->{childtype}{generic}} ?
           "generic " : "";
  my $label= $func->{label} ? "<a name=\"$func->{label}\">" : "";
  my $aclose= $func->{label} ? "</a>" : "";
  my $arglist= $func->{parlist} ?
                " (" . markvhdl($func->{parlist}) . ")" : "";
  my $class= $inpack ? $PCDCL : $ARDCL;

  print $handle "<tr$class><td colspan=\"5\">$gen$SPDCL$func->{type}$SP_ ",
                "<b>$label$SPDID$func->{name}$SP_$aclose</b>", $arglist,
                ($func->{subtype}? " ${SPWD}return$SP_ " .
                                markvhdl($func->{subtype}) : ""),
                "</td></tr>\n";
  print $handle "<tr$CCO>$TDI<td colspan=\"4\"><b>${SPWD}impure$SP_</b></td></tr>\n"
        if $func->{pure} && $func->{pure} eq "impure";
  printcommonhtml($handle, $func);
  if( $gen ) {
    print $handle "<tr>$TDI<td colspan=\"4\"><b>Generics:</b></td></tr>\n<tr>$TDI$TDI<td colspan=\"3\">$STDTAB\n";
    map { printgenporthtml($handle, $_) } @{$func->{childtype}{generic}};
    print $handle "</table></td></tr>\n";
  }
  elsif( $func->{instanceofname} ) {
    print $handle "<tr>$TDI<td colspan=\"4\">Instance of ";
    print $handle !$func->{instanceof} ? "$func->{instanceofname}</td></tr>\n" :
                ( "<a href=\"$func->{instanceof}{doclink}\">" .
                 ($func->{instanceof}{fullname} || $func->{instanceof}{name}) .
                "</a></td></tr>\n" );
    if( $func->{genericmap} && @{$func->{genericmap}} ) {
      print $handle "<tr>$TDI<td colspan=\"4\">Generic map:</td></tr>\n",
                    "<tr>$TDI$TDI<td colspan=\"3\"><table border=\"0\"$CCO>\n";
      map { print $handle "  <tr><td>$SPID$$_[0]$SP_</td><td> => ",
                    markvhdl($$_[1]), "</td></tr>\n"; } @{$func->{genericmap}};
      print $handle "</table></td></tr>\n";
    }
  }
}


# Print HTML fragment describing a type declaration
# -> File handle to print to
#    Reference to hash describing the type declaration
#    Flag indicating the type declaration is in a package
sub printtypehtml
{
  my ($handle, $type, $inpack)= @_;
  my $class= $inpack ? $PCDCL : $ARDCL;
  my $desc= "";

  my $label= $labels{type} . $type->{name};
  print $handle "<tr$class><td>$SPDCL",
                ($type->{subtype} eq "subtype"? "subtype": "type"),
                "$SP_</td><td><a name=\"$label\"><b>$SPTYID", $type->{name},
                "$SP_</b></a></td><td>${SPWD}is$SP_</td>\n<td>";
  $desc .= "<tr>$TDI<td colspan=\"4\"$CLSBRF>$type->{doc}{brief}</td></tr>\n"
      if $type->{doc}{brief};
  map { $desc .= "<tr><td></td><td colspan=\"4\"$CLSDESC>$_</td></tr>\n"; }
                        @{$type->{doc}{description}};
  if( $type->{subtype} eq "record" ) {
    print $handle "${SPWD}record$SP_</td></tr>\n$desc";
    if( my @elements= @{$type->{children} || []} ) {
      print $handle "<tr><td></td><td align=\"right\" valign=\"top\">$STDTAB",
         "<tr><td>Elements: </td></tr></table></td><td colspan=\"3\">$STDTAB\n";
      map { printgenporthtml($handle, $_) } @elements;
      print $handle "</table></td></tr>\n";
    }
  }
  elsif( $type->{subtype} eq "units" ) {
    print $handle marktype($type->{definition}), " ${SPWD}units$SP_ $SPID",
                  $type->{baseunit}, "$SP_</td></tr>\n$desc";
    for my $chain (@{$type->{chains}}) {
      print $handle "<tr><td></td><td></td><td colspan=\"3\">";
      my $u= $chain;
      my $closeparens= "";
      while( @$u > 1 ) {
        print $handle "$SPID$$u[0]$SP_ = $$u[1] ";
        $u= $$u[2];
        if( @$u > 1 ) {
          print $handle "( ";
          $closeparens .= ")";
        }
      }
      print $handle "$SPID$$u[0]$SP_ $closeparens</td></tr>\n";
    }
  }
  else {
    if( $type->{subtype} =~ /type$/ ) {
      print $handle marktype($type->{definition}, $type), "</td></tr>\n";
    }
    elsif( $type->{subtype} =~ /^protected/i ) {
      print $handle "${SPWD}protected$SP_...</td></tr>\n";
    }
    else {
      print $handle "???</td></tr>\n";
    }
    print $handle $desc;
  }
  for( qw(deprecated internal) ) {
    print $handle "<tr>$TDI<td colspan=\"4\"><b>" . ucfirst($_) . "</b></td></tr>\n"
        if $type->{doc}{$_};
  }
  if( $type->{doc}{example} && @{$type->{doc}{example}} ) {
    print $handle "<tr>$TDI<td colspan=\"4\">Example", (@{$type->{doc}{example}} > 1 ? "s":""), ": ";
    print $handle join(", ", @{$type->{doc}{example}}), "</td></tr>\n";
  }
  if( $type->{doc}{see} && @{$type->{doc}{see}} ) {
    print $handle "<tr>$TDI<td colspan=\"4\"$CLSDESC>See also: ",
            join(", ", map( ($_->[2]? "<a href=\"$_->[2]\">$_->[0]</a>" : $_->[0]),
            @{$type->{doc}{see}})), "</td></tr>\n";
  }
}


# Print HTML fragment describing the constructs surrounding a process,
# instantiation or PSL statement.
# -> File handle to print to
#    Reference to hash representing declarative item, which has to contain a
#    "trace" element, an array ref of the enclosing declarations
#    Name of the declaration enclosed in blocks
sub printtracehtml
{
  my ($handle, $obj, $declname)= @_;

  return unless @{$obj->{trace}};
  print $handle "<tr>$TDI<td colspan=\"4\">This $declname is inside the ",
                "following construct", (@{$obj->{trace}}>1? "s":""), ":</td></tr>\n";
  for my $trc (@{$obj->{trace}}) {
    if( $trc->{type} eq "generate" ) {
      print $handle "<tr$CCO>$TDI$TDI<td colspan=\"3\"><b>$SPID$trc->{name}$SP_</b> :";
      if( $trc->{parent} ) {
        if( $trc->{parent}{subtype} eq "if" ) {
          print $handle " ${SPWD}if$SP_ ...";
        }
        else {  # case
          print $handle " ${SPWD}case$SP_ ", markvhdl($trc->{parent}{parameters});
        }
      }
      print $handle " $SPWD$trc->{subtype}$SP_ ";
      print $handle "$SPID$trc->{subname}$SP_ : "
        if $trc->{subname};
      print $handle markvhdl($trc->{parameters}), " ${SPWD}generate$SP_</td></tr>\n";
    }
    elsif( $trc->{type} eq "block" ) {
      my $guard= $trc->{guard} ? "( " . markvhdl($trc->{guard}) . " )" : "";
      print $handle "<tr$CCO>$TDI$TDI<td colspan=\"3\"><b>$SPID$trc->{name}",
          "$SP_</b> : ${SPWD}block$SP_ $guard</td></tr>\n";
    }
    else {
      print $handle "<tr$CCO>$TDI$TDI<td colspan=\"3\">$SPWD", $trc->{type},
                 "$SP_ <b>", ($trc->{name} ? $SPID.$trc->{name}.$SP_ :
                                              "<i>${SPNC}unnamed$SP_</i>"),
                 "</b></td></tr>\n";
    }
    map { print $handle "<tr>$TDI$TDI$TDI<td colspan=\"2\"$CLSDESC>$_</td></tr>\n" }
                          @{$trc->{doc}{description}};
  }
}


# Print HTML fragment describing a process
# -> File handle to print to
#    Reference to hash representing the process
sub printprochtml
{
  my ($handle, $proc)= @_;

  print $handle "<tr$ARDCL><td colspan=\"5\"><b>", ($proc->{name} ?
            $SPDID.$proc->{name}.$SP_ : "<i>${SPNC}unnamed$SP_</i>"), "</b>",
  ($proc->{sensitivity}? " (" . markvhdl($proc->{sensitivity}) . ")" : ""), 
          "</td></tr>\n";
  print $handle "<tr$CCO>$TDI<td colspan=\"4\"><b>${SPWD}postponed$SP_</b></td></tr>\n"
        if $proc->{postponed};
  printcommonhtml($handle, $proc);
  printtracehtml($handle, $proc, "process");
}



# Print HTML fragment describing an instantiation
# -> File handle to print to
#    Reference to hash representing the instance
sub printinsthtml
{
  my ($handle, $inst)= @_;

  print $handle "<tr$ARDCL><td colspan=\"5\"><b><a name=\"", $labels{instance},
              $inst->{name}, "\">$SPDID$inst->{name}$SP_</a></b> : ";
  if( $inst->{subtype} eq "configuration" ) {
    print $handle "${SPWD}configuration$SP_ ";
    if( $inst->{binding} ) {
      print $handle "<a href=\"../configurations/",
                $inst->{binding}{docfilename}, "\">$SPID",
                $inst->{objname}, "$SP_</a></td></tr>\n";
    }
    else {
      print $handle $SPID, $inst->{objname}, "$SP_</td></tr>\n";
    }
  }
  elsif( $inst->{subtype} eq "entity" ) {
    print $handle "${SPDCL}entity$SP_ ";
    if( $inst->{binding} ) {
      print $handle "<a href=\"../entities/",
                $inst->{binding}{docfilename}, "\">$SPID",
                $inst->{objname}, "$SP_</a>";
    }
    else {
      print $handle $inst->{objname};
    }
    if( $inst->{bindarch} ) {
      print $handle " (<a href=\"../architectures/",
                    $inst->{bindarch}{docfilename}, "\">$SPID",
                    $inst->{archname}, "$SP_</a>)";
    }
    elsif( $inst->{archname} ) {
      print $handle " ($SPID$inst->{archname}$SP_)";
    }
    print $handle "</td></tr>\n";
  }
  elsif( $inst->{component} ) {
    print $handle "<a href=\"$inst->{component}{doclink}\">$SPID",
                  $inst->{objname}, "$SP_</a>";
    print $handle " (from package instance <a href=\"../$inst->{packinst}{doclink}\">",
                  "$SPID$inst->{packinst}{name}$SP_</a>)"
        if $inst->{packinst};
    print $handle "</td></tr>\n";
  }
  else {
    print $handle $SPID, $inst->{objname}, "$SP_</td></tr>\n";
  }
  printcommonhtml($handle, $inst);
  if( $inst->{genericmap} && @{$inst->{genericmap}} ) {
    print $handle "<tr>$TDI<td colspan=\"4\">Generic map:</td></tr>\n",
                  "<tr>$TDI$TDI<td colspan=\"3\"><table border=\"0\"$CCO>\n";
    map { print $handle "  <tr><td>$SPID$$_[0]$SP_</td><td> => ",
                    markvhdl($$_[1]), "</td></tr>\n"; } @{$inst->{genericmap}};
    print $handle "</table></td></tr>\n";
  }
  # Now for explicit binding of component instances
  if( $inst->{subtype} eq "component" &&
      ((my $bind= $inst->{binding}) || $inst->{bindname} || $inst->{bindopen}) ) {
    if( $bind ) {
      print $handle "<tr>$TDI<td colspan=\"4\">Binding: $SPCO<a href=\"",
      ($bind->{type} eq "entity" ?  "../entities/" : "../configurations/"),
            "$bind->{docfilename}\">$SPID$bind->{fullname}$SP_</a>";
    }
    elsif( $inst->{bindname} ) {
      print $handle "<tr>$TDI<td colspan=\"4\">Binding: $SPCO$SPID",
                      $inst->{bindname}, "$SP_";
    }
    else {
      print $handle "<tr>$TDI<td colspan=\"4\">Binding explicitly $SPCO${SPWD}open$SP_";
    }
    if( $inst->{archname} ) {
      if( $inst->{bindarch} ) {
        print $handle " (<a href=\"../architectures/",
                      $inst->{bindarch}{docfilename}, "\">$SPID",
                      $inst->{archname}, "$SP_</a>)";
      }
      else {
        print $handle " ($SPID$inst->{archname}$SP_)";
      }
    }
    print $handle "$SP_</td></tr>\n";
    map { print $handle "<tr>$TDI$TDI<td colspan=\"3\"$CLSDESC>$_</td></tr>\n" }
                        @{$inst->{binddoc}};
    if( my $map= $inst->{bindgen} ) {
      print $handle "<tr>$TDI$TDI<td colspan=\"3\">Generic map:</td></tr>\n",
                "<tr>$TDI$TDI$TDI<td colspan=\"2\"><table border=\"0\"$CCO>\n";
      map { print $handle "  <tr><td>$SPID$$_[0]$SP_</td><td> => ",
                                markvhdl($$_[1]), "</td></tr>\n"; } @$map;
      print $handle "</table></td></tr>\n";
    }
  }
  printtracehtml($handle, $inst, "instantiation");
}


# Print HTML fragment documenting PSL statements in an architecture or package.
# -> File handle to print to
#    Reference to hash representing the architecture / package
#    Flag indicating the PSL statement is in a package
sub printpslhtml
{
  my ($handle, $obj, $inpack)= @_;
  my $class= $inpack ? $PCDCL : $ARDCL;
  my @psldefs;
  my @psldirs;

  return unless @{$obj->{allpsldefs}};
  for (@{$obj->{allpsldefs}}) {
    if( $_->{subtype} =~ /^(?:property|sequence|endpoint|default clock)$/ ) {
        push @psldefs, $_;
    }
    else {
        push @psldirs, $_;
    }
  }
  if( @psldefs ) {
    print $handle "\n<h2>PSL definitions</h2>\n\n$STDTAB\n";
    for my $def (@psldefs) {
      print $handle "<tr$class><td colspan=\"5\">$SPPSL$def->{subtype}$SP_ ";
      print $handle "<a name=\"$labels{psl}$def->{name}\">$SPPID$def->{name}$SP_</a> "
          if $def->{name};
      print $handle " (", markvhdl($def->{parlist}), ")",
                    "</td></tr>\n<tr$CCO>$TDI<td colspan=\"4\">"
          if $def->{parlist};
      print $handle "${SPWD}is$SP_ ", markvhdl($def->{value}), "</td></tr>\n";
      printcommonhtml($handle, $def);
      printpslrefhtml($handle, $def);
      printtracehtml($handle, $def, "definition");
    }
    print $handle "</table>\n\n";
  }
  if( @psldirs ) {
    print $handle "\n<h2>PSL directives</h2>\n\n$STDTAB\n";
    for my $dir (@psldirs) {
      print $handle "<tr$class><td>";
      print $handle "$SPPID$dir->{name}$SP_ : " if $dir->{name};
      print $handle "</td><td colspan=\"4\"><b>$SPPSL$dir->{subtype}$SP_</b> ",
                    markvhdl($dir->{property} || $dir->{sequence}),
                    "</td></tr>\n";
      print $handle "<tr$CCO>$TDI<td colspan=\"4\">${SPWD}report$SP_ ",
                    markvhdl($dir->{report}), "</td></tr>\n"
          if $dir->{report};
      printcommonhtml($handle, $dir);
      printpslrefhtml($handle, $dir);
      printtracehtml($handle, $dir, "directive");
    }
    print $handle "</table>\n\n";
  }
}


# Print Links to PSL definitions referenced in a given PSL statement.
# -> File handle to print to
#    PSL code fragment to be searched for identifiers referring to definitions.
sub printpslrefhtml
{
  my ($handle, $psl)= @_;

  my $refs= $psl->{defrefs};
  return unless $refs && @$refs;
  print $handle "<tr>$TDI<td colspan=\"4\">Referenced definition",
                (@$refs > 1 ? "s" : ""), ": ",
            join(", ", map "<a href=\"$_->{doclink}\">$_->{name}</a>", @$refs),
                "</td></tr>\n";
}


my $archhtmlerr= 0;

# Write the HTML documentation for an architecture
# -> Reference to hash representing architecture
sub architecturehtml
{
  my ($arch)= @_;
  my $fname= File::Spec->catfile($config{outputdir}, "architectures",
                                 $arch->{docfilename});
  my $ent= $arch->{entity};
  my $headname= "$arch->{name} of $arch->{objname}";

  if( !open(ARCH, ">$fname") ) {
    limitfileerr("Cannot create output file $fname", \$archhtmlerr);
    return;
  }
  printhtmlheader(*ARCH{IO}, $headname);
  if( $ent ) {
    print ARCH "\n<h1>Architecture ", $arch->{name}, 
          " of <a href=\"../entities/", $ent->{docfilename},
          "\">$ent->{fullname}</a></h1>\n\n";
  }
  else {
    print ARCH "\n<h1>Architecture $arch->{name} of ", 
          $arch->{objname}, "</a></h1>\n\n";
  }
  printobjhtml(*ARCH{IO}, $arch);
  printinstantiated(*ARCH{IO}, $arch);
  print ARCH "\n<hr>\n\n";
  printlibusehtml(*ARCH{IO}, $arch);
  if( my @types= @{$arch->{childtype}{type}} ) {
    print ARCH "\n<h2>Type declarations</h2>\n\n$STDTAB\n";
    map { printtypehtml(*ARCH{IO}, $_) } @types;
    print ARCH "</table>\n\n";
  }
  if( my @consts= @{$arch->{childtype}{constant}} ) {
    print ARCH "\n<h2>Constants</h2>\n\n$STDTAB\n";
    map { printgenporthtml(*ARCH{IO}, $_) } @consts;
    print ARCH "</table>\n\n";
  }
  printfuncprochtml(*ARCH{IO}, $arch);
  if( my @comps= @{$arch->{childtype}{component}} ) {
    print ARCH "\n<h2>Component declarations</h2>\n\n$STDTAB\n";
    map { printcomphtml(*ARCH{IO}, $_) } @comps;
    print ARCH "</table>\n\n";
  }
  printpslhtml(*ARCH{IO}, $arch);
  if( my @procs= @{$arch->{allprocesses}} ) {
    print ARCH "\n<h2>Processes</h2>\n\n$STDTAB\n";
    map { printprochtml(*ARCH{IO}, $_) } @procs;
    print ARCH "</table>\n\n";
  }
  if( my @insts= @{$arch->{allinstances}} ) {
    print ARCH "\n<h2>Instantiations</h2>\n\n$STDTAB\n";
    map { printinsthtml(*ARCH{IO}, $_) } @insts;
    print ARCH "</table>\n\n";
  }
  printhtmlfooter(*ARCH{IO});
  close ARCH;
}


# Prints one level of the hierarchy of for...use statements in a configuration
# and recursively calls itself to print the deeper levels
# -> File handle to print to
#    Reference to array of references to hashes representing for statements at
#    the same level
#    Current depth in the hierarchy (for indentation)
#    Maximal depth (for colspan attribute of <td> tag)
sub printconfightml
{
  my ($handle, $fors, $curdepth, $maxdepth)= @_;
  my $ind2= $TDI x $curdepth;
  my $span= $maxdepth - $curdepth + 3;

  for my $for (@$fors) {
    print $handle "<tr$CCO>$ind2<td colspan=\"$span\">${SPWD}for$SP_ <b>";
    if( $for->{subtype} eq "architecture" ) {
      if( $for->{object} && $for->{object}{type} eq "architecture" ) {
        print $handle "<a href=\"../architectures/",
                $for->{object}{docfilename}, "\">$SPID",
                $for->{objname}, "$SP_</a></b></td></tr>\n";
      }
      else {
        print $handle $SPID, $for->{objname}, "$SP_</b>",
              ($for->{subname} ? " ( $SPID$for->{subname}$SP_ )":""), "</td></tr>\n";
      }
      map { print $handle "<tr>$ind2$TDI<td colspan=\"", $span-1, "\"$CLSDESC>",
                   "$_</td></tr>\n" }    @{$for->{doc}{description}};
    }
    else {
      my $comp;
      my $use;
      if( @{$for->{objnames}}==1 && ($for->{objnames}[0] eq "all" ||
                                $for->{objnames}[0] eq "others") ) {
        print $handle $SPWD, $for->{objnames}[0], $SP_;
        $comp= $for->{objects}[0]{component}
                if $for->{objects} && @{$for->{objects}};
      }
      elsif( $for->{objects} && @{$for->{objects}} ) {
        print $handle join("</b>, <b>", map("<a href=\"$_->{doclink}" .
              "\">$SPID$_->{name}$SP_</a>", @{$for->{objects}}));
        $comp= $for->{objects}[0]{component};
      }
      else {
        print $handle $SPID, join("$SP_</b>, <b>$SPID", @{$for->{objnames}}),
                      $SP_;
      }
      if( $comp ) {
        print $handle "</b> : <a href=\"$comp->{doclink}\">$SPID",
                      $for->{objtype}, "$SP_</a>";
      }
      else {
        print $handle "</b> : $SPID", $for->{objtype}, $SP_;
      }
      if( $use= $for->{use} ) {
        if( $for->{binding} ) {
          print $handle " ${SPDCL}use$SP_ $SPDCL$use->{subtype}",
                "$SP_ <a href=\"../",
              ($use->{subtype} eq "entity"? "entities/" : "configurations/"),
                $for->{binding}{docfilename}, "\">$SPID", $use->{name},
                "$SP_</a>";
          if( $for->{bindarch} ) {
            print $handle " (<a href=\"../architectures/",
                          $for->{bindarch}{docfilename}, "\">$SPID",
                          $for->{archname}, "$SP_</a>)</td>$SP_</tr>\n";
          }
          elsif( $use->{archname} ) {
            print $handle " ($SPID$use->{archname}$SP_)</td>$SP_</tr>\n";
          }
        }
        else {
          print $handle " ${SPDCL}use $use->{subtype}$SP_ $SPID$use->{name}$SP_",
                        ($use->{archname}? " ( $SPID$use->{archname}$SP_ )" : ""),
                        "</td>$SP_</tr>\n";
        }
      }
      else {
        print $handle "</td>$SP_</tr>\n";
      }
      map { print $handle "<tr>$ind2$TDI<td colspan=\"", $span-1, "\"$CLSDESC>",
                   "$_</td></tr>\n" }    @{$for->{doc}{description}};
      map { print $handle "<tr>$ind2$TDI<td colspan=\"", $span-1, "\"$CLSDESC>",
               "$_</td></tr>\n" }    @{$for->{use}{doc}{description}};
      if( my $map= $for->{bindgen} ) {
        print $handle "<tr>$ind2$TDI<td colspan=\"", $span-1,
                "\">Generic map:</td></tr>\n<tr>$ind2$TDI$TDI<td colspan=\"",
                $span-2, "\"><table border=\"0\"$CCO>\n";
        map { print $handle "  <tr><td>$SPID$$_[0]$SP_</td><td> => ",
                                  markvhdl($$_[1]), "</td></tr>\n"; } @$map;
        print $handle "</table></td></tr>\n";
      }
    }
    my @nextfors= find_children($for, "type", "for");
    printconfightml($handle, \@nextfors, $curdepth+1, $maxdepth);
  }
}


my $confhtmlerr= 0;

# Write the HTML documentation for a configuration
# -> Reference to hash representing configuration
sub configurationhtml
{
  my ($conf)= @_;
  my $fname= File::Spec->catfile($config{outputdir}, "configurations",
                                 $conf->{docfilename});
  my $ent= $conf->{entity};
  my $headname= "$conf->{name} of $conf->{objname}";
  my $maxdepth;
  my @topfors;

  if( !open(CONF, ">$fname") ) {
    limitfileerr("Cannot create output file $fname", \$confhtmlerr);
    return;
  }
  printhtmlheader(*CONF{IO}, $headname);
  if( $ent ) {
    print CONF "\n<h1>Configuration ", $conf->{name}, 
          " of <a href=\"../entities/", $ent->{docfilename},
          "\">$ent->{fullname}</a></h1>\n\n";
  }
  else {
    print CONF "\n<h1>Configuration $conf->{name} of ", 
          $conf->{objname}, "</a></h1>\n\n";
  }
  printobjhtml(*CONF{IO}, $conf);
  printinstantiated(*CONF{IO}, $conf);
  print CONF "\n<hr>\n\n";
  printlibusehtml(*CONF{IO}, $conf);
  print CONF "\n<h2>Configuration</h2>\n\n$STDTAB\n";
  $maxdepth= max_depth($conf);
  @topfors= @{$conf->{childtype}{for} || []};
  printconfightml(*CONF{IO}, \@topfors, 0, $maxdepth);
  print CONF "</table>\n";
  printhtmlfooter(*CONF{IO});
  close CONF;
}


# Resolve @see cross references in documentation of declarations in packages.
# -> Reference to hash of the declaration being documented
#    Reference to hash of package
# (<-) For those references which are resolved, the second element of the array
#    will contain a reference to the target object's hash.  The third element
#    will contain a hyperlink to the target's description.
sub resolve_packagesee
{
  my ($decl, $pack)= @_;
  my ($objname, $objpack);

  for my $see (@{$decl->{doc}{see}}) {
    if( $see->[0] =~ /\./ ) {
      resolve_seealso( [ $see ], $pack->{file}{libname});
      next if $see->[1];      # found in selected name lookup table
      next unless $see->[0] =~ /^(\w+)\.(\w+)(?:\.(\w+))?$/;
      my ($lib, $packname)= ($1, $2);
      $objname= $3;
      if( ! defined $objname ) {
        ($packname, $objname)= ($lib, $packname);
        $lib= $pack->{file}{libname};
      }
      $objpack= find_selname($packname, "package", $lib);
      next unless $objpack;
    }
    else {
      $objname= $see->[0];
      $objpack= $pack;
    }
    my @candidates= grep $_->{name} eq $objname, @{$objpack->{childtype}{$decl->{type}}};
    @candidates= grep $_->{name} eq $objname, @{$objpack->{children}}
        unless @candidates;
    if( @candidates ) {
      $see->[1]= $candidates[0];
      if( ! $see->[1]{label} ) {
        if( $see->[1]{type} =~ /^(function|procedure)/ ) {
          labelfuncproc($see->[1])
        }
        else {
          $see->[1]{label}= substr($see->[1]{type},0,4) . ":$see->[1]{name}";
        }

      }
      $see->[2]= "../packages/$objpack->{docfilename}#$see->[1]{label}";
      next;
    }
    next if $see->[0] =~ /\./;    # already tried lookup for selected names
    resolve_seealso( [ $see ], $pack->{file}{libname});
  }
}


# Set the "label" field of the hash of a function or procedure declaration in a
# package.  The label contains a partial MD5 hash of its argument list and
# return type to avoid ambiguities.
# -> Reference to hash of the function or procedure
sub labelfuncproc
{
  my ($func)= @_;

  return if $func->{label};
  my $labelname= $func->{name};
  if( $labelname !~ /^\w+$/ ) {
    $labelname =~ s/^"//;
    $labelname =~ s/"$//;
    if( $labelname =~ /^\w+$/ ) {
      $labelname= "op-$labelname";
    }
    else {
      $labelname= "op-" . unpack("H*", $labelname);
    }
  }
  $func->{label}= substr($func->{type},0,4) . ":$labelname-" .
                  substr(Digest::MD5::md5_hex($func->{parlist} . 
                          ($func->{subtype} || "")), 0, 8);
}


{
my $summaxdesc= 100;

# Print summary of declarations in a package.  The included declarations are
# type declarations, constants, functions / procedures and component
# declarations.  Depending on the value of the --packagesummary option, a
# section may be printed only if the description of any item exceeds what would
# be printed in the summary (see printpacksumitem() below).
# -> File handle to print to
#    Reference to hash representing package
sub printpackagesummary
{
  my ($handle, $pack)= @_;
  my %needsummary;
  my $save;

  if( $config{packagesummary} eq "always" ) {
    %needsummary= map { $_ => 0+@{$pack->{childtype}{$_}}; }
                      qw(type constant funcproc component);
  }
  else {
    for my $decl (qw(type constant funcproc component)) {
      $needsummary{$decl}= 1 if elem { $_->{doc}{description} && 
          ((@{$_->{doc}{description}} && (defined($_->{doc}{brief})
                || length($_->{doc}{description}[0]) > $summaxdesc ))
           || @{$_->{doc}{description}} > 1) }
                          @{$pack->{childtype}{$decl}};
    }
    return unless %needsummary;
    %needsummary= map { $_ => 0+@{$pack->{childtype}{$_}}; }
                      qw(type constant funcproc component)
      if $config{packagesummary} eq "auto";
      # sum up all non-empty sections if any is needed
  }
  print $handle "\n<h2>Summary</h2>\n\n$DIVPSUM";
  if( $needsummary{type} ) {
    print $handle "\n<h3>Types</h3>\n$SUMTAB";
    for my $type (@{$pack->{childtype}{type}}) {
      my $href= "#$labels{type}$type->{name}";
      my $declstr= "<tr><td align=\"right\"><a href=\"$href\">" .
            ($type->{subtype} || "type") . " <b>$type->{name}</b></a></td>";
      printpacksumitem($handle, $type, $href, $declstr, \$save);
    }
    printpacksumitem($handle, undef, undef, undef, \$save);
    print $handle "</table>\n";
  }
  if( $needsummary{constant} ) {
    print $handle "\n<h3>Constants</h3>\n$SUMTAB";
    for my $const (@{$pack->{childtype}{constant}}) {
      my $href= "#const:$const->{name}";
      my $declstr= "<tr><td align=\"right\"><a href=\"$href\"><b>$const->{name}</b></a></td>";
      printpacksumitem($handle, $const, $href, $declstr, \$save);
    }
    printpacksumitem($handle, undef, undef, undef, \$save);
    print $handle "</table>\n";
  }
  if( $needsummary{funcproc} ) {
    print $handle "\n<h3>Functions and procedures</h3>\n$SUMTAB";
    for my $func (@{$pack->{childtype}{funcproc}}) {
      labelfuncproc($func);
      my $href= "#$func->{label}";
      my $declstr= "<tr><td align=\"right\"><a href=\"$href\">$func->{type}" .
                    " <b>$func->{name}</b>";
      $declstr .= " ($func->{parlist})" if $func->{parlist};
      $declstr .= " return $func->{subtype}" if $func->{subtype};
      $declstr .= "</a></td>";
      printpacksumitem($handle, $func, $href, $declstr, \$save);
    }
    printpacksumitem($handle, undef, undef, undef, \$save);
    print $handle "</table>\n";
  }
  if( $needsummary{component} ) {
    print $handle "\n<h3>Components</h3>\n$SUMTAB";
    for my $comp (@{$pack->{childtype}{component}}) {
      my $href= "#$labels{component}$comp->{name}";
      my $declstr= "<tr><td align=\"right\"><a href=\"$href\"><b>$comp->{name}</b></a></td>";
      printpacksumitem($handle, $comp, $href, $declstr, \$save);
    }
    printpacksumitem($handle, undef, undef, undef, \$save);
    print $handle "</table>\n";
  }
  print $handle "</div>\n";
  print $handle "\n<hr>\n";
}


# Print row in package summary table.  If the "brief" entry in the
# declaration's documentation hash exists, this is printed in full, otherwise
# the first paragraph of the description is printed in full if it does not
# exceed $summaxdesc characters, or truncated to $summaxdesc-3 characters.  If
# what was printed does not constitute all the description, the word "More..."
# is added which links to the full description.  This function also outputs the
# closing tag of the layout table line.
# -> File handle to print to
#    Reference to hash of declaration to document (or undef to print saved items)
#    Hyperlink to full description (usually to an anchor on the same HTML page)
#    Text describing the declaration, including opening <tr> tag
#    Reference to scalar for saving summaries of deprecated and internal
#    declarations for later
sub printpacksumitem
{
  my ($handle, $decl, $href, $declstr, $save)= @_;
  my $briefdesc= "";

  if( !defined $decl ) {
    return unless ref($$save) eq "HASH";
    if( $$save->{deprecated} ) {
      print $handle "<tr><td colspan=\"2\"><b>Deprecated:</b></td></tr>\n";
      print $handle $$save->{deprecated};
    }
    if( $$save->{internal} ) {
      print $handle "<tr><td colspan=\"2\"><b>For internal use only:</b></td></tr>\n";
      print $handle $$save->{internal};
    }
    $$save= undef;
    return;
  }
  if( defined $decl->{doc}{brief} ) {
    $briefdesc= $decl->{doc}{brief};
    $href= "" unless $decl->{doc}{description} && @{$decl->{doc}{description}};
  }
  elsif( $decl->{doc}{description} && @{$decl->{doc}{description}} ) {
    if( length($decl->{doc}{description}[0]) > $summaxdesc ) {
      $briefdesc= substr($decl->{doc}{description}[0], 0, $summaxdesc-3) . "...";
    }
    else {
      $briefdesc= $decl->{doc}{description}[0];
      $href= "" unless @{$decl->{doc}{description}} > 1;
    }
  }
  else {
    $href= "";
  }
  $declstr .= "\n  <td>$briefdesc";
  $declstr .= "&nbsp;&nbsp;<a href=\"$href\">More...</a>" if $href;
  $declstr .= "</td></tr>\n";
  if( $decl->{doc}{internal} ) {
    $$save->{internal} .= $declstr;
  }
  elsif( $decl->{doc}{deprecated} ) {
    $$save->{deprecated} .= $declstr;
  }
  else {
    print $handle $declstr;
  }
}

}


my $packhtmlerr= 0;

# Write the HTML documentation for a package.  The documentation of functions
# and procedures in a package and the corresponding package body are
# concatenated and printed in the documentation of the package only.  To this
# end, the duplicate functions/procedures are removed from the package body
# hash, and their the documentation in the package is modified.  If no
# declarations specific to the package body remain to be documented, the
# section about the package body is left out.
# -> Reference to hash representing the package
sub packagehtml
{
  my ($pack)= @_;
  my $fname= File::Spec->catfile($config{outputdir}, "packages",
                                 $pack->{docfilename});
  my $pbody;

  if( !open(PACK, ">$fname") ) {
    limitfileerr("Cannot create output file $fname", \$packhtmlerr);
    return;
  }
  printhtmlheader(*PACK{IO}, $pack->{fullname});
  $pbody= $pack->{packagebody};
  if( $pbody ) {
    my ($pbfuncs, $pbprocs, $pbfuncprocs, $pbconsts)= ( [], [], [], [] );
    for my $f (@{$pbody->{childtype}{function}}) {
      my $el= elem { packsubeq($_, $f) } @{$pack->{childtype}{function}};
      if( $el ) {
        push @{$el->{doc}{description}}, @{$f->{doc}{description} || []};
      }
      else {
        push @$pbfuncs, $f
      }
    }
    for my $p (@{$pbody->{childtype}{procedure}}) {
      my $el= elem { packsubeq($_, $p) } @{$pack->{childtype}{procedure}};
      if( $el ) {
        push @{$el->{doc}{description}}, @{$p->{doc}{description} || []};
      }
      else {
        push @$pbprocs, $p;
      }
    }
    # Can't just concatenate ->{function} and ->{procedure} because we
    # want to preserve order
    for my $f (@{$pbody->{childtype}{funcproc}}) {
      push @$pbfuncprocs, $f if elem { $_ == $f } (@$pbfuncs, @$pbprocs);
    }
    for my $c (@{$pbody->{childtype}{constant}}) {
      my $el= elem { lc($c->{name}) eq lc($_->{name}) }
                      @{$pack->{childtype}{constant}};
      if( $el ) {
        push @{$el->{doc}{description}}, @{$c->{doc}{description} || []};
      }
      else {
        push @$pbconsts, $c;
      }
    }
    @{$pbody->{childtype}}{qw(function procedure funcproc constant)}=
                               ($pbfuncs, $pbprocs, $pbfuncprocs, $pbconsts);
  }
  my $packstr= @{$pack->{childtype}{generic}} || $pack->{instances} ?
                "Generic package" : "Package";
  print PACK "<h1>$packstr $pack->{fullname}</h1>\n\n";
  if( ! $pack->{filename} ) {
    print PACK "<p>\n(Package declaration not found)\n</p>\n\n";
  }
  else {
    printobjhtml(*PACK{IO}, $pack);
    print PACK "\n<hr>\n\n";
  }
  printpackagesummary(*PACK{IO}, $pack) if $config{packagesummary} ne "never";
  printlibusehtml(*PACK{IO}, $pack);
  if( my @gens= @{$pack->{childtype}{generic}} ) {
    print PACK "\n<h2>Generics</h2>\n\n$STDTAB\n";
    map { printgenporthtml(*PACK{IO}, $_) } @gens;
    print PACK "</table>\n\n";
  }
  if( $pack->{instances} && @{$pack->{instances}} ) {
    print PACK "\n<h2>Instances</h2>\n\n$STDTAB\n";
    for my $inst (@{$pack->{instances}}) {
      print PACK "<tr$PCDCL><td colspan=\"3\"><b><a name=\"$labels{instance}",
        "$inst->{fullname}\">$SPDID$inst->{fullname}$SP_</a></b></td></tr>\n";
      printcommonhtml(*PACK{IO}, $inst);
      if( $inst->{filename} ) {
        print PACK "<tr>$TDI<td colspan=\"2\">Defined in ";
        printfileref(*PACK{IO}, $inst);
        print PACK "</td></tr>\n";
      }
      if( $inst->{genericmap} && @{$inst->{genericmap}} ) {
        print PACK "<tr>$TDI<td colspan=\"2\">Generic map:</td></tr>\n",
                   "<tr>$TDI$TDI<td><table border=\"0\"$CCO>\n";
        map { print PACK "  <tr><td>$SPID$$_[0]$SP_</td><td> => ",
                 markvhdl($$_[1]), "</td></tr>\n"; } @{$inst->{genericmap}};
        print PACK "</table></td></tr>\n";
      }
      else {
        print PACK "<tr>$TDI<td colspan=\"2\">Default generic values</td></tr>\n";
      }
    }
    print PACK "</table>\n\n";
  }
  print PACK "<hr>\n\n" if @{$pack->{childtype}{generic}};
  if( my @types= @{$pack->{childtype}{type}} ) {
    print PACK "\n<h2>Type declarations</h2>\n\n$STDTAB\n";
    map { printtypehtml(*PACK{IO}, $_, 1) } @types;
    print PACK "</table>\n\n";
  }
  if( my @consts= @{$pack->{childtype}{constant}} ) {
    print PACK "\n<h2>Constants</h2>\n\n$STDTAB\n";
    map { printgenporthtml(*PACK{IO}, $_, "const:$_->{name}") } @consts;
    print PACK "</table>\n\n";
  }
  printfuncprochtml(*PACK{IO}, $pack, 1);
  if( my @comps= @{$pack->{childtype}{component}} ) {
    print PACK "\n<h2>Component declarations</h2>\n\n$STDTAB\n";
    map { printcomphtml(*PACK{IO}, $_, 1) } @comps;
    print PACK "</table>\n\n";
  }
  printpslhtml(*PACK{IO}, $pack, 1);

  unless( $pbody ) {
    printhtmlfooter(*PACK{IO});
    close PACK;
    return;
  }
  # Only document package body if it contains further declarations
  unless( @{$pbody->{childtype}{type}} ||
          @{$pbody->{childtype}{funcproc}} ||
          @{$pbody->{childtype}{constant}} ) {
    printhtmlfooter(*PACK{IO});
    close PACK;
    return;
  }
  print PACK "\n\n<hr>\n\n";
  print PACK "<h1>Package body $pbody->{fullname}</h1>\n\n";
  printobjhtml(*PACK{IO}, $pbody);
  print PACK "\n<hr>\n\n";
  printlibusehtml(*PACK{IO}, $pbody);
  if( my @types= @{$pbody->{childtype}{type}} ) {
    print PACK "\n<h2>Type declarations</h2>\n\n$STDTAB\n";
    map { printtypehtml(*PACK{IO}, $_) } @types;
    print PACK "</table>\n\n";
  }
  if( my @consts= @{$pbody->{childtype}{constant}} ) {
    print PACK "\n<h2>Constants</h2>\n\n$STDTAB\n";
    map { printgenporthtml(*PACK{IO}, $_) } @consts;
    print PACK "</table>\n\n";
  }
  printfuncprochtml(*PACK{IO}, $pbody);
  printhtmlfooter(*PACK{IO});
  close PACK;
}


# Generate the documentation HTML page of a context declaration.  First the
# package use clauses and context references are printed (similar as for other
# top-level constructs but without those in effect from the file level).  Then
# a list of all packages and package elements made available is printed, sorted
# by the full package name.
# -> Reference to hash representing context declaration
sub contexthtml
{
  my ($cont)= @_;
  my $fname= File::Spec->catfile($config{outputdir}, "contexts",
                                 $cont->{docfilename});

  if( !open(CONT, ">$fname") ) {
    limitfileerr("Cannot create output file $fname", \$packhtmlerr);
    return;
  }
  printhtmlheader(*CONT{IO}, $cont->{fullname});
  print CONT "\n<h1>Context $cont->{fullname}</h1>\n";
  printobjhtml(*CONT{IO}, $cont);
  printlibusehtml(*CONT{IO}, $cont, 1);
  if( %{$cont->{alluses}} ) {
    print CONT "\n\n<h2>All packages made available</h2>\n\n$STDTAB\n";
    for my $usepack (sort keys %{$cont->{alluses}}) {
      my $use= $cont->{alluses}{$usepack};
      # The "type" entry distinguishes a hash representing a use statement from
      # a hash containing a list of non-"all" use statements.
      my $pack= $use->{type} ? $use->{package} : $use->{(keys %$use)[0]}->{package};
      print CONT "<tr$CCO><td align=\"left\">";
      print CONT "From " unless $use->{type};
      print CONT "<a href=\"../$pack->{doclink}\">" if $pack;
      print CONT markvhdl($usepack);
      print CONT "</a>" if $pack;
      print CONT ":" unless $use->{type};
      print CONT " </td><td align=\"left\">";
      if( ! $use->{type} ) {
        print CONT join(", ",
          map $use->{$_}{object} && $use->{$_}{object}{doclink} ?
               "<a href=\"$use->{$_}{object}{doclink}\">$_</a>" : $_,
          sort keys %$use);
      }
      elsif( $pack && $pack->{doc}{brief} ) {
        print CONT $pack->{doc}{brief};
      }
      print CONT "</td></tr>\n";
    }
    print CONT "</table>\n\n";
  }
  close CONT;
}


my $sourcehtmlerr= 0;
my @htmlescapes= qw( x &amp; &lt; &gt; &quot; );

# Generate the HTML page for a source file.
# -> Reference to hash representing the VHDL file
sub sourcehtml
{
  my ($file)= @_;
  my $srcfname= $file->{name};
  my $outfname= File::Spec->catfile($config{outputdir}, "sources",
                                    $file->{docfilename});
  my $header;
  my $source;
  my $markedcode;

  if( !open(VHDL, $srcfname) ) {
    limitfileerr("Cannot open source file $srcfname for generating source HTML file", \$sourcehtmlerr);
    return;
  }
  if( !open(SRCHTML, ">$outfname") ) {
    limitfileerr("Cannot create output file $outfname", \$sourcehtmlerr);
    close VHDL;
    return;
  }
  {
      local $/;
      $source= <VHDL>;
  }
  close VHDL;
  if( $file->{tabsize} ) {
    local $Text::Tabs::tabstop= $file->{tabsize};
    $source= expand($source);
  }
  my $endnewline= $source =~ /\n$/;
  $source =~ s/[ \t\r]+\n/\n/g;
  $source =~ tr/&<>"/\x01\x02\x03\x04/;
  $source =~ s/(($MARKQUOT)|(--)(?:([+*])(?:[^+*\n].*)?|.*)(?=\n)|($ID))/
            ($3 ? $4 ? $SPDOC : $SPDO : $2 ? $SPSTR :
             $SPANCLASS{lc($5)} || $SPID) . $1 . $SP_ /ieog;
  $source =~ s/([\x01-\x04])/$htmlescapes[ord $1]/ge;
  $source= "<div class=\"shaded\">$source";
  my ($shadeon, $shadeoff)= ("\n<div class=\"shaded\">", "\n</div>");
  my $linenr= 0;
  my $nlines= $source =~ s/\n/" " . (++$linenr & 1 ? $shadeoff : $shadeon)/ge;
  $source .= "</div>" if ($linenr & 1) == 0;
  ++$nlines unless $endnewline;

  printhtmlheader(*SRCHTML{IO}, $file->{name});
  print SRCHTML "\n<h1>Source file ", substr($file->{name}, $config{prepathlen}), "</h1>\n";
  print SRCHTML "\n<p><a href=\"", ($file->{link} =~ /^\w+:\/\// ? "":"../"),
                                $file->{link}, "\">Link to file</a></p>\n"
        if defined $file->{link};
  print SRCHTML "<table border=\"0\" cellpadding=\"0\"><tr><td><pre>\n";
  my $nrwidth= length($nlines);
  for my $nr (1..$nlines) {
    printf SRCHTML "%${nrwidth}d \n", $nr;
  }
  print SRCHTML "</pre></td><td width=\"15\"></td><td>\n";
  print SRCHTML "<pre$CCO>\n$source</pre>\n</td></tr></table>\n";
  printhtmlfooter(*SRCHTML{IO});
  close SRCHTML;
}


# Create a JavaScript file in the style folder which performs VHDL syntax
# markup.
# (->) %SPANCLASS
sub makemarkupjs
{
  my $jsfname= File::Spec->catfile($config{outputdir}, "style",
                                    "$config{prefix}vhdlmarkup.js");
  my %markwords= revhash %SPANCLASS;
  my %markrenames;

  if( !open(JS, ">$jsfname") ) {
    print STDERR "Cannot create file $jsfname for VHDL source markup - $!\n";
    return;
  }
  print JS <<EOF;
window.onload = function() {
    var lnumpre= document.getElementById('linenumbers');
    var vhdlpre= document.getElementById('vhdlcode');
    var nlines;
    {
        var newlpos= vhdlpre.innerHTML.match(/\\n/g);
        nlines= newlpos.length;
        if( vhdlpre.innerHTML.charAt(vhdlpre.innerHTML.length - 1) != "\\n" ) {
            ++nlines;
        }
    }
    var slfrom= -String(nlines).length;
    for( var linenr= 1; linenr <= nlines; ++linenr ) {
        lnumpre.innerHTML += String("        " + linenr).slice(slfrom) + " \\n";
    }
    var idregex= /&?\\b[a-zA-Z](?:\\w*[a-zA-Z0-9])?\\b/g;
    var re_entity= /^&/;
EOF
  for my $spanclass (keys %markwords) {
    my $regexname= $spanclass;
    $regexname =~ s/^<span class="/re_/i;
    $regexname =~ s/">$//;
    $regexname =~ s/\s/_/g;
    $markrenames{$spanclass}= $regexname;
    print JS "    var $regexname= /^(?:", join("|", @{$markwords{$spanclass}}),
             ")\$/i;\n"
  }
  print JS <<EOF;
    var html= vhdlpre.innerHTML;
    var re_quotcom= /((?:\\b[box])?"[^"]*"|'[^']'|--[^\\r\\n]*)/ig;
    var quotcoms= html.match(re_quotcom);
    if( quotcoms ) {
        html= html.replace(re_quotcom, "\\x01");
    }
    var ids= html.match(idregex);
    if( ids ) {
        html= html.replace(idregex, "\\x02");
        var gaps= html.split( "\\x02" );
        html= "";
        for( var ind= 0; ind< ids.length; ++ind ) {
            var markclass= "";
            var markclose= "$SP_";
            if( re_entity.exec(ids[ind]) ) {
                markclose= "";
            }
            else
EOF
  for my $spanclass (keys %markwords) {
    my $regexname= $markrenames{$spanclass};
    print JS <<EOF;
            if( $regexname.exec(ids[ind]) ) {
                markclass= '$spanclass';
            }
            else
EOF
  }
  print JS <<EOF;
            {   markclass= '$SPID';
            }
            html += gaps[ind] + markclass + ids[ind] + markclose;
        }
        html += gaps[gaps.length - 1];
    }
    if( quotcoms ) {
        var nonquotcoms= html.split("\\x01");
        html= "";
        var re_spantag= /<span class="[^"]+">|<\\/span>/gi;
        for( var ind= 0; ind < quotcoms.length; ++ind ) {
            quotcoms[ind].replace(re_spantag, "");
            var markclass= '$SPSTR';
            if( quotcoms[ind].charAt(0) == "-" ) {
                markclass= quotcoms[ind].charAt(2) == "*"? '$SPDOC' : '$SPDO';
            }
            html += nonquotcoms[ind] + markclass + quotcoms[ind] + "$SP_";
        }
        html += nonquotcoms[nonquotcoms.length - 1];
    }
    html= '<div class="shaded">' +
          html.replace(/\\n([^\\n]*\\n)/g, '\\n</div>\$1<div class="shaded">');
    if( nlines & 1 == 1 ) {
        html += '</div>';
    }
    vhdlpre.innerHTML= html;
}
EOF
  close JS;
}


# Generate the HTML page for a source file.  This function generates HTML code
# which uses the JavaScript SyntaxHighlighter tool.
# -> Reference to hash representing the VHDL file
sub sourcehtml_js
{
  my ($file)= @_;
  my $srcfname= $file->{name};
  my $outfname= File::Spec->catfile($config{outputdir}, "sources",
                                    $file->{docfilename});
  my $header;

  if( !open(VHDL, $srcfname) ) {
    limitfileerr("Cannot open source file $srcfname for generating source HTML file", \$sourcehtmlerr);
    return;
  }
  if( !open(SRCHTML, ">$outfname") ) {
    limitfileerr("Cannot create output file $outfname", \$sourcehtmlerr);
    close VHDL;
    return;
  }
  printhtmlheader(\$header, $file->{name});
  $header =~ s!(?=</head>)!<<EOF!ie;
    <script type="text/javascript" src="../style/$config{prefix}vhdlmarkup.js"></script>
EOF
  print SRCHTML $header;
  print SRCHTML "\n<h1>Source file ", substr($file->{name}, $config{prepathlen}), "</h1>\n";
  print SRCHTML "\n<p><a href=\"", ($file->{link} =~ /^\w+:\/\// ? "":"../"),
                                $file->{link}, "\">Link to file</a></p>\n"
        if defined $file->{link};
  print SRCHTML "<table><tr><td><pre id=\"linenumbers\">\n";
  print SRCHTML "</pre></td><td><pre id=\"vhdlcode\" class=\"vhdlcode\">\n";
  local $Text::Tabs::tabstop= $file->{tabsize} if $file->{tabsize};
  while( <VHDL> )
  {
    $_= expand($_) if $file->{tabsize};
    s/&/&amp;/g;
# Don't replace " by entity to facilitate regex string matching in JavaScript.
    s/</&lt;/g;
    s/>/&gt;/g;
    print SRCHTML $_;
  }
  print SRCHTML "</pre></td></tr></table>\n";
  printhtmlfooter(*SRCHTML{IO});
  close SRCHTML;
  close VHDL;
}


# Generate the HTML page listing entities, architectures and configurations
# -> Reference to array of hash references representing entities
#    Reference to array of hash references representing architectures not
#    associated with any entity (known to us)
#    Reference to array of hash references representing configurations not
#    associated with any entity (known to us)
#    Flag indicating that there are configurations at all
sub entitylisthtml
{
  my ($ents, $oarchs, $oconfs, $haveconfs)= @_;
  my @list;
  my $fname= File::Spec->catfile($config{outputdir},
                                "$config{prefix}entities.html");

  if( !open(LIST, ">$fname") ) {
    print STDERR "Cannot create output file $fname - $!\n";
    return;
  }
  for my $oa (@$oarchs) {
    if( my ($elem)= grep(lc($_->{name}) eq lc($oa->{objname}), @list) ) {
      push @{$elem->{architectures}}, $oa;
    }
    else {
      push @list, { "name", $oa->{objname}, "architectures", [ $oa ] };
    }
  }
  for my $oc (@$oconfs) {
    if( my ($elem)= grep(lc($_->{name}) eq lc($oc->{objname}), @list) ) {
      push @{$elem->{configurations}}, $oc;
    }
    else {
      push @list, { "name", $oc->{objname}, "configurations", [ $oc ] };
    }
  }
  push @list, (map { "name", $_->{fullname}, "entity", $_, 
                     "architectures", $_->{architectures},
                     "configurations", $_->{configurations} }, @$ents);
  @list= sort { lc($a->{name}) cmp lc($b->{name}) } @list;
  printhtmlheader(*LIST{IO}, "Entities, Architectures and Configurations", 1);
  print LIST "\n<h1>List of entities", ($haveconfs?
     ", architectures and configurations" : " and architectures"), "</h1>\n";
  if( !@list ) {
    print LIST "\n<p>No entities, architectures or configurations were ",
                "found.</p>\n";
    printhtmlfooter(*LIST{IO});
    close LIST;
    return;
  }
  elsif( $haveconfs ) {
    print LIST "\n<p>Configurations are given in <i>italics</i>.</p>\n";
  }
  print LIST "\n\n$STDTAB\n";
  for my $item (@list) {
    if( $item->{entity} ) {
      print LIST "<tr><td colspan=\"2\"><a href=\"entities/",
                "$item->{entity}{docfilename}\"><b>$item->{name}</b></a></td>";
      if( my $brief= $item->{entity}{doc}{brief} ) {
        print LIST "<td>$brief</td>\n";
      }
      print LIST "</tr>\n";
    }
    else {
      print LIST "<tr><td colspan=\"2\"><b>$item->{name}</b></td></tr>\n";
    }
    for my $arch (@{$item->{architectures}}) {
      print LIST "<tr>$TDI<td><a href=\"architectures/$arch->{docfilename}",
                 "\">$arch->{name}</a></td>";
      if( my $brief= $arch->{doc}{brief} ) {
        print LIST "<td>$brief</td>\n";
      }
      print LIST "</tr>\n";
    }
    for my $conf (@{$item->{configurations}}) {
      print LIST "<tr>$TDI<td><a href=\"configurations/$conf->{docfilename}",
                 "\"><i>$conf->{name}</i></a></td>";
      if( my $brief= $conf->{doc}{brief} ) {
        print LIST "<td>$brief</td>\n";
      }
      print LIST "</tr>\n";
    }
  }
  print LIST "</table>\n\n";
  printhtmlfooter(*LIST{IO});
  close LIST;
}


# Generate the HTML page listing packages and context declarations.
# -> Reference to array of hash references representing packages
#    Reference to array of hash references representing packages not found in
#    source but with package body or instances (if generic)
#    Reference to array of hash references representing contexts
sub packagelisthtml
{
  my ($packs, $mispacks, $conts)= @_;
  my $fname= File::Spec->catfile($config{outputdir},
                                "$config{prefix}packages.html");
  my @sorted= sort { lc($a->{fullname}) cmp lc($b->{fullname}) } @$packs, @$mispacks;

  if( !open(LIST, ">$fname") ) {
    print STDERR "Cannot create output file $fname - $!\n";
    return;
  }
  printhtmlheader(*LIST{IO}, "Packages" . (@$conts || !@sorted ? " and contexts":""), 1);
  if( !@sorted && !@$conts ) {
    print LIST "\n<h1>List of packages and contexts</h1>\n\n";
    print LIST "<p>No packages or context declarations were found.</p>\n";
  }
  if( @sorted ) {
    print LIST "\n<h1>List of packages</h1>\n\n\n$STDTAB\n";
    for my $obj (@sorted) {
      print LIST "<tr><td colspan=\"2\"><a href=\"packages/$obj->{docfilename}",
                  "\"><b>$obj->{fullname}</b></a></td>";
      print LIST "<td>$obj->{doc}{brief}</td>" if $obj->{doc}{brief};
      print LIST "</tr>\n";
      for (@{$obj->{instances} || []}) {
        print LIST "<tr>$TDI<td><a href=\"packages/$obj->{docfilename}",
                   "#$labels{instance}$_->{fullname}\">$_->{fullname}</a></td>";
        print LIST "<td>$_->{doc}{brief}</td>" if $_->{doc}{brief};
        print LIST "</tr>\n";
      }
    }
    print LIST "</table>\n\n";
  }
  if( @$conts ) {
    @sorted= sort { lc($a->{fullname}) cmp lc($b->{fullname}) } @$conts;
    print LIST "\n<h1>List of contexts</h1>\n\n\n$STDTAB\n";
    for my $obj (@sorted) {
      print LIST "<tr><td><a href=\"contexts/$obj->{docfilename}",
                  "\"><b>$obj->{fullname}</b></a></td>";
      print LIST "<td>$obj->{doc}{brief}</td>" if $obj->{doc}{brief};
      print LIST "</tr>\n";
    }
    print LIST "</table>\n\n";
  }
  printhtmlfooter(*LIST{IO});
  close LIST;
}


# Modify the HTML header and body tag to allow the hierarchical tree view to
# work.
# -> Reference to scalar containing the start of the HTML file returned by
#    printhtmlheader()
#    List of IDs of tags enclosing tree views
# (<-) modified HTML header scalar
sub maketreeviewheader
{
  my ($header, @ids)= @_;

  return unless @ids;
  $$header =~ s!(?=</head>)!<<EOF!ie;
    <link type="text/css" rel="stylesheet" href="style/$requisites{treestyle}">
    <script type="text/javascript" src="style/$requisites{treejava}"></script>
EOF
  my $ind= -1;
  my $onload= join " ", map scalar(++$ind, "treeMenu_init(document.getElementById('$_'), unescape(window.name).split(',')[$ind]);"), @ids;
  my $onunload= join ").concat(',').concat(", map "escape(treeMenu_store(document.getElementById('$_')))", @ids;
  $onunload= "window.name = ($onunload);";
  $$header =~ s!<body>!<<EOF!ie;
<body
  onload="$onload"
  onunload="$onunload">
EOF
}


# Print the instantiation hierarchy or part of it in a tree view parts of which
# can be hidden or exposed using JavaScript.
# -> File handle to print to
#    Reference to array of root nodes
#    Flag indicating that the whole hierarchy should be printed rather than
#    just the first level
#    Optional: ID of the <dl> tag enclosing the hierarchy view (needed if more
#    than one such list goes onto the same page)
sub printhierarchy
{
  my ($handle, $nodes, $deep, $tagid)= @_;
  $tagid ||= "treeview";

  print $handle <<EOF;
<p><form>
<input type="button" value="Open all" onclick="treeMenu_closeOrOpenAll(document.getElementById('$tagid'), false);">
<input type="button" value="Close all" onclick="treeMenu_closeOrOpenAll(document.getElementById('$tagid'), true);">
</form></p>
<dl id="$tagid">
EOF
  my $maxdepth= 0;
  for my $node (@$nodes) {
    next unless $deep || $node->{confname};
    my $thismax= hier_max_depth($node);
    $maxdepth= $thismax if $maxdepth < $thismax;
  }
  for my $node (@$nodes) {
    printhiernodehtml($handle, $node, [], $maxdepth, !$deep);
  }
  print $handle "</dl>\n\n";
}


# Prints an HTML fragment describing one node in the instantiation hierarchy
# and recursively calls itself to print the children
# -> File handle to print to
#    Reference to the hash representing the hierarchy node
#    Reference to an array containing hash references of the parent nodes from
#    bottom to top, to avoid infinite loops in the case of recursive
#    instantiations
#    Maximum depth of the tree
#    (optional) If !=0, do not recurse beyond instantiations given in one
#    architecture or configuration
sub printhiernodehtml
{
  my ($handle, $node, $trace, $maxdepth, $notdeep)= @_;
  my $real= $node->{proxy} || $node;
  my $brief;
  my $recursion= 0;

  if( grep($_ == $real, @$trace) ) {
    $recursion= 1;
  }
  elsif( ($real->{architecture} &&
       ($brief= $real->{architecture}{doc}{brief}))
        || ($real->{entity} &&
       ($brief= $real->{entity}{doc}{brief})) ) {
  }
  my $nodehtml= nodehtml($node);
  $node->{done}= 1;
  $real->{done}= 1;
  if( $recursion ) {
    print $handle <<EOF;
<dd><table border="0"><tr><td><img src="style/$requisites{leafimg}">&nbsp;</td>
    <td>$nodehtml ... (recursion)</td></tr></table></dd>
EOF
    return;
  }
  if( $brief ) {
    $nodehtml .= "</td><td width=\"10\"></td><td> $brief";
  }
  if( ! $real->{children} || ! @{$real->{children}} ||
      ( $notdeep && @$trace &&
    # Instantiation overview: do not descend past 1st level for architectures;
    # stop at architecture or different configuration for configurations
        ($node->{proxy} || !$$trace[0]{confname} ||
          $$trace[0]{confname} ne ($node->{confname} || "")) ) ) {
    print $handle <<EOF;
<dd><table border=\"0\"><tr><td><img src="style/$requisites{leafimg}">&nbsp;</td>
    <td>$nodehtml</td></tr></table></dd>
EOF
    return;
  }
  print $handle <<EOF;
<dd><table border="0"><tr><td><img src="style/$requisites{nodeimg}"><img src="style/$requisites{subtrimg}">&nbsp;</td>
    <td>$nodehtml</td></tr></table> <dl>
EOF
  unshift @$trace, $real;
  for my $child (@{$real->{children}}) {
    printhiernodehtml($handle, $child, $trace, $maxdepth, $notdeep);
  }
  shift @$trace;
  print $handle "</dl></dd>\n";
}


# Generate HTML code describing the module represented by a hierarchy node.
# The HTML is cached in the html field of the node hash.
# -> Reference to hierarchy node hash
#    optional: if true, prepend "../" to all links (applicable for use in
#    non-global pages in subfolders)
# <- HTML string
sub nodehtml
{
  my ($node, $nonglobal)= @_;

  return $node->{$nonglobal? "../html" : "html"} if $node->{html};
  my $html= "";
  if( $node->{proxy} ) {
    $html= nodehtml($node->{proxy});
  }
  else {
    if( $node->{entname} ) {
      $html .= "<a href=\"entities/$node->{entity}{docfilename}\">"
        if $node->{entity};
      $html .= "<b>$node->{entname}</b>";
      $html .= "</a>"
        if $node->{entity};
    }
    if( $node->{archname} ) {
      $html .= "&nbsp;";
      $html .= "<a href=\"architectures/$node->{architecture}{docfilename}\">"
        if $node->{architecture};
      $html .= "($node->{archname})";
      $html .= "</a>"
        if $node->{architecture};
    }
  }
  if( $node->{confname} ) {
    $html .= "&nbsp;";
    $html .= "<a href=\"configurations/$node->{configuration}{docfilename}\">"
      if $node->{configuration};
    $html .= "[<i>$node->{confname}</i>]";
    $html .= "</a>"
      if $node->{configuration};
  }
  $node->{"../html"}= $node->{html}= $html;
  $node->{"../html"} =~ s! href="! href="../!ig;
  return $node->{$nonglobal? "../html" : "html"};
}


# Generate the HTML page of the instantiation overview
# -> Reference to array containing hierarchy nodes of architectures and
#    configurations
#    Flag indicating that there are configurations at all
sub instantiationhtml
{
  my ($hier, $haveconfs)= @_;
  my $fname= File::Spec->catfile($config{outputdir},
                                "$config{prefix}instantiations.html");
  my $header;
  my $maxdepth;

  if( !open(INST, ">$fname") ) {
    print STDERR "Cannot create output file $fname - $!\n";
    return;
  }
  printhtmlheader(\$header, "Instantiation overview", 1);
  maketreeviewheader(\$header, "treeview");
  print INST $header;
  print INST "\n<h1>Instantiation overview</h1>\n\n";
  print INST "\n<p>Configurations are given in brackets and in <i>italics</i>.</p>\n\n"
        if $haveconfs;
  print INST <<EOF;

<p>Click on <img src="style/$requisites{nodeimg}">&nbsp; to open or close one
level, on <img src="style/$requisites{subtrimg}">&nbsp; to open or close all
levels (only for configurations).</p>
EOF
  printhierarchy(*INST{IO}, $hier, 0, "treeview");
  printhtmlfooter(*INST{IO});
  close INST;
}


# Generate the HTML page of the instantiation hierarchy
# -> Reference to array containing hierarchy nodes of architectures and
#    configurations
#    Reference to array of two array references, of user-designated top modules
#    and other uninstantiated modules
#    Flag indicating that there are configurations at all
sub hierarchyhtml
{
  my ($hier, $topmods, $haveconfs)= @_;
  my $fname= File::Spec->catfile($config{outputdir},
                                "$config{prefix}hierarchy.html");
  my $header;
  my $maxdepth;

  if( !open(HIER, ">$fname") ) {
    print STDERR "Cannot create output file $fname - $!\n";
    return;
  }
  printhtmlheader(\$header, "Instantiation hierarchy", 1);
  maketreeviewheader(\$header, (@{$$topmods[0]} ? ("topview", "otherview") : ("otherview")));
  print HIER $header;
  print HIER "\n<h1>Instantiation hierarchy</h1>\n\n";
  print HIER "\n<p>Configurations are given in brackets and in <i>italics</i>.</p>\n\n"
        if $haveconfs;
  print HIER <<EOF;

<p>Click on <img src="style/$requisites{nodeimg}">&nbsp; to open or close one
level, on <img src="style/$requisites{subtrimg}">&nbsp; to open or close all
levels.</p>
EOF
  if( @{$$topmods[0]} ) {
    print HIER "<h3>Designated top modules</h3>\n\n";
    printhierarchy(*HIER{IO}, $$topmods[0], 1, "topview");
    print HIER "<h3>Other uninstantiated modules</h3>\n\n";
  }
  my @leftovers= grep !$_->{done}, @$hier;
  printhierarchy(*HIER{IO}, [@{$$topmods[1]}, @leftovers], 1, "otherview");
  printhtmlfooter(*HIER{IO});
  close HIER;
}


# Print HTML list of declarations in a given source file.  The order among the
# same kind of design element is the same in which they occur in the file.
# -> File handle to print to
#    Reference to the hash representing the source file
sub printfiledeclhtml
{
  my ($handle, $file)= @_;

  # Unlike most other code, this function has to deal with declarations that
  # were discarded because they were duplicates and were not processed further.
  # Therefore we deduplicate by name and prepend the library name if necessary.
  my $ents= $file->{childtype}{entity} || [];
  my (%ents, %doneentnames);
  @ents{@$ents}= (1) x @$ents;
  my @entstrs;
  for my $ac (@{$file->{childtype}{architecture} || []},
              @{$file->{childtype}{configuration} || []}) {
    my $ent= $ac->{entity};
    if( ! $ent ) {
      push @entstrs, $ac->{objname};
      $entstrs[-1]= $file->{libname}.".".$entstrs[-1] unless $entstrs[-1] =~ /\./;
    }
    elsif( ! $ents{$ent} ) {
      push @entstrs, $ent->{fullname};
    }
    else {
      push @entstrs, "<a href=\"entities/$ent->{docfilename}\">$ent->{fullname}</a>";
    }
    if( $ac->{type} eq "architecture" ) {
      $entstrs[-1] .= "(";
      $entstrs[-1] .= "<a href=\"architectures/$ac->{docfilename}\">"
          if $ac->{docfilename};
      $entstrs[-1] .= $ac->{name};
      $entstrs[-1] .= "</a>"
          if $ac->{docfilename};
      $entstrs[-1] .= ")";
    }
    else {
      $entstrs[-1] .= "[";
      $entstrs[-1] .= "<a href=\"configurations/$ac->{docfilename}\">"
          if $ac->{docfilename};
      $entstrs[-1] .= $ac->{name};
      $entstrs[-1] .= "</a>"
          if $ac->{docfilename};
      $entstrs[-1] .= "]";
    }
    my $entname= $ac->{objname};
    $entname =~ s/^.*\.//;
    $doneentnames{$entname}= 1;
  }
  for my $ent (grep ! $doneentnames{$$_{name}}, @$ents) {
    unshift @entstrs, $ent->{docfilename} ?
          "<a href=\"entities/$ent->{docfilename}\">$ent->{fullname}</a>" :
          $ent->{fullname} || $file->{libname}.".".$ent->{name};
  }
  print $handle join(", ", @entstrs);
  my %donepbods;
  my @packstrs;
  for my $pack (@{$file->{childtype}{package} || []}) {
    push @packstrs, $pack->{docfilename} ?
          "<a href=\"packages/$pack->{docfilename}\">$pack->{fullname}</a>" :
          $pack->{fullname} || $file->{libname}.".".$pack->{name};
    $donepbods{$pack->{name}}= 1;
  }
  # Here we list orphaned package bodies as packages to make things simple and
  # concise.  So we filter out all package names that occurred already
  # regardless of matching package bodies.
  for my $pbod (grep ! $donepbods{$_->{name}}, @{$file->{childtype}{packagebody} || []}) {
    push @packstrs, $pbod->{docfilename} ?
          "<a href=\"packages/$pbod->{docfilename}\">$pbod->{fullname}</a>" :
          $pbod->{fullname} || $file->{libname}.".".$pbod->{name};
  }
  if( @packstrs ) {
    my $plural= @packstrs > 1 ? "s" : "";
    print $handle @entstrs ? "; package$plural " : "Package$plural ";
    print $handle join(", ", @packstrs);
  }
  if( @{$file->{childtype}{context} || []} ) {
    my $plural= @{$file->{childtype}{context}} > 1 ? "s" : "";
    print $handle @entstrs || @packstrs? "; context$plural " : "Context$plural ";
    print $handle join(", ",
            map "<a href=\"contexts/$_->{docfilename}\">$_->{fullname}</a>",
                @{$file->{childtype}{context}});

  }
}


# Modify the HTML header and body tag to allow the hierarchical tree view to
# work.
# -> Reference to scalar containing the start of the HTML file returned by
#    printhtmlheader()
#    List of IDs of tags enclosing tree views
# (<-) modified HTML header scalar
sub makesourceviewheader
{
  my ($header, @ids)= @_;

  return unless @ids;
  $$header =~ s!(?=</head>)!<<EOF!ie;
    <link type="text/css" rel="stylesheet" href="style/$requisites{treestyle}">
    <script type="text/javascript" src="style/$requisites{sourcejava}"></script>
EOF
  my $ind= -1;
  my $onload= join " ", map scalar(++$ind, "treeMenu_init(document.getElementById('$_'), unescape(window.name).split(',')[$ind]);"), @ids;
  my $onunload= join ").concat(',').concat(", map "escape(treeMenu_store(document.getElementById('$_')))", @ids;
  $onunload= "window.name = ($onunload);";
  $$header =~ s!<body>!<<EOF!ie;
<body
  onload="$onload"
  onunload="$onunload">
EOF
}

# Generate list of source files with links to their HTML files.
# -> Reference to array of hashes representing VHDL source files
sub sourcelisthtml
{
  my ($sources)= @_;
  my $fname= File::Spec->catfile($config{outputdir},
                                "$config{prefix}sources.html");
  my $header;

  if( !open(SOURCE, ">$fname") ) {
    print STDERR "Cannot create output file $fname - $!\n";
    return;
  }
  printhtmlheader(\$header, "Source file overview", 1);
  $header =~ s!(?=</head>)!<<EOF!ie;
    <link type="text/css" rel="stylesheet" href="style/$requisites{treestyle}">
    <script type="text/javascript" src="style/$requisites{sourcejava}"></script>
EOF
  $header =~ s!<body>!<<EOF!ie;
<body
  onload="sourceView_init(document.getElementById('sourcetab'), unescape(window.name));"
  onunload="window.name= escape(sourceView_store(document.getElementById('sourcetab')));">
EOF
  print SOURCE $header;
  print SOURCE "\n<h1>Source file overview</h1>\n";
  print SOURCE "\n<p>The file names link to HTML pages showing the sources; the links in brackets point to the actual source files.</p>\n"
      if $config{sourcelinks};
  print SOURCE <<EOF;
<p>Click on <img src="style/$requisites{nodeimg}">&nbsp; to open or close one
directory, on <img src="style/$requisites{subtrimg}">&nbsp; to open or close a
directory subtree.</p>
<p><form>
<input type="button" value="Open all" onclick="sourceView_closeOrOpenAll(document.getElementById('sourcetab'), false);">
<input type="button" value="Close all" onclick="sourceView_closeOrOpenAll(document.getElementById('sourcetab'), true);">
</form></p>
EOF
  my %byname= map { substr($_->{name}, $config{prepathlen}) => $_; } @$sources;
  my %name2name= map { $_ => $_; } keys %byname;
  my $pathtree= pathtree(\%name2name);
  printpathtreehtml(*SOURCE{IO}, $pathtree, \%byname);
  printhtmlfooter(*SOURCE{IO});
  close LIST;
}


# Print HTML fragment describing part of the source file directory hierarchy.
# -> File handle to print to
#    Reference to hash of path tree returned by pathtree()
#    Reference to hash mapping payload string of path tree to source file
#    object hashes
#    On recursive calls: name of previous path fragment leading to this
#    subtree, entity-escaped and with trailing path separator
sub printpathtreehtml
{
  my ($handle, $tree, $byname, $prevfrag)= @_;

  my $toplevel= ! defined $prevfrag;
  my $tabid= defined($prevfrag)? "" : " id=\"sourcetab\"";
  print $handle "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">",
                "<tbody$tabid>\n";
  my @pathfrags= sort { $a cmp $b } keys %$tree;
  $prevfrag= "" unless defined $prevfrag;
  for my $pf (@pathfrags) {
    my $pfprint= $pf;
    $pfprint =~ s/&/&amp;/g;
    $pfprint =~ s/</&lt;/g;
    $pfprint =~ s/>/&gt;/g;
    $pfprint =~ s/"/&quot;/g;
    print $handle "<tr><td>$prevfrag</td>";
    $prevfrag= "";
    if( ref $tree->{$pf} ) {
      print $handle "<td colspan=\"4\">\n";
      $pfprint= "<img src=\"style/$requisites{nodeimg}\"><img src=\"style/$requisites{subtrimg}\">&nbsp;" . $pfprint;
      printpathtreehtml($handle, $tree->{$pf}, $byname, $pfprint.$pathsep);
    }
    else {
      my $file= $byname->{$tree->{$pf}};
      print $handle "<td><a href=\"sources/$file->{docfilename}\">$pfprint",
                    "</a>&nbsp;&nbsp;&nbsp;</td><td>";
      print $handle "<a href=\"$file->{link}\">[source file]</a>&nbsp;&nbsp;&nbsp;"
          if defined $file->{link};
      print $handle "</td><td>";
      printfiledeclhtml($handle, $file);
    }
    print $handle "</td></tr>\n";
  }
  print $handle "</tbody></table>\n";
}


# Output the instantiation hierarchy and lists of top modules to a file in JSON
# format.  The output is also compatible with YAML.
# -> Reference to hierarchy array
#    Reference to array of two array references, of user-designated top modules
#    and other uninstantiated modules
sub hierarchyjson
{
  my ($hier, $topmods)= @_;
  my $keycache;
  my $ind= "  ";
  my $fname= File::Spec->catfile($config{outputdir},
                                "$config{prefix}hierarchy.json");

  if( !open(JSON, ">$fname") ) {
    print STDERR "Cannot create output file $fname - $!\n";
    return;
  }
  print JSON "[\n$ind\{\n";
  my $nr= 0;    # all this fuss just to omit the comma after the last node
  for my $node (@$hier) {
    print JSON "$ind$ind\"", jsonnodekey($node, $keycache), "\": {\n";
    my $real= $node->{proxy} || $node;
    my @fields;
    print JSON "$ind$ind$ind\"entity\": \"$real->{entname}\",\n"
        if $real->{entname};
    print JSON "$ind$ind$ind\"architecture\": \"$real->{archname}\",\n"
        if $real->{archname};
    print JSON "$ind$ind$ind\"configuration\": \"$node->{confname}\",\n"
        if $node->{confname};
    if( $real->{architecture} ) {
      print JSON "$ind$ind$ind\"file\": \"", substr($node->{architecture}{filename}, $config{prepathlen}), "\",\n";
    }
    elsif( $real->{entity} ) {
      print JSON "$ind$ind$ind\"file\": \"", substr($node->{entity}{filename}, $config{prepathlen}), "\",\n";
    }
    print JSON "$ind$ind$ind\"instantiations\": [\n";
    print JSON join(",\n", map "$ind$ind$ind$ind\"".jsonnodekey($_, $keycache)."\"", @{$real->{children}}), "\n"
        if @{$real->{children}};
    print JSON "$ind$ind$ind]\n";
    if( $nr == $#$hier ) {
      print JSON "$ind$ind}\n";
    }
    else {
      print JSON "$ind$ind},\n";
    }
    ++$nr;
  }
  print JSON "$ind},\n$ind\[\n";
  print JSON "$ind$ind", join(",\n$ind$ind", map "\"".jsonnodekey($_, $keycache)."\"", @{$$topmods[0]}), "\n"
      if @{$$topmods[0]};
  print JSON "$ind],\n$ind\[\n";
  print JSON "$ind$ind", join(",\n$ind$ind", map "\"".jsonnodekey($_, $keycache)."\"", @{$$topmods[1]}), "\n"
      if @{$$topmods[1]};
  print JSON "$ind]\n]\n";
  close JSON;
}


# Generate human-readable key for hierarchy node exported to JSON file.
# -> Reference to hierarchy node hash
#    Scalar opaque to calling context referencing a data structure caching keys
# <- Key of the form entity-architecture[-configuration][-number] (the number
#    may be used to disabiguate equally-named components)
sub jsonnodekey
{
  my ($node, $cache)= @_;

  return $cache->[0]{$node} if defined $cache->[0]{$node};
  my $real= $node->{proxy} || $node;
  my $name= ($real->{entname} || "unknown") . "-" . ($real->{archname} || "unknown");
  $name .= "-$node->{confname}" if $node->{confname};
  if( $cache->[1]{$name} ) {
    $name .= "-";
    my $num= 1;
    ++$num while $cache->[1]{"$name$num"};
    $name .= $num;
  }
  $cache->[0]{$node}= $name;
  $cache->[1]{$name}= $node;
  return $name;
}


#sectiontex###################################################################
##############################################################################
####                    TeX output functions
##############################################################################
##############################################################################

# Escape underscore in identifier.  No code markup.
# -> VHDL identifier
# <- Same identifier with backslash prepended to underscores
sub texid
{
  my $id= shift;
  $id =~ s/_/\\_/g;
  return $id;
}


# Inline-markup of VHDL fragment using listings package.
# -> VHDL code fragment
# <- Corresponding TeX fragment
sub texcode
{
  my $vhdl= shift;
  $vhdl =~ s/^\s+/ /;
  $vhdl =~ s/\s+$/ /;
  $vhdl =~ s/\s+/ /g;   # compress white space and remove newlines
  if( $vhdl =~ /\&/ ) {
    return join("{\\tt\\&}", map texcode($_), split /\&/, $vhdl, -1);
  }
  # Try delimiters not occurring in the code snippet.  Can't easily use "["
  # because \lstinline accepts argument in square brackets.
  for my $delimiter ("\$", "@", "~", "`", "^", "#", "%", "{", "}", "]") {
    return "\\lstinline$delimiter$vhdl$delimiter" if index($vhdl, $delimiter) < 0;
  }
  # Hack as fallback for now: will break markup if ; occurs in strings.
  my @parts= split /;/, $vhdl;
  return join("\\lstinline+;+", map "\\lstinline;$_;", @parts);
}


# Create markup for type name and hyperlink to type definition if applicable.
# -> VHDL code describing a type
#    Reference to hash of the object that has this type, possibly including a
#    "typedef" field referencing the type definition object
# <- TeX fragment of the type designation
sub textype
{
  my ($code, $obj)= @_;

  return texcode($code) unless $obj->{typedef} && $obj->{typedef}{doclink};
  my @occurrences;
  while( $code =~ s/\b((?:\w+\.)*$obj->{typedef}{name})\b/\001/ ) {
    push @occurrences, $1;
  }
  my @intermediates= split /\001/, $code, -1;
  my $tex= "";
  while( @occurrences ) {
    $tex .= texcode(shift(@intermediates)) . texref(texcode(shift @occurrences), $obj->{typedef});
  }
  $tex .= texcode($intermediates[0]);
  return $tex;
}


my %namedents= ( quot => 34, amp => 38, lt => 60, gt => 62, nbsp => 160, iexcl
=> 161, cent => 162, pound => 163, curren => 164, yen => 165, brvbar => 166,
sect => 167, uml => 168, copy => 169, ordf => 170, laquo => 171, not => 172,
shy => 173, reg => 174, macr => 175, deg => 176, plusmn => 177, sup2 => 178,
sup3 => 179, acute => 180, micro => 181, para => 182, middot => 183, cedil =>
184, sup1 => 185, ordm => 186, raquo => 187, frac14 => 188, frac12 => 189,
frac34 => 190, iquest => 191, Agrave => 192, Aacute => 193, Acirc => 194,
Atilde => 195, Auml => 196, Aring => 197, AElig => 198, Ccedil => 199, Egrave
=> 200, Eacute => 201, Ecirc => 202, Euml => 203, Igrave => 204, Iacute => 205,
Icirc => 206, Iuml => 207, ETH => 208, Ntilde => 209, Ograve => 210, Oacute =>
211, Ocirc => 212, Otilde => 213, Ouml => 214, times => 215, Oslash => 216,
Ugrave => 217, Uacute => 218, Ucirc => 219, Uuml => 220, Yacute => 221, THORN
=> 222, szlig => 223, agrave => 224, aacute => 225, acirc => 226, atilde =>
227, auml => 228, aring => 229, aelig => 230, ccedil => 231, egrave => 232,
eacute => 233, ecirc => 234, euml => 235, igrave => 236, iacute => 237, icirc
=> 238, iuml => 239, eth => 240, ntilde => 241, ograve => 242, oacute => 243,
ocirc => 244, otilde => 245, ouml => 246, divide => 247, oslash => 248, ugrave
=> 249, uacute => 250, ucirc => 251, uuml => 252, yacute => 253, thorn => 254,
yuml => 255, Alpha => 913, alpha => 945, Beta => 914, beta => 946, Gamma =>
915, gamma => 947, Delta => 916, delta => 948, Epsilon => 917, epsilon => 949,
Zeta => 918, zeta => 950, Eta => 919, eta => 951, Theta => 920, theta => 952,
Iota => 921, iota => 953, Kappa => 922, kappa => 954, Lambda => 923, lambda =>
955, Mu => 924, mu => 956, Nu => 925, nu => 957, Xi => 926, xi => 958, Omicron
=> 927, omicron => 959, Pi => 928, pi => 960, Rho => 929, rho => 961, Sigma =>
931, sigmaf => 962, sigma => 963, Tau => 932, tau => 964, Upsilon => 933,
upsilon => 965, Phi => 934, phi => 966, Chi => 935, chi => 967, Psi => 936, psi
=> 968, Omega => 937, omega => 969, thetasym => 977, upsih => 978, piv => 982,
forall => 8704, part => 8706, exist => 8707, empty => 8709, nabla => 8711, isin
=> 8712, notin => 8713, ni => 8715, prod => 8719, sum => 8721, minus => 8722,
lowast => 8727, radic => 8730, prop => 8733, infin => 8734, ang => 8736, and =>
8743, or => 8744, cap => 8745, cup => 8746, int => 8747, there4 => 8756, sim =>
8764, cong => 8773, asymp => 8776, ne => 8800, equiv => 8801, le => 8804, ge =>
8805, sub => 8834, sup => 8835, nsub => 8836, sube => 8838, supe => 8839, oplus
=> 8853, otimes => 8855, perp => 8869, sdot => 8901, loz => 9674, lceil =>
8968, rceil => 8969, lfloor => 8970, rfloor => 8971, lang => 9001, rang =>
9002, larr => 8592, uarr => 8593, rarr => 8594, darr => 8595, harr => 8596,
crarr => 8629, lArr => 8656, uArr => 8657, rArr => 8658, dArr => 8659, hArr =>
8660, bull => 8226, prime => 8242, Prime => 8243, oline => 8254, frasl => 8260,
weierp => 8472, image => 8465, real => 8476, trade => 8482, euro => 8364,
alefsym => 8501, spades => 9824, clubs => 9827, hearts => 9829, diams => 9830,
OElig => 338, oelig => 339, Scaron => 352, scaron => 353, Yuml => 376, fnof =>
402, ensp => 8194, emsp => 8195, thinsp => 8201, zwnj => 8204, zwj => 8205, lrm
=> 8206, rlm => 8207, ndash => 8211, mdash => 8212, lsquo => 8216, rsquo =>
8217, sbquo => 8218, ldquo => 8220, rdquo => 8221, bdquo => 8222, dagger =>
8224, Dagger => 8225, hellip => 8230, permil => 8240, lsaquo => 8249, rsaquo =>
8250, circ => 710, tilde => 732 );

my %texescseq= ( "^" => "\\textasciicircum ", "~" => "\\textasciitilde ",
    "*" => "\\textasteriskcentered ", "\\" => "\\textbackslash ",
    "|" => "\\textbar ", "<" => "\\textless ", ">" => "\\textgreater " );
my $texescchars= quotemeta join("", keys %texescseq, "\$%_{}&\#");

my %texcodepoint= ( 177 => "\$\\pm\$\\relax ", 960 => "\$\\pi\$\\relax ", 8776 => "\$\\approx\$\\relax " );
sub texentitity
{
  my $entname= shift;
  my $codepoint;

  if( $entname =~ /^#(\d+)$/ ) {
    $codepoint= $1;
  }
  elsif( $entname =~ /^#x([a-fA-F\d]+)$/ ) {
    $codepoint= hex($1);
  }
  else {
    $codepoint= $namedents{$entname};
    return "\\&$entname;" unless $codepoint;
  }
  return $texcodepoint{$codepoint} if $texcodepoint{$codepoint};
  my $c= chr($codepoint);
  $c= $texescseq{$c} || "\\$c" if $c =~ /^[$texescchars]/o;
  return $c;
}

my %tag2texblock= ( b => "{\\bf ", i => "{\\it ", tt => "{\\tt ",
    u => "\\underline{", big => "{\\big ", small => "{\\small ",
    em => "{\\em ", strong => "{\\bf " );
my %tag2texenv= ( ul => "itemize", ol => "enumerate", center => "center", pre => "alltt" );
my %tag2texother= ( br => [ "\\\\ ", "" ], li => [ "\\item ", "" ],
    sub => [ "\${}_{\\hbox{\\scriptsize ", "}}\$" ],
    sup => [ "\${}^{\\hbox{\\scriptsize ", "}}\$" ],
    a => [ "\\href{<>}{", "}", "href" ],
    img => [ "\\includegraphics[scale=0.5]{<>}", "", "src" ],
# The complicated LaTeX table preamble erases the first column by assigning it
# to a box that is never used and omitting cell spacing.  This allows to
# transcribe each <td> and <th> to a TeX table separator "&".  The invisible
# \vrule makes the cells higher.
    table => [ <<EOF, "\\end{longtable}\n" ],
\\begin{longtable}[l]{\@{}>{\\setbox0=\\hbox to 0pt\\bgroup}l<{\\hss\\egroup
}\@{}|*{100}{>{\\vrule width 0pt height 2.5ex depth 1.25 ex}l|}}
\\hline
EOF
    tr => [ "", " \\\\\n\\hline\n" ], td => [ "&", ""], th => [ "&", "" ] );

# Convert an HTML tag allowed in doc comments to equivalent TeX.
# -> HTML tag
# <- TeX replacement or empty string for unknown tags
sub tag2tex
{
  my ($end, $tagname)= $_[0] =~ m!^<(/)?\s*(\w+)[^>]*>$! or return "";

  if( my $blockstart= $tag2texblock{$tagname} ) {
    return $end ? "}" : $blockstart;
  }
  elsif( my $envname= $tag2texenv{$tagname} ) {
    return $end ? "\\end{$envname}\n" : "\\begin{$envname}";
  }
  elsif( my $other= $tag2texother{$tagname} ) {
    my $tex= $end ? $$other[1] : $$other[0];
    return $tex unless @$other > 2 && $tex =~ m!<>!;
    $_[0] =~ m!\b$$other[2]\b=(?:"([^"]*)"|([^ >]*))!i;
    my $attrval= defined($1) ? $1 : defined($2) ? $2 : "";
    $tex =~ s!<>!$attrval!g;
    return $tex;
  }
  return "";
}


# Convert document text that may contain some HTML markup to TeX.
# -> Original text
# <- Converted text
sub doc2tex
{
  my $text= shift;

  $text =~ s/(?:(<[^>]*>)|&(#?\w+);|([$texescchars]))/defined($1) ? tag2tex($1)
              : defined($2) ? texentitity($2) : $texescseq{$3} || "\\$3"/oge;
  return $text;
}



# Return TeX string suitable as a label for a declarative item.
# -> Reference to hash of declarative item
# <- String suitable for TeX \label{...} and \ref{...} commands
sub texlabel
{
  my ($decl)= @_;

  return undef unless $decl->{doclink} || $decl->{docfilename};
  my $label= $decl->{doclink} || ($unitdirs{$decl->{type}} . "/" . $decl->{docfilename});
  $label =~ s/\#/::/g;
  # disambiguate overloaded funtions, see labelfuncproc():
  $label .= "-$decl->{label}" if $decl->{label};
  return $label;
}


# TeX hyperlink to a declarative item.
# -> Link text
#    Reference to hash of declarative item to link to; may be undef to simplify
#    calling context, then text is returned as is.  If the item is marked
#    internal, the hyperlink is also omitted.
sub texref
{
  my ($text, $decl)= @_;

  return $text unless $decl && ($decl->{doclink} || $decl->{docfilename}) && !$decl->{doc}{internal};
  return "\\hyperref[" . texlabel($decl) . "]{$text}";
}



my $texfileerr= 0;

# Create top-level TeX file containing table of contents and including the TeX
# files of all documented design units.
# -> Reference to array of contexts to be documented in LaTeX
#    Reference to array of packages to be documented in LaTeX
#    Reference to array of entities to be documented in LaTeX
sub texall
{
  my ($conts, $packs, $ents)= @_;
  my $fname= File::Spec->catfile($config{outputdir}, "latex", "$config{prefix}top.tex");

  if( !open(TOP, ">$fname") ) {
    limitfileerr("Cannot create output file $fname", \$texfileerr);
    return;
  }
  print TOP <<EOF;
\\documentclass[twoside,11pt]{article}
\\usepackage[utf8]{inputenc}
\\usepackage{amsmath}
\\usepackage{geometry}
\\usepackage{graphicx}
\\usepackage{alltt}
\\usepackage{longtable}
\\usepackage{tabu}
\\usepackage{listings}
\\usepackage{color}
\\usepackage{hyperref}

\\geometry{top=20mm,bottom=20mm,left=30mm,right=30mm}

\\lstset{language=vhdl,basicstyle=\\ttfamily}

\\parindent 0pt
\\parskip 3pt plus 3pt
\\newdimen\\texindent
\\texindent=15mm

\\def\\txbrief{\\em}
\\def\\txdesc{}

\\input{$config{prefix}style.tex}

\\begin{document}

\\tableofcontents

\\clearpage

EOF
  for my $ary (@_) {
    next unless $ary && @$ary;
    print TOP "\\section{", ucfirst($unitdirs{$$ary[0]{type}}), "}\n\n";
    print TOP "\\input{", $config{prefix}, $unitdirs{$$ary[0]{type}}, ".tex}\n\n";
#    my $docdir= File::Spec->catfile($unitdirs{$$ary[0]{type}}, "");
#    print TOP "\\input{${docdir}$$_{docfilename}}\n" for @$ary;
#    print TOP "\n\n";
  }
  print TOP <<EOF;

\\end{document}

EOF
  close TOP;

  texstyle();

  if( $conts && @$conts ) {
    my $fname= File::Spec->catfile($config{outputdir}, "latex", $config{prefix} . $unitdirs{$$conts[0]{type}} . ".tex");
    if( !open(CONT, ">$fname") ) {
      limitfileerr("Cannot create output file $fname", \$texfileerr);
      return;
    }
    contexttex(*CONT{IO}, $_) for @$conts;
    close CONT;
  }

  if( $packs && @$packs ) {
    my $fname= File::Spec->catfile($config{outputdir}, "latex", $config{prefix} . $unitdirs{$$packs[0]{type}} . ".tex");
    if( !open(PACK, ">$fname") ) {
      limitfileerr("Cannot create output file $fname", \$texfileerr);
      return;
    }
    packagetex(*PACK{IO}, $_) for @$packs;
    close PACK;
  }

  if( $ents && @$ents ) {
    my $fname= File::Spec->catfile($config{outputdir}, "latex", $config{prefix} . $unitdirs{$$ents[0]{type}} . ".tex");
    if( !open(ENT, ">$fname") ) {
      limitfileerr("Cannot create output file $fname", \$texfileerr);
      return;
    }
    entitytex(*ENT{IO}, $_) for @$ents;
    close ENT;
  }
}


# Create and write TeX file containing style choices, style.tex, unless it
# exists already.
sub texstyle
{
  my $fname= File::Spec->catfile($config{outputdir}, "latex", "$config{prefix}style.tex");

  return if -e $fname;
  if( !open(TSTYLE, ">$fname") ) {
    limitfileerr("Cannot create output file $fname", \$texfileerr);
    return;
  }
  print TSTYLE <<EOF;

\\def\\txbrief{\\em}
\\def\\txdesc{}

\\texindent=15mm

% Customisation of code listing appearance could go here:
% \\lstset{basicstyle=\\ttfamily,keywordstyle=\\color{blue},identifierstyle=\\color{red}}

EOF
}


my $texindpar= "\\hangindent\\texindent \\hangafter=0 ";


# \lstset{basicstyle=\ttfamily,keywordstyle=\color{blue},identifierstyle=\color{red},commentstyle=\color{darkgreen},stringstyle=\color{brown}}
# \lstset{language=vhdl,lineskip=-2mm}
# \begin{lstlisting}
# \lstinline$type mytype;$


# Assumptions / limitations:
# IP users don't need to know about source files, architectures/configurations,
# synthesis / simulation (apply to architectures), testbenches; and must not
# see internal
# unsure about: Author, last change date; attributes ?
# new "example" designation to document architectures / package bodies too?


# Print detailed description of design unit.  The doxygen directive @li for
# list items is not supported.
# -> File handle to print to
#    Reference to array containing paragraphs and list items of description
sub printdesctex
{
  my ($handle, $desc, $indflag)= @_;

  print $handle "{\\txdesc\n";
  for my $line (@$desc) {
    print $handle doc2tex($line), "\n\n";
  }
  print $handle "}\n";
}


# Print brief and detailed description of a declaration with indentation.
# -> File handle to print to
#    Reference to hash of declaration to document
sub texbriefdescindent
{
  my ($handle, $obj)= @_;

  if( $obj->{doc}{brief} ) {
    print $handle "$texindpar\n{\\txbrief\n",
                  doc2tex($obj->{doc}{brief}), "\n}\n\n";
  }
  if( $obj->{doc}{description} && @{$obj->{doc}{description}} ) {
    print $handle "{\\txdesc\n";
    for my $line (@{$obj->{doc}{description}}) {
      print $handle "$texindpar\n", doc2tex($line), "\n\n";
    }
    print $handle "}\n\n";
  }
}


# Print TeX code for a list of ports, generics or constants.  The calling
# context should have removed internal items from the list (because there may
# be none left).
# -> File handle to print to
#    Reference to array of hashes representing the generics/ports/...
#    (optional) indentation in units of \texindent
sub printportlisttex
{
  my ($handle, $list, $ind)= @_;
  my $indskip= $ind ? "\\hskip $ind\\texindent " : "";
  my $indp1par= "\\hangindent " . (($ind//0)+1) . "\\texindent \\hangafter=0 ";

  print $handle "\\vskip -1ex \\begin{longtabu}[l]{\@{}l c\@{}l l}\n";
  for my $gp (@$list) {
    print $handle $indskip, texcode($gp->{name}), "&";
    if( $nogenconst{$gp->{subtype}} ) {
      print $handle "&";
      if( $gp->{subtype} eq "type" ) {
        print $handle texcode("type");
      }
      elsif( $gp->{subtype} eq "package" ) {
        print $handle "\\multicolumn2{l}{";
        print $handle texcode("new package "), texref(texcode($gp->{subname}), $gp->{instanceof});
        print $handle texcode(" generic map ( $gp->{genmapstr} )");
        print $handle "}";
      }
      else {
        print $handle "\\multicolumn2{l}{";
        my $funcproctype= "$gp->{subtype} ( $gp->{parlist} ) ";
        $funcproctype .= "return $gp->{return}" if $gp->{return};
        $funcproctype .= " is $gp->{value}" if $gp->{value};
        print $handle texcode($funcproctype), "}";
      }
    }
    else {
      print $handle "{\\it $gp->{direction}}\\hbox{\\ \\ }" if $gp->{direction};
      print $handle "&";
      print $handle textype($gp->{subtype}, $gp);
      print $handle " & ", texcode(":= $gp->{value}")
          if $gp->{value};
    }
    print $handle " \\\\\n";
    print $handle "\\noalign{$indp1par\\txbrief ", doc2tex($gp->{doc}{brief}) , "} \n"
        if $gp->{doc}{brief};
    map { print $handle "\\noalign{$indp1par\\txdesc ", doc2tex($_), "} \n"; }
                          @{$gp->{doc}{description}};
    next unless $gp->{type} eq "const";
    for( qw(deprecated internal) ) {
      print $handle "\\noalign{$indp1par ", ucfirst($_), "} \n"
          if $gp->{doc}{$_};
    }
    if( $gp->{doc}{see} && @{$gp->{doc}{see}} ) {
      print $handle "\\noalign{$indp1par {\\bf See also:} ", join(", ", texref(texid($_->[0]), $_->[1]),
                      @{$gp->{doc}{see}}), "} \n";
    }
  }
  print $handle "\\end{longtabu}\n\n";
}


# Print the common TeX code for a top-level design unit.
# -> File handle to print to
#    Reference to hash representing the entity etc.
#    String for subsection header, or undef if simply "<type> <name>"
sub printobjtex
{
  my ($handle, $obj, $title)= @_;

  if( ! defined $title ) {
    $title= ucfirst($obj->{type}) . " " . texid($obj->{fullname});
  }
  print $handle "\n\n\\subsection{$title}\n\\label{", texlabel($obj), "}\n\n";
  print $handle "{\\txbrief ", doc2tex($obj->{doc}{brief}), "}\n\n" 
        if $obj->{doc}{brief};
  print $handle "{\\bf Deprecated}\n\n" 
        if $obj->{doc}{deprecated};
  if( $obj->{doc}{author} ) {
    print $handle ($obj->{doc}{author} =~ /,|;|\band\b/?
                                        "Authors: " : "Author: ");
    print $handle doc2tex($obj->{doc}{author}), "\\\\\n";
  }
  print $handle "Version: ", doc2tex($obj->{doc}{date}), "\\\\\n"
        if $obj->{doc}{date};
  print $handle "Version: ", doc2tex($obj->{doc}{version}), "\\\\\n"
        if $obj->{doc}{version};
  if( $obj->{doc}{description} && @{$obj->{doc}{description}} ) {
    print $handle "\n\\subsubsection*{Detailed description}\n\n";
    printdesctex($handle, $obj->{doc}{description});
  }
  if( $obj->{doc}{see} && @{$obj->{doc}{see}} ) {
    print $handle "{\\bf See also:} ", join(", ",
            map texref(texid($_->[0]), $_->[1]), @{$obj->{doc}{see}}), "\n\n";
  }
}


# Write TeX code for an entity.
# -> File handle to print to
#    Reference to hash representing entity
sub entitytex
{
  my ($handle, $ent)= @_;

  printobjtex($handle, $ent);
  if( $config{eyecandy} ) {
    entitytexdiagram($handle, $ent);
  }
  if( my @gens= @{$ent->{childtype}{generic}} ) {
    print $handle "\n\n\\subsubsection*{Generics}\n\n";
    printportlisttex($handle, \@gens);
  }
  if( my @ports= @{$ent->{childtype}{port}} ) {
    print $handle "\n\n\\subsubsection*{Ports}\n\n";
    printportlisttex($handle, \@ports);
  }
}


# Write TeX code for an entity block diagram.
# -> File handle to print to
#    Reference to hash representing entity
sub entitytexdiagram
{
  my ($handle, $ent)= @_;
  my (@inports, @outports, @linkports);

  for (@{$ent->{childtype}{port}}) {
    my $dir= $_->{direction};
    if( $dir eq "linkage" ) {
      push @linkports, $_;
    }
    elsif( $dir eq "in" ) {
      push @inports, $_;
    }
    elsif( $dir eq "out" ) {
      push @outports, $_;
    }
    else {  # inout and buffer are / can be bidirectional
      push @inports, $_;
      push @outports, $_;
    }
  }
  my $framewidth= "0.7pt";
  my $vframe= "\\vrule width $framewidth height 2.4ex depth 1ex ";
  my $vpad= <<EOF;
& \\omit \\vrule width $framewidth height 1pt depth 0pt
  \\hfil \\vrule width $framewidth height 1pt depth 0pt &\\cr
EOF
  print $handle <<EOF;

\\vskip 3ex
\\hbox to \\textwidth{\\hss\\vbox{
\\fontfamily{cmss}\\fontsize{6}{6}\\selectfont
\\offinterlineskip
\\def\\ioarr{{\$\\rightarrow\$}}
\\halign{\\hbox to 0pt{\\hss #}& $vframe\\  # \\hfil $vframe &\\hbox to 0pt{# \\hss}\\cr
\\noalign{\\hrule height $framewidth}
$vpad\%
EOF
  print $handle "& \\omit\\scriptsize $vframe\\ ", texid($ent->{fullname}), "\\qquad\\hfil $vframe & \\cr\n";
  for (@{$ent->{childtype}{generic}}) {
    print $handle "& ", texid($_->{name}), "\\qquad & \\cr\n";
  }
  print $handle "$vpad\\noalign{\\hrule height $framewidth}\n$vpad";
  while( @inports && @outports ) {
    my ($in, $out)= map texid($_->{name}), shift(@inports), shift(@outports);
    print $handle "\\ioarr\\ & $in \\qquad\\hfill $out & \\ \\ioarr\\cr\n";
  }
  while( @inports ) {
    my $in= texid ${shift @inports}{name};
    print $handle "\\ioarr\\ & $in \\qquad\\hfill & \\cr\n";
  }
  while( @outports ) {
    my $out= texid ${shift @outports}{name};
    print $handle "& \\qquad\\hfill $out & \\ \\ioarr\\cr\n";
  }
  if( @linkports ) {
    print $handle "$vpad\\noalign{\\hrule height $framewidth}\n$vpad";
    for (@linkports) {
      print $handle "& ", texid($_->{name}), "\\qquad & \\cr\n";
    }
  }
  print $handle <<EOF;
$vpad\%
\\noalign{\\hrule height $framewidth}
}}\\hss}

EOF
}


# Generate TeX code for context declaration.  As for the HTML output, separate
# lists of explicitly and implicitly referenced packages are printed.
# -> File handle to print to
#    Reference to hash representing context declaration
sub contexttex
{
  my ($handle, $cont)= @_;
  my (%conts, %libs, %uses);

  printobjtex($handle, $cont);

  for ( @{$cont->{children}}) {
    if( $_->{type} eq "library" ) {
      $libs{lc($_->{name})}= $_;
    }
    elsif( $_->{type} eq "use" && $_->{subtype} eq "package" ) {
      $uses{lc($_->{name})}= $_;
    }
    elsif( $_->{type} eq "context" && $_->{subtype} eq "reference" ) {
      $conts{lc($_->{name})}= $_;
    }
  }
  if( %conts ) {
    print $handle "\n\n\\subsubsection*{Context references}\n\n";
    for (sort keys %conts) {
      print $handle texref(texid($_), $conts{$_}{object}), " \n\n";
      texbriefdescindent($handle, $conts{$_});
    }
    print $handle "\n";
  }
  if( %uses ) {
    print $handle "\n\n\\subsubsection*{Explicit use statements}\n\n";
    for (sort keys %uses) {
      my $refobj= $uses{$_}{object};
      if( ! $refobj || ! $refobj->{doclink} ) {
        $refobj= $uses{$_}{package};
      }
      print $handle texref(texid($_), $refobj), " \n\n";
      texbriefdescindent($handle, $uses{$_});
    }
    print $handle "\n";
  }
  else {
    print $handle "\n\n\\subsubsection*{No explicit use statements}\n\n";
  }
  if( %conts && $cont->{alluses} && %{$cont->{alluses}} > %uses ) {
    print $handle "\n\n\\subsubsection*{All package declarations made available}\n\n";
    print $handle "\n\\begin{longtabu}[l]{\@{}l l}\n";
    for my $usepack (sort keys %{$cont->{alluses}}) {
      my $use= $cont->{alluses}{$usepack};
      # The "type" entry distinguishes a hash representing a use statement from
      # a hash containing a list of non-"all" use statements.
      my $pack= $use->{type} ? $use->{package} : $use->{(keys %$use)[0]}->{package};
      print $handle "From " unless $use->{type};
      print $handle texref(texcode($usepack), $pack);
      print $handle ":" unless $use->{type};
      print $handle " & ";
      if( ! $use->{type} ) {
        print $handle join(", ",
              map texref(texid($_), $use->{$_}{object}), sort keys %$use);
      }
      elsif( $pack && $pack->{doc}{brief} ) {
        print $handle "{\\txbrief ", doc2tex($pack->{doc}{brief}), "}\n";
      }
      print $handle " \\\\\n";
    }
    print $handle "\\end{longtabu}\n\n";
  }
}


# Print description of component, procedure or function.
# -> File handle to print to
#    Reference to hash representing object
sub printcommontex
{
  my ($handle, $obj)= @_;

  texbriefdescindent($handle, $obj);
  if( $obj->{doc}{param} && @{$obj->{doc}{param}} ) {
    print $handle "${texindpar}{\\bf Parameters:}\n\\begin{longtabu}[l]{\@{}l X}\n";
    for my $par (@{$obj->{doc}{param}}) {
      $par =~ /^(?:\[(\w+)\]\s*)?(\w+)\s+(.*)$/s or next;
      print $handle "\\hskip\\texindent ", texid($2), " & \\quad ", doc2tex($3), "\\\\\n";
    }
    print $handle "\\end{longtabu}\n\n";
  }
  print $handle "${texindpar}Return value: ", doc2tex($obj->{doc}{return}), "\n\n"
      if $obj->{doc}{return};
  print $handle "${texindpar}{\\bf Deprecated}\n\n" 
        if $obj->{doc}{deprecated};
  if( $obj->{doc}{see} && @{$obj->{doc}{see}} ) {
    print $handle "${texindpar}See also: ", join(", ",
            map texref(texid($_->[0]), $_->[1]), @{$obj->{doc}{see}}), "\n\n";
  }
}


# Print TeX subsubsection describing type declarations in a package.
# -> File handle to print to
#    Reference to hash representing package
sub printtypestex
{
  my ($handle, $pack)= @_;

  my @types= grep ! $_->{doc}{internal}, @{$pack->{childtype}{type}};
  return unless @types;
  print $handle "\n\\subsubsection*{Type declarations}\n\n";

  for my $type (@types) {
    print $handle "\n\\label{", texlabel($type), "}\n";
    my $typestr= ($type->{subtype} eq "subtype"? "subtype ": "type ") . $type->{name} . " is ";
    if( $type->{subtype} eq "record" ) {
      print $handle texcode($typestr . "record"), "\n\n";
      texbriefdescindent($handle, $type);
      if( my @elements= @{$type->{children} || []} ) {
        print $handle "$texindpar\nElements:\n\n";;
        printportlisttex($handle, \@elements, 1);
      }
    }
    elsif( $type->{subtype} eq "units" ) {
      print $handle texcode($typestr . "units"), "\n\n";
      texbriefdescindent($handle, $type);
      for my $chain (@{$type->{chains}}) {
        print $handle "$texindpar\n";
        my $u= $chain;
        my $closeparens= "";
        while( @$u > 1 ) {
          print $handle texid($$u[0]), " = $$u[1] ";
          $u= $$u[2];
          if( @$u > 1 ) {
            print $handle "( ";
            $closeparens .= " )";
          }
        }
        print $handle texcode($$u[0]), $closeparens, "\n\n";
      }
    }
    else {
      if( $type->{subtype} =~ /type$/ ) {
        print $handle texcode($typestr . $type->{definition}), "\n\n";
      }
      elsif( $type->{subtype} =~ /^protected/i ) {
        print $handle texcode($typestr . "protected"), " \$\\ldots\$\n\n";
      }
      else {
        print $handle texcode($typestr), " ???\n\n";
      }
      texbriefdescindent($handle, $type);
    }
    print $handle "${texindpar}{\\bf Deprecated}\n\n" 
          if $type->{doc}{deprecated};
    if( $type->{doc}{see} && @{$type->{doc}{see}} ) {
      print $handle "${texindpar}{\\bf See also:} ",
            join(", ", texref(texid($_->[0]), $_->[1]), @{$type->{doc}{see}}), "\n\n";
    }
  }
}


{
# Regex for splitting function/procedure declarations into shorter strings
# before markup to allow line breaking:
my $openchars= "([<\"";
my $minlenm2= 10;
my $codepartre= qr/[$openchars\w].{$minlenm2,}?[^$openchars](?:\b(?=\w)|(?=[$openchars]))|.+$/o;

# Print TeX subsubsection describing all function and procedure declarations of
# a library unit, in the order in which they appear in the source.
# -> File handle to print to
#    Reference to hash representing the top-level declaration (library unit)
#    Flag indicating the declaration is in a package
sub printfuncproctex
{
  my ($handle, $obj, $inpack)= @_;
  my @funcprocs;

  @funcprocs= grep ! $_->{doc}{internal}, @{$obj->{childtype}{funcproc}};
  return unless @funcprocs;
  print $handle "\n\\subsubsection*{Functions and procedures}\n\n";
  for my $func (@funcprocs) {
    my $gen= $func->{childtype}{generic} && @{$func->{childtype}{generic}} ?
             "generic " : "";
    my $arglist= $func->{parlist} ?  " (" . $func->{parlist} . ")" : "";

    print $handle "\n\\label{", texlabel($func), "}\n"
        if $func->{label};
        # ->{label} serves to disambiguate overloaded functions and is set if
        # the function is referenced elsewhere; otherwise we need no TeX label
    my $declcode= "$gen$func->{type} $func->{name}$arglist" .
                  ($func->{subtype}? " return $func->{subtype}" : "");
    my @declparts= $declcode =~ /\G($codepartre)/g;
    s/ $// for @declparts;
    print $handle "\\hangindent 0.5\\texindent \\hangafter=1\n",
                  join("\n", map texcode($_),  @declparts), "\n\n";
    print $handle "{\\bf impure}\n\n" if $func->{pure} && $func->{pure} eq "impure";
    printcommontex($handle, $func);
    if( $gen ) {
      print $handle "Generics:\n\n";
      printportlisttex($handle, @{$func->{childtype}{generic}});
    }
    elsif( $func->{instanceofname} ) {
      print $handle "Instance of ";
      print $handle (!$func->{instanceof} ? texid($func->{instanceofname}) :
            texref(texid($func->{instanceof}{fullname}), $func->{instanceof})),
              "\n\n";
      if( $func->{genericmap} && @{$func->{genericmap}} ) {
        print $handle "{\\bf Generic map:}\n\\begin{longtabu}[l]{\@{}l X}\n";
        map { print $handle texid($$_[0]), " & \$\\Rightarrow\$ ", texcode($$_[1]), " \\\\\n"; } @{$func->{genericmap}};
        print $handle "\\end{longtabu}\n\n";
      }
    }
  }
}

}


# Write TeX code describing a package.
# -> File handle to print to
#    Reference to hash representing package
sub packagetex
{
  my ($handle, $pack)= @_;

  my $packstr= @{$pack->{childtype}{generic}} || $pack->{instances} ?
                "Generic package" : "Package";
  printobjtex($handle, $pack, $packstr . " " . texid($pack->{fullname}));

# Do we need a summary in the TeX output?
#  texpackagesummary($handle, $pack) if $config{packagesummary} ne "never";

  if( my @gens= @{$pack->{childtype}{generic}} ) {
    print $handle "\n\n\\subsubsection*{Generics}\n\n";
    printportlisttex($handle, \@gens);
  }
  if( $pack->{instances} &&
        (my @insts= grep ! $_->{doc}{internal}, @{$pack->{instances}}) ) {
    print $handle "\n\n\\subsubsection*{Instances}\n";
    for my $inst (@insts) {
      print $handle "\n\\label{", texlabel($inst), "}\n";
      print $handle "\\subsubsubsection*{", texid($inst->{fullname}), "}\n\\label{", texlabel({$inst}), "}\n\n";
      printcommontex($handle, $inst);
      if( $inst->{genericmap} && @{$inst->{genericmap}} ) {
        print $handle "{\\bf Generic map:}\n\\begin{longtabu}[l]{\@{}l X}\n";
        map { print $handle texid($$_[0]), " & \$\\Rightarrow\$ ", texcode($$_[1]), " \\\\\n"; } @{$inst->{genericmap}};
        print $handle "\\end{longtabu}\n\n";
      }
      else {
        print $handle "{\\bf Default generic values}\n";
      }
    }
  }
  printtypestex($handle, $pack);
  if( my @consts= @{$pack->{childtype}{constant}} ) {
    print $handle "\n\n\\subsubsection*{Constants}\n\n";
    printportlisttex($handle, \@consts);
  }
  printfuncproctex($handle, $pack);
  if( my @comps= @{$pack->{childtype}{component}} ) {
    print $handle "\n\n\\subsubsection*{Component declarations}\n\n";
    for my $comp (@comps) {
      print $handle "\n\\label{", texlabel($comp), "}\n";
      print $handle "{\\bf ", texid($comp->{name}), "}\n\n";
      printcommontex($handle, $comp);
      print $handle "${texindpar}Binding: ", texref(texid($comp->{binding}{fullname}), $comp->{binding}), "\n\n"
            if $comp->{binding} && ! $comp->{binding}{doc}{internal};
    }
  }
}


#sectionmain##################################################################
##############################################################################
####                    Main program
##############################################################################
##############################################################################

@vhdlfiles= @{parseargv(\@ARGV)};

if( $config{benchmark} ) {
  eval { require Time::HiRes; };
  if( $@ ) {
    print STDERR "Module Time::HiRes not found, which is required for --benchmark.  Aborting.\n";
    exit 1;
  }
}

$config{absoutputdir}= mycanonpath($config{outputdir});

if( uniq_files(\@vhdlfiles) ) {
  print STDERR "Warning: Duplicate source file names were removed.\n";
}

unless( @vhdlfiles ) {
  print "No source files given - nothing to be done.\n"
        unless $config{quiet};
  exit;
}

# This is the only data structure relating to declarative items which does not
# conform to our canonical format (see parsefile()).  %libraries is a hash
# mapping the library name to an array reference containing all (top-level)
# declarations in that library.
my %libraries;

# Generate hyperlinks to files and unambiguous names for source HTML files:
{
my %docfilenames;

for my $file (@vhdlfiles) {
  my $trunkname;
  (undef, undef, $trunkname)= File::Spec->splitpath($file->{name});
  $trunkname =~ s/\.[^\.]*$//;
  $file->{link}= sourcelink($file->{name}) if $config{sourcelinks};
  $file->{docfilename}= "$config{prefix}$trunkname.html";
  push @{$docfilenames{$file->{docfilename}}}, $file;
}

$config{prepathlen}= @vhdlfiles == 1 ? 0 :
                       length(commonprepath(map $_->{name}, @vhdlfiles));

# Disambiguate duplicate source HTML file names
for my $docfiles (values %docfilenames) {
  next if @$docfiles == 1;
  for my $file (@$docfiles) {
    my $suffix= substr(Digest::MD5::md5_hex($file->{name}), 0, 8);
    $file->{docfilename} =~ s/\.html$/_$suffix.html/i;
  }
}

}

prepareoutput();
prepareparallel();

while( defined(my $fileind= parsenext(\@vhdlfiles)) ) {
  my $file= $vhdlfiles[$fileind];
  push @{$libraries{lc($file->{libname})}}, @{$file->{children}};
}

getgitmeta();

print "Scrunching and twisting everything together...\n" unless $config{quiet};
benchmark() if $config{benchmark};

my @entities;
my @architectures;
my @configurations;
my @packages;
my @packagebodies;
my @contexts;
my @usertypes;
my @userdeclids;
my @pslids;
my $duplicate= 0;
my @alsotypes= qw(record units protected protectedbody);

# Build entity, architecture, configuration and package lists
for my $lib (keys(%libraries)) {
  my $decls= $libraries{$lib};
  for (@$decls) {       # create these entries to avoid "undefined" warnings
    $_->{children} ||= [];
    $_->{childtype} ||= {};
    $_->{allinstances} ||= [];
    $_->{allprocesses} ||= [];
    $_->{allpsldefs} ||= [];
  }
  my @ents= grep $_->{type} eq "entity", @$decls;
  $duplicate += uniq_objs(\@ents, $lib);
  my @archs= grep $_->{type} eq "architecture", @$decls;
  $duplicate += uniq_objs(\@archs, $lib);
  my @confs= grep $_->{type} eq "configuration", @$decls;
  $duplicate += uniq_objs(\@confs, $lib);
  my @packs= grep $_->{type} eq "package", @$decls;
  $duplicate += uniq_objs(\@packs, $lib);
  my @pbods= grep $_->{type} eq "packagebody", @$decls;
  $duplicate += uniq_objs(\@pbods, $lib);
  my @conts= grep $_->{type} eq "context" && $_->{subtype} eq "declaration", @$decls;
  $duplicate += uniq_objs(\@conts, $lib);
  for my $ac (@archs, @confs) {
    $ac->{libname} = $lib;
    next if $ac->{objname} =~ /\..*\./ || 
  ($ac->{objname} =~ /^([^.\s]+)\s*\./ && grep($_ eq $1, keys(%libraries)));
    $ac->{objname}= "$lib.$ac->{objname}";
  }
  for (@ents, @packs, @pbods, @conts) {
    $_->{libname} = $lib;
    $_->{fullname}= "$lib.$_->{name}";
  }
  add_selnames($lib, @ents, @archs, @confs, @packs, @pbods, @conts);
  push @entities, @ents;
  push @architectures, @archs;
  push @configurations, @confs;
  push @packages, @packs;
  push @packagebodies, @pbods;
  push @contexts, @conts;
  push @userdeclids, map lc($_->{name}),
        map( ($_, @{$_->{childtype}{function} ||= []},
                  @{$_->{childtype}{procedure} ||= []},
                  @{$_->{childtype}{component} ||= []},
                  @{$_->{allinstances}} ),
            (@archs, @packs, @pbods) );
  push @userdeclids, map lc($_->{name}), grep $_->{name},
                    map @{$_->{allprocesses}}, @archs;
  push @userdeclids, map lc($_->{name}), (@ents, @confs, @conts);
  push @pslids, map lc($_->{name}), grep $_->{name},
                map @{$_->{childtype}{psl} || []}, (@archs, @packs)
    if $config{psl};
  # Restore "type" hash entry of some type declarations that was set
  # incorrectly to facilitate parsing.
  for my $obj (@archs, @packs, @pbods) {
    for my $ty (@alsotypes) {
      next unless $obj->{childtype}{$ty};
      map { $_->{type}= "type"; } @{$obj->{childtype}{$ty}};
      push @{$obj->{childtype}{type}}, @{$obj->{childtype}{$ty}};
      undef $obj->{childtype}{$ty};
    }
    push @usertypes, map lc($_->{name}), @{$obj->{childtype}{type} ||= []};
    $obj->{childtype}{constant} ||= [];
    $obj->{childtype}{funcproc} ||= [];
  }
}

@SPANCLASS{@userdeclids}= ($SPDID) x @userdeclids;
@userdeclids= ();
@SPANCLASS{@usertypes}= ($SPTYID) x @usertypes;
@usertypes= ();
if( $config{psl} ) {
  @SPANCLASS{@PSLWORDS}= ($SPPSL) x @PSLWORDS;
  @SPANCLASS{@pslids}= ($SPPID) x @pslids;
  @pslids= ();
}

print STDERR "Warning: Duplicate declarations were discarded.\n" if $duplicate;


for my $ent (@entities)
{
  # Assign architectures to entities
  # Important - even if there are none, @{$ent->{architectures}} exists
  @{$ent->{architectures}}= 
            grep lc($_->{objname}) eq lc($ent->{fullname}), @architectures;
  map $_->{entity}= $ent, @{$ent->{architectures}};

  # Assign configurations to entities
  # Important - even if there are none, @{$ent->{configurations}} exists
  @{$ent->{configurations}}= 
          grep lc($_->{objname}) eq lc($ent->{fullname}), @configurations;
  map $_->{entity}= $ent, @{$ent->{configurations}};

  $ent->{childtype}{generic} ||= [];
  $ent->{childtype}{port} ||= [];
  # Assign @generic and @port docs to their declarations if legacy mode is on
  if( $config{compat} )
  {
    my @gens= @{$ent->{childtype}{generic}};
    my @ports= @{$ent->{childtype}{port}};
    if( @gens ) {
      # Copy generic documentation from the entity docs to its generic(s)
      for my $docname (keys(%{$ent->{doc}{generic}})) {
        my ($subject)= grep $_->{name} eq $docname, @gens;
        if( !$subject ) {
          print STDERR "Spurious \@generic referring to non-existing generic ",
                  "$docname of entity $ent->{name} in file $ent->{filename}\n";
          next;
        }
        unshift @{$subject->{doc}{description}}, $ent->{doc}{generic}{$docname};
      }
    }
    if( @ports ) {
      # Copy port documentation from the entity docs to its port(s)
      for my $docname (keys(%{$ent->{doc}{port}})) {
        my ($subject)= grep $_->{name} eq $docname, @ports;
        if( !$subject ) {
          print STDERR "Spurious \@port referring to non-existing port ",
                  "$docname of entity $ent->{name} in file $ent->{filename}\n";
          next;
        }
        unshift @{$subject->{doc}{description}}, $ent->{doc}{port}{$docname};
      }
    }
  }

  # Match attribute specifications to declarations and to targets
  match_attributes($ent);
  # HTML file name
  $ent->{docfilename}= "$config{prefix}$ent->{fullname}.html";
}



my @orphanedarchs;

for my $arch (@architectures) {
  # Build list of architectures we do not know the entity of
  push @orphanedarchs, $arch unless $arch->{entity};
  # Match attribute specifications to declarations and to targets
  match_attributes($arch);
  # HTML file name
  $arch->{docfilename}= "$config{prefix}$arch->{objname}-$arch->{name}.html";
  for my $child (@{$arch->{children}}, @{$arch->{allinstances}}, @{$arch->{allpsldefs}}) {
    if( $labels{$child->{type}} && $child->{name} ) {
      $child->{doclink}= "../architectures/$arch->{docfilename}#"
                            . $labels{$child->{type}} . $child->{name};
    }
  }
}



my @orphanedconfs;

for my $conf (@configurations) {
  # Build list of configurations we do not know the entity of
  push @orphanedconfs, $conf unless $conf->{entity};
  # HTML file name
  $conf->{docfilename}= "$config{prefix}$conf->{objname}-$conf->{name}.html";
  # Now assign objects to the use statements
  resolve_configuration($conf, \%libraries);
}


my %emptychildtypes= ( component => [], type => [], constant => [],
    function => [], procedure => [], funcproc => [], generic => [] );

my @standalonepacks;
my @missingpacks;

# Sort out instances of generic packages first:
for my $pack (@packages)
{
  if( ! $pack->{instanceofname} ) {
    push @standalonepacks, $pack;
    next;
  }
  my $genpack= find_selname($pack->{instanceofname}, "package", $pack->{libname});
  if( $genpack ) {
    $pack->{instanceof}= $genpack;
    push @{$genpack->{instances}}, $pack;
  }
  else {    # create package hash for missing generic package
    my $packname= $pack->{instanceofname};
    $packname =~ s/^.*\.//;
    my $fullname= $pack->{instanceofname};
    $fullname= "$pack->{libname}.$packname" unless $packname =~ /\./;
    push @missingpacks,
        { type => "package", name => $packname, libname => $pack->{libname},
          fullname => $fullname, instances => [ $pack ],
          children => [], allpsldefs => [], childtype => \%emptychildtypes };
        # childtypes should be read only, so can be shared
    add_selnames($pack->{libname}, $missingpacks[-1]);
  }
}

@packages= @standalonepacks;
@standalonepacks= ();

for my $pbody (@packagebodies)
{
  # HTML file name
  $pbody->{docfilename}= "$config{prefix}$pbody->{fullname}.html";
  # Assign body to package
  my $pack= find_selname($pbody->{name}, "package", $pbody->{libname});
  if( $pack ) {
    $pbody->{package}= $pack;
    $pack->{packagebody}= $pbody;
  }
  else {    # create package hash for missing package
    push @missingpacks,
      { type => "package", name => $pbody->{name}, libname => $pbody->{libname},
        fullname => $pbody->{fullname}, packagebody => $pbody,
        children => [], allpsldefs => [], childtype => \%emptychildtypes };
      # childtypes should be read only, so can be shared
    add_selnames($pbody->{libname}, $missingpacks[-1]);
    # Find default bindings for components declared in the package
    map { $_->{binding}= find_selname($_->{name}, "entity", $pbody->{fullname}); }
                @{$pbody->{childtype}{component}};
    # Create full name and HTML link (where applicable) for declarative items in
    # package body, since we do not have a package to match
    for my $child (@{$pbody->{children}}) {
      $child->{fullname}= "$pbody->{fullname}.$child->{name}";
      if( $labels{$child->{type}} && $child->{name} ) {
        $child->{doclink}= "../packages/$pbody->{docfilename}#" .
                                  $labels{$child->{type}} . $child->{name};
      }
    }
    # Add generic subprogram declarations to selected name table, as
    # subprograms may be exported by the missing package
    add_selnames($pbody->{fullname}, grep $_->{childtype}{generic} && @{$_->{childtype}{generic}}, @{$pbody->{childtype}{funcproc}});
  }
  # Match attribute specifications to declarations and to targets
  match_attributes($pbody);
}

for my $pack (@packages, @missingpacks)
{
  # HTML file name
  $pack->{docfilename}= "$config{prefix}$pack->{fullname}.html";
  $pack->{doclink}= "packages/$pack->{docfilename}";
  # Create full name and HTML link (where applicable) for declarative items in
  # package
  for my $child (@{$pack->{children}}, @{$pack->{allpsldefs}}) {
    $child->{fullname}= "$pack->{fullname}.$child->{name}";
    if( $labels{$child->{type}} && $child->{name} ) {
      $child->{doclink}= "../packages/$pack->{docfilename}#" .
                                $labels{$child->{type}} . $child->{name};
    }
  }
  # Match attribute specifications to declarations and to targets
  match_attributes($pack);
  # Add component declarations to selected name table
  add_selnames($pack->{fullname}, @{$pack->{childtype}{component}});
  # Add type declarations to selected name table
  add_selnames($pack->{fullname}, @{$pack->{childtype}{type}});
  # Add generic subprogram declarations to selected name table
  add_selnames($pack->{fullname}, grep $_->{childtype}{generic} && @{$_->{childtype}{generic}}, @{$pack->{childtype}{funcproc}});
  # Abuse selected name database for resolving PSL definition references
  add_selnames($pack->{fullname}, @{$pack->{allpsldefs}});
  # Find default bindings for components declared in the package
  map { $_->{binding}= find_selname($_->{name}, "entity",
                            $pack->{fullname}); }
            @{$pack->{childtype}{component}};
  $pack->{childtype}{generic} ||= [];
  if( $pack->{instances} ) {
    @{$pack->{instances}}=
        sort { lc($$a{fullname}) cmp lc($$b{fullname}) } @{$pack->{instances}};
    for (@{$pack->{instances}}) {
      $_->{doclink}= "$pack->{doclink}#$labels{instance}$_->{fullname}";
    }
  }
}



# Resolve package use clauses and context references in files at the top level
# and in context declarations.
for my $obj ( @vhdlfiles, @contexts )
{
  my (@uses, @contrefs);

  if( $obj->{type} eq "context" ) {
    @uses= grep $_->{subtype} eq "package", @{$obj->{childtype}{use} || []};
    @contrefs= grep $_->{subtype} eq "reference", @{$obj->{childtype}{context} || []};
  }
  else {
    @uses= grep $_->{type} eq "use" && $_->{subtype} eq "package", @{$obj->{uses}};
    @contrefs= grep $_->{type} eq "context", @{$obj->{uses}};
  }
  for my $useclause (@uses) {
    next unless $useclause->{name} =~ /^([^.\s]+\s*\.\s*[^.\s]+)/;
    my $pack= $1;
    $useclause->{package}= find_selname($pack, "package", $obj->{libname});
    next unless $useclause->{package};
    next if $useclause->{name} =~ /\ball$/i;
    $useclause->{name} =~ /^$pack\s*\.\s*([^.\s]+)/;
    ($useclause->{object})= find_children($useclause->{package}, "name", $1);
  }
  for my $ref (@contrefs) {
    $ref->{object}= find_selname($ref->{name}, "context", $obj->{libname});
  }
}


for my $cont (@contexts)
{
  # HTML file name
  $cont->{docfilename}= "$config{prefix}$cont->{fullname}.html";
  $cont->{doclink}= "../contexts/$cont->{docfilename}";
  # Build list of [in]direct context references and use clauses
  collect_subcontexts($cont);
  # Generate flat list for resolving bindings.
  # The "type" entry distinguishes a hash representing a use statement from
  # a hash containing a list of non-"all" use statements.
  $cont->{flatalluses}= [ map $_->{type} ? ($_) : (values %$_), values %{$cont->{alluses}} ];
}


# Resolve the user-defined types in all kinds of declarations, and instances of
# generic subprograms

my @havegenerics= grep $_->{childtype}{generic} && @{$_->{childtype}{generic}},
                        @packages;

for my $obj (@architectures, @packages, @packagebodies) {
  my @typed= (@{$obj->{childtype}{constant}},
              @{$obj->{childtype}{type}},
              grep( $_->{type} eq "recordelement",
                    map( ( @{$_->{children} || []} ),
                         grep( $_->{subtype} eq "record",
                               @{$obj->{childtype}{type}} ))) );
  @{$obj->{uses}}= map $_->{type} eq "context" ?
                    ($_->{object} ? @{$_->{object}{flatalluses}} : ()) : ($_),
                       @{$obj->{uses}};
  resolve_types($obj, @typed);
  my @gensubs= grep $_->{childtype}{generic} && @{$_->{childtype}{generic}},
                    @{$obj->{childtype}{funcproc}};
  map { $_->{parent}= $obj; } @gensubs;
  push @havegenerics, @gensubs;
  my @funcprocinsts= grep $_->{instanceofname}, @{$obj->{childtype}{funcproc}};
  resolve_genfunc($obj, @funcprocinsts);
}

for my $obj (@entities) {
  @{$obj->{uses}}= map $_->{type} eq "context" ?
                    ($_->{object} ? @{$_->{object}{flatalluses}} : ()) : ($_),
                       @{$obj->{uses}};
}

for my $obj (@entities, @havegenerics) {
  my %gentypes= map { lc($_->{name}) => 1 } grep $_->{subtype} eq "type", @{$obj->{childtype}{generic}};
  $gentypes{type}= 1;
  my @typed= grep ! $gentypes{lc($_->{subtype})},
                @{$obj->{childtype}{generic}}, @{$obj->{childtype}{port} || []};
  resolve_types($obj->{parent} || $obj, @typed);
  my @packgens= grep $$_{subtype} eq "package", @{$obj->{childtype}{generic}};
  for (@packgens) {
    $$_{instanceof}= find_selname($$_{subname}, "package",
                  $obj->{parent} ? $obj->{parent}{libname} : $obj->{libname});
  }
}

@havegenerics= ();    # no longer needed


# Now take care of locally specified bindings and generic maps of instances.
# Nested configurations will be tackled below.
for my $arch (@architectures)
{
  my @topuses= reverse grep $_->{subtype} eq "package", @{$arch->{uses}};
  my @comps= @{$arch->{childtype}{component}};
  # Assign default binding to component declarations
  map { $_->{binding}= find_selname($_->{name}, "entity",
                                    $arch->{libname}); } @comps;
  my @noncompinsts;
bindcompinst:
  for my $inst (@{$arch->{allinstances}}) {
    if( $inst->{subtype} ne "component" ) {
      push @noncompinsts, $inst;
      next;
    }
    # Match component instances to component declarations.
    # First try local component declarations:
    $inst->{component}=
              elem { lc($_->{name}) eq lc($inst->{objname}) } @comps;
    # If there is no matching local component declaration, we have to find
    # one in one of the packages.  If the bare name is unique, we choose that
    # component.
    $inst->{component}= find_selname($inst->{objname}, "component")
        unless $inst->{component};
    # If not, try selected names according to use clauses.
    if( defined($inst->{component}) && $inst->{component} == 0 ) {
      for my $useclause (@topuses) {
        my $name= merge_selname($useclause->{name}, $inst->{objname});
        next unless $name;
        $inst->{component}= find_selname($name, "component");
        last if $inst->{component};
        if( $useclause->{package} && $useclause->{package}{instanceof} ) {
          $name= merge_selname($useclause->{package}{instanceof}{fullname}, $inst->{objname}); 
          $inst->{component}= find_selname($name, "component");
          if( $inst->{component} ) {
            $inst->{packinst}= $useclause->{package};
            last;
          }
        }
      }
    }
    # This procedure has the illogical side effect that an ambiguous component
    # instantiation will be shown as unresolved if no matching use clause is
    # found.
    # Now we tackle binding indications in the blocks enclosing the
    # instantiation.
    for my $use (reverse @{$inst->{uses}}) {
      next if $use->{type} eq "context" || $use->{subtype} eq "package";
      my $for= $use->{for};
      next unless $for && lc($for->{objtype}) eq lc($inst->{objname}) &&
            ( lc($for->{objnames}[0]) eq "all" ||
            elem { lc($_) eq lc($inst->{name}) } @{$for->{objnames}} );
      @{$inst->{binddoc}}= @{$for->{doc}{description}}
          if $for->{doc}{description};
      push @{$inst->{binddoc}}, @{$use->{doc}{description}}
                  if $use->{doc}{description};
      if( $use->{subtype} eq "open" ) {
        $inst->{bindopen}= 1;
        next bindcompinst;
      }
      $inst->{bindname}= $use->{name};
      $inst->{binding}= find_selname($use->{name},
                              $use->{subtype}, $arch->{libname});
      if( $inst->{binding} ) {
        $inst->{bindname}= $inst->{binding}{fullname};
        if( $use->{archname} ) {
          $inst->{archname}= $use->{archname};
          $inst->{bindarch}= elem { lc($_->{name}) eq lc($use->{archname}) }
                                @{$inst->{binding}{architectures}};
        }
        elsif( @{$inst->{binding}{architectures}} ) {
          $inst->{bindarch}= $inst->{binding}{architectures}[0];
          $inst->{archname}= $inst->{bindarch}{name};
        }
      }
      elsif( $use->{archname} ) {
        $inst->{archname}= $use->{archname};
        my @candidates= grep lc($_->{name}) eq lc($inst->{archname}) &&
                  lc($_->{objname}) eq lc($inst->{objname}), @orphanedarchs;
        $inst->{bindarch}= elem( sub { $_->{libname} eq
                        $arch->{libname} }, @candidates) || $candidates[0];
      }
      $inst->{bindgen}= $use->{genericmap};
      next bindcompinst;
    }
    # Without an explicit binding specification we bind to the binding of the
    # matching component declaration, if any.
    if( $inst->{component} ) {
      $inst->{binding}= $inst->{component}{binding};
    }
    # Aaargh... the component is not even declared.  Sloppy designer!  So we
    # resolve the instantiation by name.
    else {
      $inst->{binding}= find_selname($inst->{objname}, "entity",
                                          $arch->{libname});
    }
    if( $inst->{binding} && @{$inst->{binding}{architectures}} ) {
      $inst->{bindarch}= $inst->{binding}{architectures}[0];
      $inst->{archname}= $inst->{bindarch}{name};
    }
  }

  for my $inst (@noncompinsts) {
    $inst->{binding}= find_selname($inst->{objname}, $inst->{subtype});
    # If the name is abiguous, go looking in current library and use clauses.
    if( defined($inst->{binding}) && $inst->{binding} == 0 ) {
      $inst->{binding}= find_selname($inst->{objname}, $inst->{subtype},
                                        $arch->{libname});
      unless( $inst->{binding} ) {
# TODO: do entity and configuration declarations even exist in packages?
        for my $useclause (@topuses) {
          my $name= merge_selname($useclause->{name}, $inst->{name});
          next unless $name;
          $inst->{binding}= find_selname($name, $inst->{subtype});
          last if $inst->{binding};
        }
      }
    }
    next unless $inst->{subtype} eq "entity";
    if( $inst->{binding} ) {
      if( $inst->{archname} ) {
        $inst->{bindarch}= elem { lc($_->{name}) eq lc($inst->{archname}) }
                                @{$inst->{binding}{architectures}};
      }
      elsif( @{$inst->{binding}{architectures}} ) {
        $inst->{bindarch}= $inst->{binding}{architectures}[0];
        $inst->{archname}= $inst->{bindarch}{name};
      }
    }
    elsif( $inst->{archname} ) {
      my @candidates= grep lc($_->{name}) eq lc($inst->{archname}) &&
                  lc($_->{objname}) eq lc($inst->{objname}), @orphanedarchs;
      $inst->{bindarch}= elem(sub { $_->{libname} eq $arch->{libname} },
                                    @candidates) || $candidates[0];
    }
  }
}


# The following data structures represent the instantiation hierarchy.  They
# also form a tree structure like our hashes representing declarative items,
# but have a different format.  The hashes representing hierarchy nodes may
# have the entries "architecture", "entity", "configuration", "archname",
# "entname" and "confname".  (Other entries serve to indicate whether the
# node's object is itself instantiated somewhere, or to reference other nodes).
# The tree structure is formed by having a "children" entry referencing an
# array of hash references, as with the declarative items.
my @hierarchy;
my @ahier;

# Create instantiation hierarchy nodes representing architectures:
for my $arch (@architectures) {
  my $node= { entname => $arch->{entity} ? $arch->{entity}{fullname}
                         : $arch->{objname}, entity => $arch->{entity},
              architecture => $arch, archname => $arch->{name} };
  push @hierarchy, $node;
  push @ahier, $node;
  $node->{children}= [];
  for my $inst (@{$arch->{allinstances}}) {
    if( $inst->{subtype} eq "configuration" || ($inst->{binding} &&
        $inst->{binding}{type} eq "configuration") ) {
      my $new;
      if( $inst->{binding} ) {
        $new= { configuration => $inst->{binding},
                confname => $inst->{binding}{name} };
      }
      else {
        $new= { confname => $inst->{objname} };
      }
      push @{$node->{children}}, $new
        unless grep_hier($new, $node->{children});
    }
    else {
      my $new;
      if( $inst->{binding} ) {
        $new= { entity => $inst->{binding}, entname => $inst->{bindname},
                architecture => $inst->{bindarch}, 
                archname => $inst->{archname} };
      }
      else {
        $new= { entname => $inst->{bindname} || $inst->{objname},
                archname => $inst->{archname} };
      }
      push @{$node->{children}}, $new
        unless grep_hier($new, $node->{children});
    }
  }
}

# Create instantiation hierarchy nodes representing configurations:
my @chier= map +{ configuration => $_, confname => $_->{name} },
                @configurations;
push @hierarchy, @chier;
# Build sub-hierarchy of configuration:
map { configure_hierarchy($_, \@ahier, \@chier); } @chier;

# Match architectures' instantiations to nodes:
for my $anode (@ahier) {
  for my $child (@{$anode->{children}}) {
    my ($cnode)= grep_hier($child, \@hierarchy);
    if( $cnode ) {
      $child= $cnode;
      $cnode->{instantiated}= 1 unless $cnode == $anode;
    }
  }
}

@hierarchy= sort hier_sort_cmp @hierarchy;
my @topmods= topmodules(\@hierarchy);

# Create links from modules to hierchy nodes of architectures and
# configurations instantiating them
for my $node (@hierarchy) {
  for my $child (@{$node->{children}}) {
    # The following conditions for configuration nodes are meant to ensure that
    # configurations are only linked to when the instantiation binding was
    # determined by them.  (Caveat: these conditions will fail if the
    # configuration "skips" a binding for a level of the hierarchy, but is this
    # legal?)
    if( ! $node->{configuration} || ($child->{configuration} &&
                $node->{configuration} == $child->{configuration}) ) {
      push @{$child->{entity}{instantiated}}, $node
          if $child->{entity};
      push @{$child->{architecture}{instantiated}}, $node
          if $child->{architecture};
    }
    push @{$child->{configuration}{instantiated}}, $node
        if $child->{configuration} && (!$node->{configuration}
            || $child->{configuration} != $node->{configuration});
  }
}


my $inheritwarn;

# Resolve port/generic documentation inherited from sub-/supermodule.
# First we replace the "from..." doc fields of the ports / generics concerned
# with references to the ports / generics from which they inherit.
for my $ent (@entities) {
  next unless $ent->{docfrominst} || $ent->{docfromwrapper};
  my (%frominst, %fromwrap);
  for my $pg (@{$ent->{childtype}{generic}}, @{$ent->{childtype}{port}}) {
    next unless defined($pg->{doc}{frominstance}) || defined($pg->{doc}{fromwrapper});
    if( defined($_= $pg->{doc}{frominstance}) ) {
      s/\..*$//;
      push @{$frominst{lc($_)}}, $pg;
    }
    if( defined($_= $pg->{doc}{fromwrapper}) ) {
      s/\..*$//;
      push @{$fromwrap{lc($_)}}, $pg;
    }
  }
  my (@multiwrap, @nowrap, @multiinst, @noinst);
  my @wrapnodes= grep $_->{entity}, @{$ent->{instantiated}}
      if %fromwrap;
  for my $wrapname (keys %fromwrap) {
    my %wrapents= map { $_->{entity} => $_->{entity}; }
        ($wrapname ? (grep lc($_->{entity}{name}) eq $wrapname, @wrapnodes) : @wrapnodes);
    for my $targetpg (@{$fromwrap{$wrapname}}) {
      my $pgname= $targetpg->{doc}{fromwrapper} =~ /\.([^\.]+)$/ ? $1 : $targetpg->{name};
      $pgname= lc($pgname);
      my %wrappgs;
      for my $wrapent (values %wrapents) {
        for (@{$wrapent->{childtype}{port}}, @{$wrapent->{childtype}{generic}}) {
          $wrappgs{$_}= $_ if lc($_->{name}) eq $pgname;
        }
      }
      push(@nowrap, $targetpg->{name}), next unless %wrappgs;
      push(@multiwrap, $targetpg->{name}) if values(%wrappgs) > 1;
      $targetpg->{doc}{inherit}= $wrappgs{[ keys %wrappgs ]->[0]};
    }
  }
  my (@instances, %compinsts, %entinsts);
  if( %frominst ) {
    @instances= map +(@{$_->{allinstances}}), @{$ent->{architectures}};
    %compinsts= map { $_ => $_; } grep $_->{subtype} eq "component" && $_->{component}, @instances;
    %entinsts= map { $_ => $_; } grep $_->{subtype} eq "entity" && $_->{binding}, @instances;
  }
  for my $instname (keys %frominst) {
    my @compinsts= values %compinsts;
    @compinsts= grep lc($_->{name}) eq $instname || lc($_->{objname}) eq $instname, @compinsts
        if $instname;
    my @entinsts= values %entinsts;
    @entinsts= grep lc($_->{name}) eq $instname || lc($_->{objname}) eq $instname, @entinsts
        if $instname;
    for my $targetpg (@{$frominst{$instname}}) {
      my $pgname= $targetpg->{doc}{frominstance} =~ /\.([^\.]+)$/ ? $1 : $targetpg->{name};
      $pgname= lc($pgname);
      my %instpgs;
      for my $comp (map $_->{component}, @compinsts) {
        for (@{$comp->{childtype}{port}}, @{$comp->{childtype}{generic}}) {
          $instpgs{$_}= $_ if lc($_->{name}) eq $pgname
                              && $_->{doc}{description};
        }
      }
      unless( %instpgs ) {
        for my $comp (map $_->{binding}, @compinsts) {
          for (@{$comp->{childtype}{port}}, @{$comp->{childtype}{generic}}) {
            $instpgs{$_}= $_ if lc($_->{name}) eq $pgname;
          }
        }
      }
      for my $instent (map $_->{binding}, @entinsts) {
        for (@{$instent->{childtype}{port}}, @{$instent->{childtype}{generic}}) {
          $instpgs{$_}= $_ if lc($_->{name}) eq $pgname;
        }
      }
      push(@noinst, $targetpg->{name}), next unless %instpgs;
      push(@multiinst, $targetpg->{name}) if values(%instpgs) > 1;
      $targetpg->{doc}{inherit}= $instpgs{[ keys %instpgs ]->[0]};
    }
  }
  print "Warning: Can't find inherited documentation in wrapper for port(s) / generic(s) ",
        cswordlist(" and ", @nowrap), " of entity $ent->{fullname}.\n"
      if @nowrap && !$config{quiet};
  print "Warning: Ambiguous inheritance of documentation from wrapper for port(s) / generic(s) ",
        cswordlist(" and ", @multiwrap), " of entity $ent->{fullname}.\n"
      if @multiwrap && !$config{quiet};
  print "Warning: Can't find inherited documentation in submodule for port(s) / generic(s) ",
        cswordlist(" and ", @noinst), " of entity $ent->{fullname}.\n"
      if @noinst && !$config{quiet};
  print "Warning: Ambiguous inheritance of documentation from submodule for port(s) / generic(s) ",
        cswordlist(" and ", @multiinst), " of entity $ent->{fullname}.\n"
      if @multiinst && !$config{quiet};
  $inheritwarn= 1 if @nowrap || @multiwrap || @noinst || @multiinst;
}

# Then we assign the descriptions, recursively across the inheritance hierarchy.
for my $ent (@entities) {
  next unless $ent->{docfrominst} || $ent->{docfromwrapper};
  my @cycles;
  for my $pg (@{$ent->{childtype}{generic}}, @{$ent->{childtype}{port}}) {
    next unless $pg->{doc}{inherit};
    my %visited= ($pg => 1);
    my @trace= ($pg);
    my $inhpg= $pg;
    while( defined($inhpg= $inhpg->{doc}{inherit}) ) {
      if( $visited{$inhpg} ) {
        push @cycles, $pg->{name};
        last;
      }
      $visited{$inhpg}= 1;
      push @trace, $inhpg;
    }
    for my $pgind (0..$#trace-1) {
      $trace[$pgind]{doc}{description}= $trace[-1]{doc}{description};
      delete $trace[$pgind]{doc}{inherit};
    }
  }
  print "Warning: Cyclical inheritance of documentation for port(s) / generic(s) ",
        cswordlist(" and ", @cycles), " of entity $ent->{fullname}.\n"
      if @cycles && !$config{quiet};
  $inheritwarn= 1 if @cycles;
}

print STDERR "Warning: Not all inherited documentation could be resolved.\n"
    if $inheritwarn;


# Resolve PSL definition references
if( $config{psl} ) {
  for my $du (@architectures, @packages) {
    next unless $du->{allpsldefs};
    my @topuses= reverse grep $_->{subtype} eq "package", @{$du->{uses}};
    # Local PSL definitions:
    my @psldefs= grep $_->{subtype} =~ /^(?:property|sequence|endpoint)$/i,
                      @{$du->{allpsldefs}};
    my %psldefdict= map { $_->{name} => $_; } @psldefs;
    for my $psl (@{$du->{allpsldefs}}) {
      my $code= $psl->{value} || $psl->{property} || $psl->{sequence};
      my @ids= $code =~ /$ID/g;
      for my $id (@ids) {
        my $ref= $psldefdict{$id};
        unless( $ref ) {
          for my $use (@topuses) {
            my $selname= merge_selname($use->{name}, $id);
            next unless $selname;
            $ref= find_selname($selname, "psl");
            last if $ref;
          }
        }
        push @{$psl->{defrefs}}, $ref if $ref;
      }
    }
  }
}

benchmark("to process") if $config{benchmark};


# Now generate documentation

print "Generating docs...\n" unless $config{quiet};
benchmark() if $config{benchmark};

# Find targets of cross references, if any
for my $obj (@entities, @architectures, @configurations, @packages,
                @packagebodies, @contexts) {
  next unless $obj->{doc}{see};
  resolve_seealso($obj->{doc}{see}, $obj->{file}{libname});
}
for my $pack (@packages, @packagebodies) {
  for my $decl (@{$pack->{children}}) {
    next unless $decl->{doc}{see};
    resolve_packagesee($decl, $pack);
  }
}

entitylisthtml(\@entities, \@orphanedarchs, \@orphanedconfs, scalar(@configurations));
packagelisthtml(\@packages, \@missingpacks, \@contexts);
instantiationhtml(\@hierarchy, scalar(@chier));
hierarchyhtml(\@hierarchy, \@topmods, scalar(@chier));
sourcelisthtml(\@vhdlfiles);

hierarchyjson(\@hierarchy, \@topmods);

for my $ent (@entities) {
  entityhtml($ent);
}

for my $conf (@configurations) {
  configurationhtml($conf);
}

for my $arch (@architectures) {
  architecturehtml($arch);
}

for my $pack (@packages, @missingpacks) {
  packagehtml($pack);
}

for my $cont (@contexts) {
  contexthtml($cont);
}

if( $config{javasyntax} ) {
  makemarkupjs();
}

if( $config{jobs} == 0 ) {
  for my $file (@vhdlfiles) {
    if( $config{javasyntax} ) {
      sourcehtml_js($file);
    }
    else {
      sourcehtml($file);
    }
  }
}

benchmark("to generate HTML") if $config{benchmark};


if( $config{texout} ) {
  print "Generating LaTeX...\n" unless $config{quiet};
  benchmark() if $config{benchmark};
  my @texconts= sort { lc($a->{fullname}) cmp lc($b->{fullname}) }
                grep !$_->{doc}{internal}, @contexts;
  my (@texpacks, @texents);
  for my $pack (@packages) {
    if( ! $pack->{doc}{internal} ) {
      push @texpacks, $pack;
    }
    else {
      $_->{doc}{internal}= 1 for (@{$pack->{children}});
    }
  }
  @texpacks= sort { lc($a->{fullname}) cmp lc($b->{fullname}) } @texpacks;
  for my $ent (@entities) {
    if( ! $ent->{doc}{internal} && ! $ent->{doc}{testbench} ) {
      push @texents, $ent;
    }
    else {
      $ent->{doc}{internal}= 1;   # simplify future checks
      $_->{doc}{internal}= 1 for (@{$ent->{children}});
    }
  }
  @texents= sort { lc($a->{fullname}) cmp lc($b->{fullname}) } @texents;
  for my $obj (@packages, @texents) {
    next unless $obj->{internal} || $obj->{testbench};
    $_->{doc}{internal}= 1 for (@{$obj->{children}});
  }
  for my $obj (@texconts, @texpacks, @texents, map @{$_->{children}}, (@texpacks, @texents) ) {
    # retain "see" references only to other TeX'ed declarations
    @{$obj->{doc}{see}}= grep $_->[1] && ! $_->[1]{doc}{internal}, @{$obj->{doc}{see}};
  }
  texall(\@texconts, \@texpacks, \@texents);
  benchmark("to generate LaTeX") if $config{benchmark};
}


exit 0;

# vim: set ts=2 sw=2 et:
